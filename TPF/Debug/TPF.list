
TPF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08008cf0  08008cf0  00009cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a0  080092a0  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080092a0  080092a0  0000a2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092a8  080092a8  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a8  080092a8  0000a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092ac  080092ac  0000a2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080092b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200001e8  08009498  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08009498  0000b5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114ea  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b55  00000000  00000000  0001c6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001f250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de9  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001942d  00000000  00000000  000211c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158bd  00000000  00000000  0003a5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092056  00000000  00000000  0004feab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1f01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be4  00000000  00000000  000e1f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000e7b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008cd8 	.word	0x08008cd8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008cd8 	.word	0x08008cd8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <eeprom_write_if_changed>:
#define ADDR_TEMP       0x0000
#define ADDR_CAFE       0x0001
#define ADDR_STOCK_BASE 0x0010  // Café, leche, agua, chocolate

// === Función auxiliar ===
static void eeprom_write_if_changed(uint16_t addr, uint8_t value) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af04      	add	r7, sp, #16
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	80fb      	strh	r3, [r7, #6]
 8000a94:	4613      	mov	r3, r2
 8000a96:	717b      	strb	r3, [r7, #5]
    uint8_t current = eeprom_read_byte(addr);
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f81c 	bl	8000ad8 <eeprom_read_byte>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	73fb      	strb	r3, [r7, #15]
    if (current != value) {
 8000aa4:	797b      	ldrb	r3, [r7, #5]
 8000aa6:	7bfa      	ldrb	r2, [r7, #15]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d00f      	beq.n	8000acc <eeprom_write_if_changed+0x44>
        HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_I2C_ADDR, addr, I2C_MEMADD_SIZE_16BIT, &value, 1, HAL_MAX_DELAY);
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	1d7b      	adds	r3, r7, #5
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2310      	movs	r3, #16
 8000abe:	21a0      	movs	r1, #160	@ 0xa0
 8000ac0:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <eeprom_write_if_changed+0x4c>)
 8000ac2:	f003 f9bd 	bl	8003e40 <HAL_I2C_Mem_Write>
        HAL_Delay(5);
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f001 feb6 	bl	8002838 <HAL_Delay>
    }
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000328 	.word	0x20000328

08000ad8 <eeprom_read_byte>:

uint8_t eeprom_read_byte(uint16_t mem_address) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af04      	add	r7, sp, #16
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
    uint8_t data = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_I2C_ADDR, mem_address, I2C_MEMADD_SIZE_16BIT, &data, 1, HAL_MAX_DELAY);
 8000ae6:	88fa      	ldrh	r2, [r7, #6]
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2301      	movs	r3, #1
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	f107 030f 	add.w	r3, r7, #15
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2310      	movs	r3, #16
 8000afa:	21a0      	movs	r1, #160	@ 0xa0
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <eeprom_read_byte+0x34>)
 8000afe:	f003 fa99 	bl	8004034 <HAL_I2C_Mem_Read>
    return data;
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000328 	.word	0x20000328

08000b10 <eeprom_save_config>:

// === GUARDAR configuración solo si hubo cambios ===
bool eeprom_save_config(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
    bool guardo = false;
 8000b16:	2300      	movs	r3, #0
 8000b18:	73fb      	strb	r3, [r7, #15]

    // Temperatura
    uint8_t raw_temp = eeprom_read_byte(ADDR_TEMP);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff ffdc 	bl	8000ad8 <eeprom_read_byte>
 8000b20:	4603      	mov	r3, r0
 8000b22:	737b      	strb	r3, [r7, #13]
    if (raw_temp != temp_deseada) {
 8000b24:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <eeprom_save_config+0xd0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	7b7a      	ldrb	r2, [r7, #13]
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d007      	beq.n	8000b3e <eeprom_save_config+0x2e>
        eeprom_write_if_changed(ADDR_TEMP, temp_deseada);
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000be0 <eeprom_save_config+0xd0>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4619      	mov	r1, r3
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff ffa7 	bl	8000a88 <eeprom_write_if_changed>
        guardo = true;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
    }

    // Tipo de café
    uint8_t raw_cafe = eeprom_read_byte(ADDR_CAFE);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff ffca 	bl	8000ad8 <eeprom_read_byte>
 8000b44:	4603      	mov	r3, r0
 8000b46:	733b      	strb	r3, [r7, #12]
    if (raw_cafe != (uint8_t)cafe_seleccionado) {
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <eeprom_save_config+0xd4>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	7b3a      	ldrb	r2, [r7, #12]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d007      	beq.n	8000b62 <eeprom_save_config+0x52>
        eeprom_write_if_changed(ADDR_CAFE, (uint8_t)cafe_seleccionado);
 8000b52:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <eeprom_save_config+0xd4>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff ff95 	bl	8000a88 <eeprom_write_if_changed>
        guardo = true;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
    }

    // Stocks
    const uint8_t stock_actual[4] = { stock_cafe, stock_leche, stock_agua, stock_chocolate };
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <eeprom_save_config+0xd8>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	713b      	strb	r3, [r7, #4]
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <eeprom_save_config+0xdc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	717b      	strb	r3, [r7, #5]
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <eeprom_save_config+0xe0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <eeprom_save_config+0xe4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 4; i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	73bb      	strb	r3, [r7, #14]
 8000b86:	e022      	b.n	8000bce <eeprom_save_config+0xbe>
        uint8_t eeprom_stock = eeprom_read_byte(ADDR_STOCK_BASE + i);
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	3310      	adds	r3, #16
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ffa1 	bl	8000ad8 <eeprom_read_byte>
 8000b96:	4603      	mov	r3, r0
 8000b98:	72fb      	strb	r3, [r7, #11]
        if (eeprom_stock != stock_actual[i]) {
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	3310      	adds	r3, #16
 8000b9e:	443b      	add	r3, r7
 8000ba0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000ba4:	7afa      	ldrb	r2, [r7, #11]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d00e      	beq.n	8000bc8 <eeprom_save_config+0xb8>
            eeprom_write_if_changed(ADDR_STOCK_BASE + i, stock_actual[i]);
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	3310      	adds	r3, #16
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	443b      	add	r3, r7
 8000bb8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	f7ff ff62 	bl	8000a88 <eeprom_write_if_changed>
            guardo = true;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 4; i++) {
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	73bb      	strb	r3, [r7, #14]
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d9d9      	bls.n	8000b88 <eeprom_save_config+0x78>
        }
    }

    return guardo;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000205 	.word	0x20000205
 8000be8:	20000004 	.word	0x20000004
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	20000010 	.word	0x20000010

08000bf8 <eeprom_load_config>:

// === CARGAR configuración desde EEPROM ===
void eeprom_load_config(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
    // Temperatura
	uint8_t raw_temp = eeprom_read_byte(ADDR_TEMP);
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff ff6a 	bl	8000ad8 <eeprom_read_byte>
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
	if (raw_temp < 20 || raw_temp > 90) {
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b13      	cmp	r3, #19
 8000c0c:	d902      	bls.n	8000c14 <eeprom_load_config+0x1c>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b5a      	cmp	r3, #90	@ 0x5a
 8000c12:	d903      	bls.n	8000c1c <eeprom_load_config+0x24>
	    temp_deseada = 60;
 8000c14:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <eeprom_load_config+0xb4>)
 8000c16:	223c      	movs	r2, #60	@ 0x3c
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e002      	b.n	8000c22 <eeprom_load_config+0x2a>
	} else {
	    temp_deseada = raw_temp;
 8000c1c:	4a23      	ldr	r2, [pc, #140]	@ (8000cac <eeprom_load_config+0xb4>)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	7013      	strb	r3, [r2, #0]
	}

    // Café seleccionado
    uint8_t raw_cafe = eeprom_read_byte(ADDR_CAFE);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff ff58 	bl	8000ad8 <eeprom_read_byte>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71bb      	strb	r3, [r7, #6]
    cafe_seleccionado = (raw_cafe <= CAFE_AMERICANO) ? (tipo_de_cafe)raw_cafe : CAFE_LATTE;
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d801      	bhi.n	8000c36 <eeprom_load_config+0x3e>
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	e000      	b.n	8000c38 <eeprom_load_config+0x40>
 8000c36:	2300      	movs	r3, #0
 8000c38:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb0 <eeprom_load_config+0xb8>)
 8000c3a:	7013      	strb	r3, [r2, #0]

    // Stocks
    uint8_t raw_stock;
    raw_stock = eeprom_read_byte(ADDR_STOCK_BASE + 0);
 8000c3c:	2010      	movs	r0, #16
 8000c3e:	f7ff ff4b 	bl	8000ad8 <eeprom_read_byte>
 8000c42:	4603      	mov	r3, r0
 8000c44:	717b      	strb	r3, [r7, #5]
    stock_cafe = (raw_stock <= 20) ? raw_stock : 10;
 8000c46:	797b      	ldrb	r3, [r7, #5]
 8000c48:	2b14      	cmp	r3, #20
 8000c4a:	d801      	bhi.n	8000c50 <eeprom_load_config+0x58>
 8000c4c:	797b      	ldrb	r3, [r7, #5]
 8000c4e:	e000      	b.n	8000c52 <eeprom_load_config+0x5a>
 8000c50:	230a      	movs	r3, #10
 8000c52:	4a18      	ldr	r2, [pc, #96]	@ (8000cb4 <eeprom_load_config+0xbc>)
 8000c54:	6013      	str	r3, [r2, #0]

    raw_stock = eeprom_read_byte(ADDR_STOCK_BASE + 1);
 8000c56:	2011      	movs	r0, #17
 8000c58:	f7ff ff3e 	bl	8000ad8 <eeprom_read_byte>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	717b      	strb	r3, [r7, #5]
    stock_leche = (raw_stock <= 20) ? raw_stock : 10;
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	2b14      	cmp	r3, #20
 8000c64:	d801      	bhi.n	8000c6a <eeprom_load_config+0x72>
 8000c66:	797b      	ldrb	r3, [r7, #5]
 8000c68:	e000      	b.n	8000c6c <eeprom_load_config+0x74>
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <eeprom_load_config+0xc0>)
 8000c6e:	6013      	str	r3, [r2, #0]

    raw_stock = eeprom_read_byte(ADDR_STOCK_BASE + 2);
 8000c70:	2012      	movs	r0, #18
 8000c72:	f7ff ff31 	bl	8000ad8 <eeprom_read_byte>
 8000c76:	4603      	mov	r3, r0
 8000c78:	717b      	strb	r3, [r7, #5]
    stock_agua = (raw_stock <= 20) ? raw_stock : 10;
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	2b14      	cmp	r3, #20
 8000c7e:	d801      	bhi.n	8000c84 <eeprom_load_config+0x8c>
 8000c80:	797b      	ldrb	r3, [r7, #5]
 8000c82:	e000      	b.n	8000c86 <eeprom_load_config+0x8e>
 8000c84:	230a      	movs	r3, #10
 8000c86:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <eeprom_load_config+0xc4>)
 8000c88:	6013      	str	r3, [r2, #0]

    raw_stock = eeprom_read_byte(ADDR_STOCK_BASE + 3);
 8000c8a:	2013      	movs	r0, #19
 8000c8c:	f7ff ff24 	bl	8000ad8 <eeprom_read_byte>
 8000c90:	4603      	mov	r3, r0
 8000c92:	717b      	strb	r3, [r7, #5]
    stock_chocolate = (raw_stock <= 20) ? raw_stock : 10;
 8000c94:	797b      	ldrb	r3, [r7, #5]
 8000c96:	2b14      	cmp	r3, #20
 8000c98:	d801      	bhi.n	8000c9e <eeprom_load_config+0xa6>
 8000c9a:	797b      	ldrb	r3, [r7, #5]
 8000c9c:	e000      	b.n	8000ca0 <eeprom_load_config+0xa8>
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	4a07      	ldr	r2, [pc, #28]	@ (8000cc0 <eeprom_load_config+0xc8>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000205 	.word	0x20000205
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	2000000c 	.word	0x2000000c
 8000cc0:	20000010 	.word	0x20000010

08000cc4 <joystick_derecha>:
// === ADC lectura externa ===
extern uint32_t adc_value[3];  // valor de potenciómetro por DMA

// === Filtro botones con rebote ===

bool joystick_derecha(void) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
    static bool prev_estado = false;
    bool estado_actual = (adc_value[2] > (JOY_CENTRO + JOY_UMBRAL));  // X
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <joystick_derecha+0x54>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f640 32e8 	movw	r2, #3048	@ 0xbe8
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	bf8c      	ite	hi
 8000cd6:	2301      	movhi	r3, #1
 8000cd8:	2300      	movls	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]
    if (estado_actual && !prev_estado) {
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <joystick_derecha+0x36>
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <joystick_derecha+0x58>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f083 0301 	eor.w	r3, r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <joystick_derecha+0x36>
        prev_estado = true;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <joystick_derecha+0x58>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
        return true;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e009      	b.n	8000d0e <joystick_derecha+0x4a>
    } else if (!estado_actual) {
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f083 0301 	eor.w	r3, r3, #1
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d002      	beq.n	8000d0c <joystick_derecha+0x48>
        prev_estado = false;
 8000d06:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <joystick_derecha+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
    }
    return false;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	20000454 	.word	0x20000454
 8000d1c:	20000210 	.word	0x20000210

08000d20 <joystick_arriba>:


bool joystick_arriba(void) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
    static bool prev_estado = false;
    bool estado_actual = (adc_value[1] > (JOY_CENTRO + JOY_UMBRAL));  // Y
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <joystick_arriba+0x54>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f640 32e8 	movw	r2, #3048	@ 0xbe8
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	bf8c      	ite	hi
 8000d32:	2301      	movhi	r3, #1
 8000d34:	2300      	movls	r3, #0
 8000d36:	71fb      	strb	r3, [r7, #7]
    if (estado_actual && !prev_estado) {
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <joystick_arriba+0x36>
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <joystick_arriba+0x58>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	f083 0301 	eor.w	r3, r3, #1
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <joystick_arriba+0x36>
        prev_estado = true;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <joystick_arriba+0x58>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
        return true;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e009      	b.n	8000d6a <joystick_arriba+0x4a>
    } else if (!estado_actual) {
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f083 0301 	eor.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <joystick_arriba+0x48>
        prev_estado = false;
 8000d62:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <joystick_arriba+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
    }
    return false;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr
 8000d74:	20000454 	.word	0x20000454
 8000d78:	20000211 	.word	0x20000211

08000d7c <debounce>:

bool debounce(GPIO_TypeDef* port, uint16_t pin, uint32_t delay_ms) {
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	460b      	mov	r3, r1
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	817b      	strh	r3, [r7, #10]
    static uint32_t last_time[10] = {0};  // índice por botón
    static bool last_state[10] = {0};
    uint8_t idx = pin % 10;
 8000d8a:	897a      	ldrh	r2, [r7, #10]
 8000d8c:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <debounce+0xa0>)
 8000d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d92:	08d9      	lsrs	r1, r3, #3
 8000d94:	460b      	mov	r3, r1
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	75fb      	strb	r3, [r7, #23]

    bool current = (HAL_GPIO_ReadPin(port, pin) == GPIO_PIN_RESET);
 8000da2:	897b      	ldrh	r3, [r7, #10]
 8000da4:	4619      	mov	r1, r3
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f002 fdb6 	bl	8003918 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	bf0c      	ite	eq
 8000db2:	2301      	moveq	r3, #1
 8000db4:	2300      	movne	r3, #0
 8000db6:	75bb      	strb	r3, [r7, #22]
    if (current && !last_state[idx] && (HAL_GetTick() - last_time[idx] > delay_ms)) {
 8000db8:	7dbb      	ldrb	r3, [r7, #22]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d01f      	beq.n	8000dfe <debounce+0x82>
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	4a17      	ldr	r2, [pc, #92]	@ (8000e20 <debounce+0xa4>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	f083 0301 	eor.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d017      	beq.n	8000dfe <debounce+0x82>
 8000dce:	f001 fd29 	bl	8002824 <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	4913      	ldr	r1, [pc, #76]	@ (8000e24 <debounce+0xa8>)
 8000dd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d20c      	bcs.n	8000dfe <debounce+0x82>
        last_state[idx] = true;
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e20 <debounce+0xa4>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	54d1      	strb	r1, [r2, r3]
        last_time[idx] = HAL_GetTick();
 8000dec:	7dfc      	ldrb	r4, [r7, #23]
 8000dee:	f001 fd19 	bl	8002824 <HAL_GetTick>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e24 <debounce+0xa8>)
 8000df6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        return true;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00a      	b.n	8000e14 <debounce+0x98>
    } else if (!current) {
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	f083 0301 	eor.w	r3, r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <debounce+0x96>
        last_state[idx] = false;
 8000e0a:	7dfb      	ldrb	r3, [r7, #23]
 8000e0c:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <debounce+0xa4>)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	54d1      	strb	r1, [r2, r3]
    }
    return false;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	cccccccd 	.word	0xcccccccd
 8000e20:	20000214 	.word	0x20000214
 8000e24:	20000220 	.word	0x20000220

08000e28 <cafe_listo>:


bool cafe_listo(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    return (HAL_GetTick() - inicio_brewing_ms) >= DURACION_BREWING_MS;
 8000e2c:	f001 fcfa 	bl	8002824 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <cafe_listo+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	bf2c      	ite	cs
 8000e40:	2301      	movcs	r3, #1
 8000e42:	2300      	movcc	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000020c 	.word	0x2000020c

08000e50 <boton_azul_presionado>:

bool boton_azul_presionado(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET;
 8000e54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <boton_azul_presionado+0x20>)
 8000e5a:	f002 fd5d 	bl	8003918 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bf0c      	ite	eq
 8000e64:	2301      	moveq	r3, #1
 8000e66:	2300      	movne	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40011000 	.word	0x40011000

08000e74 <boton_azul_sostenido>:

bool boton_azul_sostenido(uint16_t ms) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
    static uint32_t t_ini = 0;
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000e7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e82:	4812      	ldr	r0, [pc, #72]	@ (8000ecc <boton_azul_sostenido+0x58>)
 8000e84:	f002 fd48 	bl	8003918 <HAL_GPIO_ReadPin>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d116      	bne.n	8000ebc <boton_azul_sostenido+0x48>
        if (t_ini == 0) t_ini = HAL_GetTick();
 8000e8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <boton_azul_sostenido+0x5c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d104      	bne.n	8000ea0 <boton_azul_sostenido+0x2c>
 8000e96:	f001 fcc5 	bl	8002824 <HAL_GetTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed0 <boton_azul_sostenido+0x5c>)
 8000e9e:	6013      	str	r3, [r2, #0]
        if (HAL_GetTick() - t_ini >= ms) {
 8000ea0:	f001 fcc0 	bl	8002824 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <boton_azul_sostenido+0x5c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	1ad2      	subs	r2, r2, r3
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d307      	bcc.n	8000ec2 <boton_azul_sostenido+0x4e>
            t_ini = 0;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <boton_azul_sostenido+0x5c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
            return true;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e003      	b.n	8000ec4 <boton_azul_sostenido+0x50>
        }
    } else {
        t_ini = 0;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <boton_azul_sostenido+0x5c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
    }
    return false;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40011000 	.word	0x40011000
 8000ed0:	20000248 	.word	0x20000248

08000ed4 <boton1_presionado>:

// === Botones ===
bool boton1_presionado(void) { return debounce(BOTON1_GPIO_Port, BOTON1_Pin, 50); }
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	2232      	movs	r2, #50	@ 0x32
 8000eda:	2101      	movs	r1, #1
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <boton1_presionado+0x14>)
 8000ede:	f7ff ff4d 	bl	8000d7c <debounce>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <boton2_presionado>:
bool boton2_presionado(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    static uint32_t last_press = 0;
    if (HAL_GPIO_ReadPin(BOTON2_GPIO_Port, BOTON2_Pin) == GPIO_PIN_RESET) {
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <boton2_presionado+0x38>)
 8000ef4:	f002 fd10 	bl	8003918 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10e      	bne.n	8000f1c <boton2_presionado+0x30>
        if (HAL_GetTick() - last_press > 200) {
 8000efe:	f001 fc91 	bl	8002824 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <boton2_presionado+0x3c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f0c:	d906      	bls.n	8000f1c <boton2_presionado+0x30>
            last_press = HAL_GetTick();
 8000f0e:	f001 fc89 	bl	8002824 <HAL_GetTick>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <boton2_presionado+0x3c>)
 8000f16:	6013      	str	r3, [r2, #0]
            return true;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e000      	b.n	8000f1e <boton2_presionado+0x32>
        }
    }
    return false;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40011000 	.word	0x40011000
 8000f28:	2000024c 	.word	0x2000024c

08000f2c <boton3_presionado>:
	//bool boton2_presionado(void) { return debounce(BOTON2_GPIO_Port, BOTON2_Pin, 50); }
	bool boton3_presionado(void) { return debounce(BOTON3_GPIO_Port, BOTON3_Pin, 50); }
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	2232      	movs	r2, #50	@ 0x32
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <boton3_presionado+0x14>)
 8000f36:	f7ff ff21 	bl	8000d7c <debounce>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40011000 	.word	0x40011000

08000f44 <mostrar_estado_leds>:




void mostrar_estado_leds(estados est) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
    led_on(1); led_on(2); led_on(3); led_on(4);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 fc74 	bl	800183c <led_on>
 8000f54:	2002      	movs	r0, #2
 8000f56:	f000 fc71 	bl	800183c <led_on>
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 fc6e 	bl	800183c <led_on>
 8000f60:	2004      	movs	r0, #4
 8000f62:	f000 fc6b 	bl	800183c <led_on>
    switch (est) {
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d828      	bhi.n	8000fbe <mostrar_estado_leds+0x7a>
 8000f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8000f74 <mostrar_estado_leds+0x30>)
 8000f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f72:	bf00      	nop
 8000f74:	08000f8d 	.word	0x08000f8d
 8000f78:	08000f95 	.word	0x08000f95
 8000f7c:	08000f9d 	.word	0x08000f9d
 8000f80:	08000fbf 	.word	0x08000fbf
 8000f84:	08000fbf 	.word	0x08000fbf
 8000f88:	08000fa5 	.word	0x08000fa5
        case estado_off:             led_off(1); break;
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 fc89 	bl	80018a4 <led_off>
 8000f92:	e015      	b.n	8000fc0 <mostrar_estado_leds+0x7c>
        case estado_menu_principal:  led_off(2); break;
 8000f94:	2002      	movs	r0, #2
 8000f96:	f000 fc85 	bl	80018a4 <led_off>
 8000f9a:	e011      	b.n	8000fc0 <mostrar_estado_leds+0x7c>
        case estado_seleccion_cafe:  led_off(3); break;
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 fc81 	bl	80018a4 <led_off>
 8000fa2:	e00d      	b.n	8000fc0 <mostrar_estado_leds+0x7c>
        case estado_fabricante:
            led_off(1); led_off(2); led_off(3); led_off(4); break;
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 fc7d 	bl	80018a4 <led_off>
 8000faa:	2002      	movs	r0, #2
 8000fac:	f000 fc7a 	bl	80018a4 <led_off>
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 fc77 	bl	80018a4 <led_off>
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f000 fc74 	bl	80018a4 <led_off>
 8000fbc:	e000      	b.n	8000fc0 <mostrar_estado_leds+0x7c>
        default: break;
 8000fbe:	bf00      	nop
    }
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <actualizar_temperatura_actual>:

// === ADC suavizado ===
void actualizar_temperatura_actual(void) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
    static uint8_t temp_anterior = 0;
    uint8_t temp_leida = (adc_value[0] * 60) / 4095 + 30;
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <actualizar_temperatura_actual+0x50>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <actualizar_temperatura_actual+0x54>)
 8000fde:	fba3 1302 	umull	r1, r3, r3, r2
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	0852      	lsrs	r2, r2, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	0adb      	lsrs	r3, r3, #11
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	331e      	adds	r3, #30
 8000fee:	71fb      	strb	r3, [r7, #7]
    if (abs((int)temp_leida - temp_anterior) >= 2) {
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8001020 <actualizar_temperatura_actual+0x58>)
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bfb8      	it	lt
 8000ffc:	425b      	neglt	r3, r3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	dd05      	ble.n	800100e <actualizar_temperatura_actual+0x46>
        temp_actual = temp_leida;
 8001002:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <actualizar_temperatura_actual+0x5c>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	7013      	strb	r3, [r2, #0]
        temp_anterior = temp_leida;
 8001008:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <actualizar_temperatura_actual+0x58>)
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	7013      	strb	r3, [r2, #0]
    }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000454 	.word	0x20000454
 800101c:	00100101 	.word	0x00100101
 8001020:	20000250 	.word	0x20000250
 8001024:	20000001 	.word	0x20000001

08001028 <fsm_update>:

void fsm_update(void) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b0a1      	sub	sp, #132	@ 0x84
 800102c:	af00      	add	r7, sp, #0
    static tipo_de_cafe last_cafe = -1;
    static uint8_t last_temp = 0xFF;
    // Mapear el valor del potenciómetro a temperatura deseada (por ejemplo 30–90°C)
    actualizar_temperatura_actual();
 800102e:	f7ff ffcb 	bl	8000fc8 <actualizar_temperatura_actual>
    mostrar_estado_leds(estado_actual);
 8001032:	4bc9      	ldr	r3, [pc, #804]	@ (8001358 <fsm_update+0x330>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff84 	bl	8000f44 <mostrar_estado_leds>
    if (boton1_presionado() || boton2_presionado() || boton3_presionado())
 800103c:	f7ff ff4a 	bl	8000ed4 <boton1_presionado>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <fsm_update+0x32>
 8001046:	f7ff ff51 	bl	8000eec <boton2_presionado>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d104      	bne.n	800105a <fsm_update+0x32>
 8001050:	f7ff ff6c 	bl	8000f2c <boton3_presionado>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <fsm_update+0x3c>
        ultima_interaccion_ms = HAL_GetTick();
 800105a:	f001 fbe3 	bl	8002824 <HAL_GetTick>
 800105e:	4603      	mov	r3, r0
 8001060:	4abe      	ldr	r2, [pc, #760]	@ (800135c <fsm_update+0x334>)
 8001062:	6013      	str	r3, [r2, #0]

    switch (estado_actual) {
 8001064:	4bbc      	ldr	r3, [pc, #752]	@ (8001358 <fsm_update+0x330>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b07      	cmp	r3, #7
 800106a:	f200 83ca 	bhi.w	8001802 <fsm_update+0x7da>
 800106e:	a201      	add	r2, pc, #4	@ (adr r2, 8001074 <fsm_update+0x4c>)
 8001070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001074:	08001095 	.word	0x08001095
 8001078:	080014d3 	.word	0x080014d3
 800107c:	08001545 	.word	0x08001545
 8001080:	08001723 	.word	0x08001723
 8001084:	08001777 	.word	0x08001777
 8001088:	08001151 	.word	0x08001151
 800108c:	08001201 	.word	0x08001201
 8001090:	080013f9 	.word	0x080013f9

		case estado_off:
		    lcd_put_cur(0, 0);
 8001094:	2100      	movs	r1, #0
 8001096:	2000      	movs	r0, #0
 8001098:	f000 fd31 	bl	8001afe <lcd_put_cur>
		  	lcd_send_string("Presione Start");
 800109c:	48b0      	ldr	r0, [pc, #704]	@ (8001360 <fsm_update+0x338>)
 800109e:	f000 fd8a 	bl	8001bb6 <lcd_send_string>

			if (boton1_presionado()) {
 80010a2:	f7ff ff17 	bl	8000ed4 <boton1_presionado>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d02b      	beq.n	8001104 <fsm_update+0xdc>
			    lcd_clear();
 80010ac:	f000 fd10 	bl	8001ad0 <lcd_clear>
			    lcd_put_cur(0, 0);
 80010b0:	2100      	movs	r1, #0
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fd23 	bl	8001afe <lcd_put_cur>
			    lcd_send_string("Cargando EEPROM...");
 80010b8:	48aa      	ldr	r0, [pc, #680]	@ (8001364 <fsm_update+0x33c>)
 80010ba:	f000 fd7c 	bl	8001bb6 <lcd_send_string>
			    HAL_Delay(1000);
 80010be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010c2:	f001 fbb9 	bl	8002838 <HAL_Delay>

			    eeprom_load_config();  // <--- CARGA valores desde EEPROM aquí
 80010c6:	f7ff fd97 	bl	8000bf8 <eeprom_load_config>


				lcd_clear();
 80010ca:	f000 fd01 	bl	8001ad0 <lcd_clear>
				lcd_put_cur(0, 0);
 80010ce:	2100      	movs	r1, #0
 80010d0:	2000      	movs	r0, #0
 80010d2:	f000 fd14 	bl	8001afe <lcd_put_cur>
				lcd_send_string("Konnichiwa !!");
 80010d6:	48a4      	ldr	r0, [pc, #656]	@ (8001368 <fsm_update+0x340>)
 80010d8:	f000 fd6d 	bl	8001bb6 <lcd_send_string>
				HAL_Delay(1500);
 80010dc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80010e0:	f001 fbaa 	bl	8002838 <HAL_Delay>
				lcd_clear();
 80010e4:	f000 fcf4 	bl	8001ad0 <lcd_clear>
				lcd_put_cur(0, 0);
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fd07 	bl	8001afe <lcd_put_cur>
				lcd_send_string("Espere...");
 80010f0:	489e      	ldr	r0, [pc, #632]	@ (800136c <fsm_update+0x344>)
 80010f2:	f000 fd60 	bl	8001bb6 <lcd_send_string>
				HAL_Delay(1000);
 80010f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010fa:	f001 fb9d 	bl	8002838 <HAL_Delay>
				estado_actual = estado_menu_principal;
 80010fe:	4b96      	ldr	r3, [pc, #600]	@ (8001358 <fsm_update+0x330>)
 8001100:	2201      	movs	r2, #1
 8001102:	701a      	strb	r2, [r3, #0]

			}

			if (boton_azul_presionado()) {
 8001104:	f7ff fea4 	bl	8000e50 <boton_azul_presionado>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 836a 	beq.w	80017e4 <fsm_update+0x7bc>
			    lcd_clear();
 8001110:	f000 fcde 	bl	8001ad0 <lcd_clear>
				lcd_put_cur(0, 0);
 8001114:	2100      	movs	r1, #0
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fcf1 	bl	8001afe <lcd_put_cur>
			    lcd_send_string("Modo FAB...");
 800111c:	4894      	ldr	r0, [pc, #592]	@ (8001370 <fsm_update+0x348>)
 800111e:	f000 fd4a 	bl	8001bb6 <lcd_send_string>
			    HAL_Delay(1000);
 8001122:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001126:	f001 fb87 	bl	8002838 <HAL_Delay>
			    lcd_clear();
 800112a:	f000 fcd1 	bl	8001ad0 <lcd_clear>
			    lcd_put_cur(0, 0);
 800112e:	2100      	movs	r1, #0
 8001130:	2000      	movs	r0, #0
 8001132:	f000 fce4 	bl	8001afe <lcd_put_cur>
			    lcd_send_string("Cargando EEPROM...");
 8001136:	488b      	ldr	r0, [pc, #556]	@ (8001364 <fsm_update+0x33c>)
 8001138:	f000 fd3d 	bl	8001bb6 <lcd_send_string>
			    HAL_Delay(1000);
 800113c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001140:	f001 fb7a 	bl	8002838 <HAL_Delay>

			    eeprom_load_config();  // <--- CARGA valores desde EEPROM aquí
 8001144:	f7ff fd58 	bl	8000bf8 <eeprom_load_config>
			    estado_actual = estado_fabricante;
 8001148:	4b83      	ldr	r3, [pc, #524]	@ (8001358 <fsm_update+0x330>)
 800114a:	2205      	movs	r2, #5
 800114c:	701a      	strb	r2, [r3, #0]
			}


			break;
 800114e:	e349      	b.n	80017e4 <fsm_update+0x7bc>

		case estado_fabricante:
		    static uint8_t menu_idx = 0;
		    const char* menus[] = { "Stock actual", "Temp deseada" };
 8001150:	4a88      	ldr	r2, [pc, #544]	@ (8001374 <fsm_update+0x34c>)
 8001152:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115a:	e883 0003 	stmia.w	r3, {r0, r1}

		    lcd_put_cur(0, 0);
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f000 fccc 	bl	8001afe <lcd_put_cur>
		    lcd_send_string("FAB: Seleccione ");
 8001166:	4884      	ldr	r0, [pc, #528]	@ (8001378 <fsm_update+0x350>)
 8001168:	f000 fd25 	bl	8001bb6 <lcd_send_string>
		    lcd_put_cur(1, 0);
 800116c:	2100      	movs	r1, #0
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fcc5 	bl	8001afe <lcd_put_cur>
		    lcd_send_string(menus[menu_idx]);
 8001174:	4b81      	ldr	r3, [pc, #516]	@ (800137c <fsm_update+0x354>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	3380      	adds	r3, #128	@ 0x80
 800117c:	443b      	add	r3, r7
 800117e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fd17 	bl	8001bb6 <lcd_send_string>

		    if (joystick_arriba()) {
 8001188:	f7ff fdca 	bl	8000d20 <joystick_arriba>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00d      	beq.n	80011ae <fsm_update+0x186>
		        menu_idx = (menu_idx + 1) % 2;
 8001192:	4b7a      	ldr	r3, [pc, #488]	@ (800137c <fsm_update+0x354>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	bfb8      	it	lt
 80011a0:	425b      	neglt	r3, r3
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b75      	ldr	r3, [pc, #468]	@ (800137c <fsm_update+0x354>)
 80011a6:	701a      	strb	r2, [r3, #0]
		        HAL_Delay(150);
 80011a8:	2096      	movs	r0, #150	@ 0x96
 80011aa:	f001 fb45 	bl	8002838 <HAL_Delay>
		    }

		    if (boton1_presionado()) {
 80011ae:	f7ff fe91 	bl	8000ed4 <boton1_presionado>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00a      	beq.n	80011ce <fsm_update+0x1a6>
		    	lcd_clear();
 80011b8:	f000 fc8a 	bl	8001ad0 <lcd_clear>
		        estado_actual = (menu_idx == 0) ? estado_submenu_stock : estado_submenu_temp_deseada;
 80011bc:	4b6f      	ldr	r3, [pc, #444]	@ (800137c <fsm_update+0x354>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <fsm_update+0x1a0>
 80011c4:	2206      	movs	r2, #6
 80011c6:	e000      	b.n	80011ca <fsm_update+0x1a2>
 80011c8:	2207      	movs	r2, #7
 80011ca:	4b63      	ldr	r3, [pc, #396]	@ (8001358 <fsm_update+0x330>)
 80011cc:	701a      	strb	r2, [r3, #0]
		    }

		    if (boton_azul_sostenido(2000)) {
 80011ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011d2:	f7ff fe4f 	bl	8000e74 <boton_azul_sostenido>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 8305 	beq.w	80017e8 <fsm_update+0x7c0>
		        lcd_clear();
 80011de:	f000 fc77 	bl	8001ad0 <lcd_clear>
			    lcd_put_cur(0, 0);
 80011e2:	2100      	movs	r1, #0
 80011e4:	2000      	movs	r0, #0
 80011e6:	f000 fc8a 	bl	8001afe <lcd_put_cur>
		        lcd_send_string("Saliendo...");
 80011ea:	4865      	ldr	r0, [pc, #404]	@ (8001380 <fsm_update+0x358>)
 80011ec:	f000 fce3 	bl	8001bb6 <lcd_send_string>
		        HAL_Delay(500);
 80011f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011f4:	f001 fb20 	bl	8002838 <HAL_Delay>
		        estado_actual = estado_off;
 80011f8:	4b57      	ldr	r3, [pc, #348]	@ (8001358 <fsm_update+0x330>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
		    }

		    break;
 80011fe:	e2f3      	b.n	80017e8 <fsm_update+0x7c0>

		case estado_submenu_stock: {
		        static uint8_t idx = 0;
		        static int nuevo = 0;
		        static bool edit = false;
		        const char* nombres[] = { "Cafe", "Leche", "Agua", "Choc" };
 8001200:	4b60      	ldr	r3, [pc, #384]	@ (8001384 <fsm_update+0x35c>)
 8001202:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		        int* stocks[] = { &stock_cafe, &stock_leche, &stock_agua, &stock_chocolate };
 800120c:	4b5e      	ldr	r3, [pc, #376]	@ (8001388 <fsm_update+0x360>)
 800120e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		        lcd_put_cur(0, 0);
 8001218:	2100      	movs	r1, #0
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fc6f 	bl	8001afe <lcd_put_cur>

		        if (!edit) {
 8001220:	4b5a      	ldr	r3, [pc, #360]	@ (800138c <fsm_update+0x364>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f083 0301 	eor.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d042      	beq.n	80012b4 <fsm_update+0x28c>
		            char linea[16];
		            sprintf(linea, "%s: Stock=%d", nombres[idx], *stocks[idx]);
 800122e:	4b58      	ldr	r3, [pc, #352]	@ (8001390 <fsm_update+0x368>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	3380      	adds	r3, #128	@ 0x80
 8001236:	443b      	add	r3, r7
 8001238:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800123c:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <fsm_update+0x368>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	3380      	adds	r3, #128	@ 0x80
 8001244:	443b      	add	r3, r7
 8001246:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001250:	4950      	ldr	r1, [pc, #320]	@ (8001394 <fsm_update+0x36c>)
 8001252:	f005 faff 	bl	8006854 <siprintf>
		            lcd_send_string(linea);
 8001256:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fcab 	bl	8001bb6 <lcd_send_string>

		            if (joystick_arriba()) { idx = (idx + 1) % 4; lcd_clear(); }
 8001260:	f7ff fd5e 	bl	8000d20 <joystick_arriba>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00e      	beq.n	8001288 <fsm_update+0x260>
 800126a:	4b49      	ldr	r3, [pc, #292]	@ (8001390 <fsm_update+0x368>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	425a      	negs	r2, r3
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	f002 0203 	and.w	r2, r2, #3
 800127a:	bf58      	it	pl
 800127c:	4253      	negpl	r3, r2
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b43      	ldr	r3, [pc, #268]	@ (8001390 <fsm_update+0x368>)
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	f000 fc24 	bl	8001ad0 <lcd_clear>
		            if (boton1_presionado()) { edit = true; nuevo = *stocks[idx]; lcd_clear(); }
 8001288:	f7ff fe24 	bl	8000ed4 <boton1_presionado>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8099 	beq.w	80013c6 <fsm_update+0x39e>
 8001294:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <fsm_update+0x364>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <fsm_update+0x368>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	3380      	adds	r3, #128	@ 0x80
 80012a2:	443b      	add	r3, r7
 80012a4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001398 <fsm_update+0x370>)
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	f000 fc0f 	bl	8001ad0 <lcd_clear>
 80012b2:	e088      	b.n	80013c6 <fsm_update+0x39e>
		        } else {
		            char linea[17];
		            sprintf(linea, "Nuevo %s: %2d", nombres[idx], nuevo);
 80012b4:	4b36      	ldr	r3, [pc, #216]	@ (8001390 <fsm_update+0x368>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	3380      	adds	r3, #128	@ 0x80
 80012bc:	443b      	add	r3, r7
 80012be:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80012c2:	4b35      	ldr	r3, [pc, #212]	@ (8001398 <fsm_update+0x370>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80012ca:	4934      	ldr	r1, [pc, #208]	@ (800139c <fsm_update+0x374>)
 80012cc:	f005 fac2 	bl	8006854 <siprintf>
		            lcd_send_string(linea);
 80012d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fc6e 	bl	8001bb6 <lcd_send_string>
		            if (joystick_arriba()) { nuevo = (nuevo + 1) % 21; lcd_clear(); }
 80012da:	f7ff fd21 	bl	8000d20 <joystick_arriba>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d012      	beq.n	800130a <fsm_update+0x2e2>
 80012e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001398 <fsm_update+0x370>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <fsm_update+0x378>)
 80012ec:	fb83 2301 	smull	r2, r3, r3, r1
 80012f0:	109a      	asrs	r2, r3, #2
 80012f2:	17cb      	asrs	r3, r1, #31
 80012f4:	1ad2      	subs	r2, r2, r3
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00da      	lsls	r2, r3, #3
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	1a8a      	subs	r2, r1, r2
 8001302:	4b25      	ldr	r3, [pc, #148]	@ (8001398 <fsm_update+0x370>)
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	f000 fbe3 	bl	8001ad0 <lcd_clear>
		            if (boton1_presionado()) {
 800130a:	f7ff fde3 	bl	8000ed4 <boton1_presionado>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d058      	beq.n	80013c6 <fsm_update+0x39e>
		                *stocks[idx] = nuevo;
 8001314:	4b1e      	ldr	r3, [pc, #120]	@ (8001390 <fsm_update+0x368>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	3380      	adds	r3, #128	@ 0x80
 800131c:	443b      	add	r3, r7
 800131e:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001322:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <fsm_update+0x370>)
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	601a      	str	r2, [r3, #0]
		                edit = false;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <fsm_update+0x364>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
		                lcd_clear();
 800132e:	f000 fbcf 	bl	8001ad0 <lcd_clear>
		    		    lcd_put_cur(0, 0);
 8001332:	2100      	movs	r1, #0
 8001334:	2000      	movs	r0, #0
 8001336:	f000 fbe2 	bl	8001afe <lcd_put_cur>
		    		    if (eeprom_save_config()) {
 800133a:	f7ff fbe9 	bl	8000b10 <eeprom_save_config>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d031      	beq.n	80013a8 <fsm_update+0x380>
		    		    	lcd_clear();
 8001344:	f000 fbc4 	bl	8001ad0 <lcd_clear>
		    		    	lcd_put_cur(0,0);
 8001348:	2100      	movs	r1, #0
 800134a:	2000      	movs	r0, #0
 800134c:	f000 fbd7 	bl	8001afe <lcd_put_cur>
		    		    	lcd_send_string("Stock Guardada!");
 8001350:	4814      	ldr	r0, [pc, #80]	@ (80013a4 <fsm_update+0x37c>)
 8001352:	f000 fc30 	bl	8001bb6 <lcd_send_string>
 8001356:	e030      	b.n	80013ba <fsm_update+0x392>
 8001358:	20000204 	.word	0x20000204
 800135c:	20000208 	.word	0x20000208
 8001360:	08008cf0 	.word	0x08008cf0
 8001364:	08008d00 	.word	0x08008d00
 8001368:	08008d14 	.word	0x08008d14
 800136c:	08008d24 	.word	0x08008d24
 8001370:	08008d30 	.word	0x08008d30
 8001374:	08008e94 	.word	0x08008e94
 8001378:	08008d3c 	.word	0x08008d3c
 800137c:	20000251 	.word	0x20000251
 8001380:	08008d50 	.word	0x08008d50
 8001384:	08008ebc 	.word	0x08008ebc
 8001388:	08008ecc 	.word	0x08008ecc
 800138c:	20000252 	.word	0x20000252
 8001390:	20000253 	.word	0x20000253
 8001394:	08008d5c 	.word	0x08008d5c
 8001398:	20000254 	.word	0x20000254
 800139c:	08008d6c 	.word	0x08008d6c
 80013a0:	30c30c31 	.word	0x30c30c31
 80013a4:	08008d7c 	.word	0x08008d7c
		    		    	} else {
		    		    	lcd_clear();
 80013a8:	f000 fb92 	bl	8001ad0 <lcd_clear>
		    		    	lcd_put_cur(0,0);
 80013ac:	2100      	movs	r1, #0
 80013ae:	2000      	movs	r0, #0
 80013b0:	f000 fba5 	bl	8001afe <lcd_put_cur>
		    		    	lcd_send_string("Sin cambios.");
 80013b4:	48a9      	ldr	r0, [pc, #676]	@ (800165c <fsm_update+0x634>)
 80013b6:	f000 fbfe 	bl	8001bb6 <lcd_send_string>
		    		    	}
		                HAL_Delay(600);
 80013ba:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013be:	f001 fa3b 	bl	8002838 <HAL_Delay>
		                lcd_clear();
 80013c2:	f000 fb85 	bl	8001ad0 <lcd_clear>
		            }
		        }

		        if (boton_azul_sostenido(2000)) {
 80013c6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ca:	f7ff fd53 	bl	8000e74 <boton_azul_sostenido>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 820b 	beq.w	80017ec <fsm_update+0x7c4>
		            lcd_clear();
 80013d6:	f000 fb7b 	bl	8001ad0 <lcd_clear>
				    lcd_put_cur(0, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 fb8e 	bl	8001afe <lcd_put_cur>
		            lcd_send_string("Saliendo...");
 80013e2:	489f      	ldr	r0, [pc, #636]	@ (8001660 <fsm_update+0x638>)
 80013e4:	f000 fbe7 	bl	8001bb6 <lcd_send_string>
		            HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ec:	f001 fa24 	bl	8002838 <HAL_Delay>
		            estado_actual = estado_fabricante;
 80013f0:	4b9c      	ldr	r3, [pc, #624]	@ (8001664 <fsm_update+0x63c>)
 80013f2:	2205      	movs	r2, #5
 80013f4:	701a      	strb	r2, [r3, #0]
		        }
		        break;
 80013f6:	e1f9      	b.n	80017ec <fsm_update+0x7c4>
		    }


		case estado_submenu_temp_deseada:{

		    lcd_put_cur(0, 0);
 80013f8:	2100      	movs	r1, #0
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 fb7f 	bl	8001afe <lcd_put_cur>
		    lcd_send_string("Edit Temp");
 8001400:	4899      	ldr	r0, [pc, #612]	@ (8001668 <fsm_update+0x640>)
 8001402:	f000 fbd8 	bl	8001bb6 <lcd_send_string>
		    lcd_put_cur(1, 0);
 8001406:	2100      	movs	r1, #0
 8001408:	2001      	movs	r0, #1
 800140a:	f000 fb78 	bl	8001afe <lcd_put_cur>
		    nueva_temp = (adc_value[0] * 60) / 4095 + 30;
 800140e:	4b97      	ldr	r3, [pc, #604]	@ (800166c <fsm_update+0x644>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4613      	mov	r3, r2
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	1a9b      	subs	r3, r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	461a      	mov	r2, r3
 800141c:	4b94      	ldr	r3, [pc, #592]	@ (8001670 <fsm_update+0x648>)
 800141e:	fba3 1302 	umull	r1, r3, r3, r2
 8001422:	1ad2      	subs	r2, r2, r3
 8001424:	0852      	lsrs	r2, r2, #1
 8001426:	4413      	add	r3, r2
 8001428:	0adb      	lsrs	r3, r3, #11
 800142a:	b2db      	uxtb	r3, r3
 800142c:	331e      	adds	r3, #30
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b90      	ldr	r3, [pc, #576]	@ (8001674 <fsm_update+0x64c>)
 8001432:	701a      	strb	r2, [r3, #0]
		    char linea[16];
		    sprintf(linea, "T: %d/%d", nueva_temp,temp_deseada);
 8001434:	4b8f      	ldr	r3, [pc, #572]	@ (8001674 <fsm_update+0x64c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b8f      	ldr	r3, [pc, #572]	@ (8001678 <fsm_update+0x650>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f107 0014 	add.w	r0, r7, #20
 8001442:	498e      	ldr	r1, [pc, #568]	@ (800167c <fsm_update+0x654>)
 8001444:	f005 fa06 	bl	8006854 <siprintf>
		    lcd_send_string(linea);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fbb2 	bl	8001bb6 <lcd_send_string>

		    if (boton1_presionado()) {
 8001452:	f7ff fd3f 	bl	8000ed4 <boton1_presionado>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d021      	beq.n	80014a0 <fsm_update+0x478>
		    	temp_deseada = nueva_temp;
 800145c:	4b85      	ldr	r3, [pc, #532]	@ (8001674 <fsm_update+0x64c>)
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b85      	ldr	r3, [pc, #532]	@ (8001678 <fsm_update+0x650>)
 8001462:	701a      	strb	r2, [r3, #0]
		    	if (eeprom_save_config()) {
 8001464:	f7ff fb54 	bl	8000b10 <eeprom_save_config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <fsm_update+0x45a>
		    	        lcd_clear();
 800146e:	f000 fb2f 	bl	8001ad0 <lcd_clear>
				    	lcd_put_cur(0,0);
 8001472:	2100      	movs	r1, #0
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fb42 	bl	8001afe <lcd_put_cur>
		    	        lcd_send_string("Temp Guardada!");
 800147a:	4881      	ldr	r0, [pc, #516]	@ (8001680 <fsm_update+0x658>)
 800147c:	f000 fb9b 	bl	8001bb6 <lcd_send_string>
 8001480:	e008      	b.n	8001494 <fsm_update+0x46c>
		    	    } else {
		    	        lcd_clear();
 8001482:	f000 fb25 	bl	8001ad0 <lcd_clear>
				    	lcd_put_cur(0,0);
 8001486:	2100      	movs	r1, #0
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fb38 	bl	8001afe <lcd_put_cur>
		    	        lcd_send_string("Sin cambios.");
 800148e:	4873      	ldr	r0, [pc, #460]	@ (800165c <fsm_update+0x634>)
 8001490:	f000 fb91 	bl	8001bb6 <lcd_send_string>
		    	    }
		        HAL_Delay(1000);  // confirmación visual
 8001494:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001498:	f001 f9ce 	bl	8002838 <HAL_Delay>
		    	lcd_clear();
 800149c:	f000 fb18 	bl	8001ad0 <lcd_clear>
		    }

		    if (boton_azul_sostenido(2000)) {
 80014a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014a4:	f7ff fce6 	bl	8000e74 <boton_azul_sostenido>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 81a0 	beq.w	80017f0 <fsm_update+0x7c8>
		        lcd_clear();
 80014b0:	f000 fb0e 	bl	8001ad0 <lcd_clear>
			    lcd_put_cur(0, 0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fb21 	bl	8001afe <lcd_put_cur>
		        lcd_send_string("Saliendo...");
 80014bc:	4868      	ldr	r0, [pc, #416]	@ (8001660 <fsm_update+0x638>)
 80014be:	f000 fb7a 	bl	8001bb6 <lcd_send_string>
		        HAL_Delay(500);
 80014c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014c6:	f001 f9b7 	bl	8002838 <HAL_Delay>
		        estado_actual = estado_fabricante;
 80014ca:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <fsm_update+0x63c>)
 80014cc:	2205      	movs	r2, #5
 80014ce:	701a      	strb	r2, [r3, #0]
		    }

		    break;
 80014d0:	e18e      	b.n	80017f0 <fsm_update+0x7c8>
		}
		case estado_menu_principal:
			lcd_put_cur(0, 0);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f000 fb12 	bl	8001afe <lcd_put_cur>
			lcd_send_string("Calentando...");
 80014da:	486a      	ldr	r0, [pc, #424]	@ (8001684 <fsm_update+0x65c>)
 80014dc:	f000 fb6b 	bl	8001bb6 <lcd_send_string>
			lcd_put_cur(1, 0);
 80014e0:	2100      	movs	r1, #0
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 fb0b 	bl	8001afe <lcd_put_cur>
			char tmsg[16];
			sprintf(tmsg, "T:%d/%d", temp_actual, temp_deseada);
 80014e8:	4b67      	ldr	r3, [pc, #412]	@ (8001688 <fsm_update+0x660>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b62      	ldr	r3, [pc, #392]	@ (8001678 <fsm_update+0x650>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 80014f6:	4965      	ldr	r1, [pc, #404]	@ (800168c <fsm_update+0x664>)
 80014f8:	f005 f9ac 	bl	8006854 <siprintf>
			lcd_send_string(tmsg);
 80014fc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fb58 	bl	8001bb6 <lcd_send_string>

			if (temp_actual >= temp_deseada) {
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <fsm_update+0x660>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b5b      	ldr	r3, [pc, #364]	@ (8001678 <fsm_update+0x650>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	f0c0 8170 	bcc.w	80017f4 <fsm_update+0x7cc>
				lcd_clear();
 8001514:	f000 fadc 	bl	8001ad0 <lcd_clear>
				lcd_put_cur(0, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f000 faef 	bl	8001afe <lcd_put_cur>
				lcd_send_string("Selecciona cafe");
 8001520:	485b      	ldr	r0, [pc, #364]	@ (8001690 <fsm_update+0x668>)
 8001522:	f000 fb48 	bl	8001bb6 <lcd_send_string>
				HAL_Delay(1000);
 8001526:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800152a:	f001 f985 	bl	8002838 <HAL_Delay>
				lcd_clear();
 800152e:	f000 facf 	bl	8001ad0 <lcd_clear>
				estado_actual = estado_seleccion_cafe;
 8001532:	4b4c      	ldr	r3, [pc, #304]	@ (8001664 <fsm_update+0x63c>)
 8001534:	2202      	movs	r2, #2
 8001536:	701a      	strb	r2, [r3, #0]
				ultima_interaccion_ms = HAL_GetTick();
 8001538:	f001 f974 	bl	8002824 <HAL_GetTick>
 800153c:	4603      	mov	r3, r0
 800153e:	4a55      	ldr	r2, [pc, #340]	@ (8001694 <fsm_update+0x66c>)
 8001540:	6013      	str	r3, [r2, #0]
			}
			break;
 8001542:	e157      	b.n	80017f4 <fsm_update+0x7cc>

		case estado_seleccion_cafe:

			if (joystick_arriba()) {
 8001544:	f7ff fbec 	bl	8000d20 <joystick_arriba>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00c      	beq.n	8001568 <fsm_update+0x540>
					       cafe_seleccionado++;
 800154e:	4b52      	ldr	r3, [pc, #328]	@ (8001698 <fsm_update+0x670>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b50      	ldr	r3, [pc, #320]	@ (8001698 <fsm_update+0x670>)
 8001558:	701a      	strb	r2, [r3, #0]
					        if (cafe_seleccionado > CAFE_AMERICANO)
 800155a:	4b4f      	ldr	r3, [pc, #316]	@ (8001698 <fsm_update+0x670>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d902      	bls.n	8001568 <fsm_update+0x540>
					       cafe_seleccionado = CAFE_LATTE;
 8001562:	4b4d      	ldr	r3, [pc, #308]	@ (8001698 <fsm_update+0x670>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
			}

			if (joystick_derecha()) {
 8001568:	f7ff fbac 	bl	8000cc4 <joystick_derecha>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d030      	beq.n	80015d4 <fsm_update+0x5ac>
						if (check_stock(cafe_seleccionado)) {
 8001572:	4b49      	ldr	r3, [pc, #292]	@ (8001698 <fsm_update+0x670>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f001 f844 	bl	8002604 <check_stock>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d018      	beq.n	80015b4 <fsm_update+0x58c>
							descontar_stock(cafe_seleccionado);
 8001582:	4b45      	ldr	r3, [pc, #276]	@ (8001698 <fsm_update+0x670>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f001 f882 	bl	8002690 <descontar_stock>
							eeprom_save_config();  // ← guarda tipo de café, stock, temperatura
 800158c:	f7ff fac0 	bl	8000b10 <eeprom_save_config>
							lcd_clear();
 8001590:	f000 fa9e 	bl	8001ad0 <lcd_clear>
							lcd_put_cur(0, 0);
 8001594:	2100      	movs	r1, #0
 8001596:	2000      	movs	r0, #0
 8001598:	f000 fab1 	bl	8001afe <lcd_put_cur>
							lcd_send_string("Preparando...");
 800159c:	483f      	ldr	r0, [pc, #252]	@ (800169c <fsm_update+0x674>)
 800159e:	f000 fb0a 	bl	8001bb6 <lcd_send_string>
							inicio_brewing_ms = HAL_GetTick(); //  esto es clave
 80015a2:	f001 f93f 	bl	8002824 <HAL_GetTick>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a3d      	ldr	r2, [pc, #244]	@ (80016a0 <fsm_update+0x678>)
 80015aa:	6013      	str	r3, [r2, #0]
							estado_actual = estado_brewing;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <fsm_update+0x63c>)
 80015ae:	2203      	movs	r2, #3
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	e00f      	b.n	80015d4 <fsm_update+0x5ac>
						} else {
							lcd_clear();
 80015b4:	f000 fa8c 	bl	8001ad0 <lcd_clear>
							lcd_put_cur(0, 0);
 80015b8:	2100      	movs	r1, #0
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 fa9f 	bl	8001afe <lcd_put_cur>
							lcd_send_string("Sin stock!");
 80015c0:	4838      	ldr	r0, [pc, #224]	@ (80016a4 <fsm_update+0x67c>)
 80015c2:	f000 faf8 	bl	8001bb6 <lcd_send_string>
							HAL_Delay(1500);
 80015c6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80015ca:	f001 f935 	bl	8002838 <HAL_Delay>
							estado_actual = estado_menu_principal;
 80015ce:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <fsm_update+0x63c>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]

						}
					}

			if (boton_azul_sostenido(2000)) {
 80015d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015d8:	f7ff fc4c 	bl	8000e74 <boton_azul_sostenido>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00f      	beq.n	8001602 <fsm_update+0x5da>
				lcd_clear();
 80015e2:	f000 fa75 	bl	8001ad0 <lcd_clear>
					lcd_put_cur(0, 0);
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 fa88 	bl	8001afe <lcd_put_cur>
					lcd_send_string("Saliendo...");
 80015ee:	481c      	ldr	r0, [pc, #112]	@ (8001660 <fsm_update+0x638>)
 80015f0:	f000 fae1 	bl	8001bb6 <lcd_send_string>
					HAL_Delay(500);
 80015f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015f8:	f001 f91e 	bl	8002838 <HAL_Delay>
					estado_actual = estado_off;
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <fsm_update+0x63c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
				}

			if (cafe_seleccionado != last_cafe || temp_actual != last_temp) {
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <fsm_update+0x670>)
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b28      	ldr	r3, [pc, #160]	@ (80016a8 <fsm_update+0x680>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d105      	bne.n	800161a <fsm_update+0x5f2>
 800160e:	4b1e      	ldr	r3, [pc, #120]	@ (8001688 <fsm_update+0x660>)
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <fsm_update+0x684>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d06c      	beq.n	80016f4 <fsm_update+0x6cc>
							lcd_clear();
 800161a:	f000 fa59 	bl	8001ad0 <lcd_clear>
							lcd_put_cur(0, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	2000      	movs	r0, #0
 8001622:	f000 fa6c 	bl	8001afe <lcd_put_cur>
							switch (cafe_seleccionado) {
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <fsm_update+0x670>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d84a      	bhi.n	80016c4 <fsm_update+0x69c>
 800162e:	a201      	add	r2, pc, #4	@ (adr r2, 8001634 <fsm_update+0x60c>)
 8001630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001634:	08001645 	.word	0x08001645
 8001638:	0800164d 	.word	0x0800164d
 800163c:	08001655 	.word	0x08001655
 8001640:	080016bd 	.word	0x080016bd
								case CAFE_LATTE: lcd_send_string("Cafe: Latte"); break;
 8001644:	481a      	ldr	r0, [pc, #104]	@ (80016b0 <fsm_update+0x688>)
 8001646:	f000 fab6 	bl	8001bb6 <lcd_send_string>
 800164a:	e03b      	b.n	80016c4 <fsm_update+0x69c>
								case CAFE_MOCHA: lcd_send_string("Cafe: Mocha"); break;
 800164c:	4819      	ldr	r0, [pc, #100]	@ (80016b4 <fsm_update+0x68c>)
 800164e:	f000 fab2 	bl	8001bb6 <lcd_send_string>
 8001652:	e037      	b.n	80016c4 <fsm_update+0x69c>
								case CAFE_DOBLE: lcd_send_string("Cafe: Doble"); break;
 8001654:	4818      	ldr	r0, [pc, #96]	@ (80016b8 <fsm_update+0x690>)
 8001656:	f000 faae 	bl	8001bb6 <lcd_send_string>
 800165a:	e033      	b.n	80016c4 <fsm_update+0x69c>
 800165c:	08008d8c 	.word	0x08008d8c
 8001660:	08008d50 	.word	0x08008d50
 8001664:	20000204 	.word	0x20000204
 8001668:	08008d9c 	.word	0x08008d9c
 800166c:	20000454 	.word	0x20000454
 8001670:	00100101 	.word	0x00100101
 8001674:	20000206 	.word	0x20000206
 8001678:	20000000 	.word	0x20000000
 800167c:	08008da8 	.word	0x08008da8
 8001680:	08008db4 	.word	0x08008db4
 8001684:	08008dc4 	.word	0x08008dc4
 8001688:	20000001 	.word	0x20000001
 800168c:	08008dd4 	.word	0x08008dd4
 8001690:	08008ddc 	.word	0x08008ddc
 8001694:	20000208 	.word	0x20000208
 8001698:	20000205 	.word	0x20000205
 800169c:	08008dec 	.word	0x08008dec
 80016a0:	2000020c 	.word	0x2000020c
 80016a4:	08008dfc 	.word	0x08008dfc
 80016a8:	20000002 	.word	0x20000002
 80016ac:	20000003 	.word	0x20000003
 80016b0:	08008e08 	.word	0x08008e08
 80016b4:	08008e14 	.word	0x08008e14
 80016b8:	08008e20 	.word	0x08008e20
								case CAFE_AMERICANO: lcd_send_string("Cafe: Americano"); break;
 80016bc:	4853      	ldr	r0, [pc, #332]	@ (800180c <fsm_update+0x7e4>)
 80016be:	f000 fa7a 	bl	8001bb6 <lcd_send_string>
 80016c2:	bf00      	nop
							}
							lcd_put_cur(1, 0);
 80016c4:	2100      	movs	r1, #0
 80016c6:	2001      	movs	r0, #1
 80016c8:	f000 fa19 	bl	8001afe <lcd_put_cur>
							char buf[16];
							sprintf(buf, "Temp=%dC", temp_actual);
 80016cc:	4b50      	ldr	r3, [pc, #320]	@ (8001810 <fsm_update+0x7e8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	494f      	ldr	r1, [pc, #316]	@ (8001814 <fsm_update+0x7ec>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 f8bc 	bl	8006854 <siprintf>
							lcd_send_string(buf);
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 fa69 	bl	8001bb6 <lcd_send_string>

							last_cafe = cafe_seleccionado;
 80016e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001818 <fsm_update+0x7f0>)
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	4b4c      	ldr	r3, [pc, #304]	@ (800181c <fsm_update+0x7f4>)
 80016ea:	701a      	strb	r2, [r3, #0]
							last_temp = temp_actual;
 80016ec:	4b48      	ldr	r3, [pc, #288]	@ (8001810 <fsm_update+0x7e8>)
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <fsm_update+0x7f8>)
 80016f2:	701a      	strb	r2, [r3, #0]
						}


			if (temp_actual <= temp_deseada) {
 80016f4:	4b46      	ldr	r3, [pc, #280]	@ (8001810 <fsm_update+0x7e8>)
 80016f6:	781a      	ldrb	r2, [r3, #0]
 80016f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001824 <fsm_update+0x7fc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d802      	bhi.n	8001706 <fsm_update+0x6de>
						estado_actual = estado_menu_principal;
 8001700:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <fsm_update+0x800>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
					}

			if (HAL_GetTick() - ultima_interaccion_ms > IDLE_TIMEOUT_MS) {
 8001706:	f001 f88d 	bl	8002824 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	4b47      	ldr	r3, [pc, #284]	@ (800182c <fsm_update+0x804>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001716:	4293      	cmp	r3, r2
 8001718:	d96e      	bls.n	80017f8 <fsm_update+0x7d0>
				estado_actual = estado_save_energy;
 800171a:	4b43      	ldr	r3, [pc, #268]	@ (8001828 <fsm_update+0x800>)
 800171c:	2204      	movs	r2, #4
 800171e:	701a      	strb	r2, [r3, #0]
		}

			break;
 8001720:	e06a      	b.n	80017f8 <fsm_update+0x7d0>

		case estado_brewing:
		    led_wave_effect();  // animación estilo serpiente/onda
 8001722:	f000 f8f3 	bl	800190c <led_wave_effect>

			if (cafe_listo()) {
 8001726:	f7ff fb7f 	bl	8000e28 <cafe_listo>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d014      	beq.n	800175a <fsm_update+0x732>
				lcd_clear();
 8001730:	f000 f9ce 	bl	8001ad0 <lcd_clear>
				lcd_put_cur(0, 0);
 8001734:	2100      	movs	r1, #0
 8001736:	2000      	movs	r0, #0
 8001738:	f000 f9e1 	bl	8001afe <lcd_put_cur>
				lcd_send_string("Cafe listo!");
 800173c:	483c      	ldr	r0, [pc, #240]	@ (8001830 <fsm_update+0x808>)
 800173e:	f000 fa3a 	bl	8001bb6 <lcd_send_string>
				HAL_Delay(1000);
 8001742:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001746:	f001 f877 	bl	8002838 <HAL_Delay>
				estado_actual = estado_menu_principal;
 800174a:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <fsm_update+0x800>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
				ultima_interaccion_ms = HAL_GetTick();
 8001750:	f001 f868 	bl	8002824 <HAL_GetTick>
 8001754:	4603      	mov	r3, r0
 8001756:	4a35      	ldr	r2, [pc, #212]	@ (800182c <fsm_update+0x804>)
 8001758:	6013      	str	r3, [r2, #0]
			}

			if (HAL_GetTick() - ultima_interaccion_ms > IDLE_TIMEOUT_MS) {
 800175a:	f001 f863 	bl	8002824 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	4b32      	ldr	r3, [pc, #200]	@ (800182c <fsm_update+0x804>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f247 5230 	movw	r2, #30000	@ 0x7530
 800176a:	4293      	cmp	r3, r2
 800176c:	d946      	bls.n	80017fc <fsm_update+0x7d4>
				estado_actual = estado_save_energy;
 800176e:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <fsm_update+0x800>)
 8001770:	2204      	movs	r2, #4
 8001772:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001774:	e042      	b.n	80017fc <fsm_update+0x7d4>

		case estado_save_energy:
			lcd_clear();
 8001776:	f000 f9ab 	bl	8001ad0 <lcd_clear>
			lcd_put_cur(0, 0);
 800177a:	2100      	movs	r1, #0
 800177c:	2000      	movs	r0, #0
 800177e:	f000 f9be 	bl	8001afe <lcd_put_cur>
			lcd_send_string("Modo ahorro...");
 8001782:	482c      	ldr	r0, [pc, #176]	@ (8001834 <fsm_update+0x80c>)
 8001784:	f000 fa17 	bl	8001bb6 <lcd_send_string>
			HAL_Delay(1000);
 8001788:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800178c:	f001 f854 	bl	8002838 <HAL_Delay>
			lcd_clear();
 8001790:	f000 f99e 	bl	8001ad0 <lcd_clear>
			  // Esperar botón para salir
				 if (joystick_derecha() || boton1_presionado()||joystick_arriba()) {
 8001794:	f7ff fa96 	bl	8000cc4 <joystick_derecha>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <fsm_update+0x78a>
 800179e:	f7ff fb99 	bl	8000ed4 <boton1_presionado>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d104      	bne.n	80017b2 <fsm_update+0x78a>
 80017a8:	f7ff faba 	bl	8000d20 <joystick_arriba>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d026      	beq.n	8001800 <fsm_update+0x7d8>
					   lcd_clear();
 80017b2:	f000 f98d 	bl	8001ad0 <lcd_clear>
					   lcd_put_cur(0, 0);
 80017b6:	2100      	movs	r1, #0
 80017b8:	2000      	movs	r0, #0
 80017ba:	f000 f9a0 	bl	8001afe <lcd_put_cur>
					   lcd_send_string("Reactivando...");
 80017be:	481e      	ldr	r0, [pc, #120]	@ (8001838 <fsm_update+0x810>)
 80017c0:	f000 f9f9 	bl	8001bb6 <lcd_send_string>
					   HAL_Delay(1000);
 80017c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c8:	f001 f836 	bl	8002838 <HAL_Delay>
					   led_off(4);
 80017cc:	2004      	movs	r0, #4
 80017ce:	f000 f869 	bl	80018a4 <led_off>
					   estado_actual = estado_menu_principal;
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <fsm_update+0x800>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
					   ultima_interaccion_ms = HAL_GetTick();
 80017d8:	f001 f824 	bl	8002824 <HAL_GetTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a13      	ldr	r2, [pc, #76]	@ (800182c <fsm_update+0x804>)
 80017e0:	6013      	str	r3, [r2, #0]
					 }
				 break;
 80017e2:	e00d      	b.n	8001800 <fsm_update+0x7d8>
			break;
 80017e4:	bf00      	nop
 80017e6:	e00c      	b.n	8001802 <fsm_update+0x7da>
		    break;
 80017e8:	bf00      	nop
 80017ea:	e00a      	b.n	8001802 <fsm_update+0x7da>
		        break;
 80017ec:	bf00      	nop
 80017ee:	e008      	b.n	8001802 <fsm_update+0x7da>
		    break;
 80017f0:	bf00      	nop
 80017f2:	e006      	b.n	8001802 <fsm_update+0x7da>
			break;
 80017f4:	bf00      	nop
 80017f6:	e004      	b.n	8001802 <fsm_update+0x7da>
			break;
 80017f8:	bf00      	nop
 80017fa:	e002      	b.n	8001802 <fsm_update+0x7da>
			break;
 80017fc:	bf00      	nop
 80017fe:	e000      	b.n	8001802 <fsm_update+0x7da>
				 break;
 8001800:	bf00      	nop
		}
}
 8001802:	bf00      	nop
 8001804:	3784      	adds	r7, #132	@ 0x84
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
 800180a:	bf00      	nop
 800180c:	08008e2c 	.word	0x08008e2c
 8001810:	20000001 	.word	0x20000001
 8001814:	08008e3c 	.word	0x08008e3c
 8001818:	20000205 	.word	0x20000205
 800181c:	20000002 	.word	0x20000002
 8001820:	20000003 	.word	0x20000003
 8001824:	20000000 	.word	0x20000000
 8001828:	20000204 	.word	0x20000204
 800182c:	20000208 	.word	0x20000208
 8001830:	08008e48 	.word	0x08008e48
 8001834:	08008e54 	.word	0x08008e54
 8001838:	08008e64 	.word	0x08008e64

0800183c <led_on>:
#include "gpio_control.h"

void led_on(uint8_t led_num) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
    switch (led_num) {
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	3b01      	subs	r3, #1
 800184a:	2b03      	cmp	r3, #3
 800184c:	d824      	bhi.n	8001898 <led_on+0x5c>
 800184e:	a201      	add	r2, pc, #4	@ (adr r2, 8001854 <led_on+0x18>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001865 	.word	0x08001865
 8001858:	08001871 	.word	0x08001871
 800185c:	0800187d 	.word	0x0800187d
 8001860:	0800188b 	.word	0x0800188b
        case 1: HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;
 8001864:	2200      	movs	r2, #0
 8001866:	2102      	movs	r1, #2
 8001868:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <led_on+0x64>)
 800186a:	f002 f86c 	bl	8003946 <HAL_GPIO_WritePin>
 800186e:	e013      	b.n	8001898 <led_on+0x5c>
        case 2: HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); break;
 8001870:	2200      	movs	r2, #0
 8001872:	2104      	movs	r1, #4
 8001874:	480a      	ldr	r0, [pc, #40]	@ (80018a0 <led_on+0x64>)
 8001876:	f002 f866 	bl	8003946 <HAL_GPIO_WritePin>
 800187a:	e00d      	b.n	8001898 <led_on+0x5c>
        case 3: HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); break;
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001882:	4807      	ldr	r0, [pc, #28]	@ (80018a0 <led_on+0x64>)
 8001884:	f002 f85f 	bl	8003946 <HAL_GPIO_WritePin>
 8001888:	e006      	b.n	8001898 <led_on+0x5c>
        case 4: HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET); break;
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001890:	4803      	ldr	r0, [pc, #12]	@ (80018a0 <led_on+0x64>)
 8001892:	f002 f858 	bl	8003946 <HAL_GPIO_WritePin>
 8001896:	bf00      	nop
    }
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010c00 	.word	0x40010c00

080018a4 <led_off>:

void led_off(uint8_t led_num) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
    switch (led_num) {
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d824      	bhi.n	8001900 <led_off+0x5c>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <led_off+0x18>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018cd 	.word	0x080018cd
 80018c0:	080018d9 	.word	0x080018d9
 80018c4:	080018e5 	.word	0x080018e5
 80018c8:	080018f3 	.word	0x080018f3
        case 1: HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;
 80018cc:	2201      	movs	r2, #1
 80018ce:	2102      	movs	r1, #2
 80018d0:	480d      	ldr	r0, [pc, #52]	@ (8001908 <led_off+0x64>)
 80018d2:	f002 f838 	bl	8003946 <HAL_GPIO_WritePin>
 80018d6:	e013      	b.n	8001900 <led_off+0x5c>
        case 2: HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); break;
 80018d8:	2201      	movs	r2, #1
 80018da:	2104      	movs	r1, #4
 80018dc:	480a      	ldr	r0, [pc, #40]	@ (8001908 <led_off+0x64>)
 80018de:	f002 f832 	bl	8003946 <HAL_GPIO_WritePin>
 80018e2:	e00d      	b.n	8001900 <led_off+0x5c>
        case 3: HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); break;
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ea:	4807      	ldr	r0, [pc, #28]	@ (8001908 <led_off+0x64>)
 80018ec:	f002 f82b 	bl	8003946 <HAL_GPIO_WritePin>
 80018f0:	e006      	b.n	8001900 <led_off+0x5c>
        case 4: HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET); break;
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <led_off+0x64>)
 80018fa:	f002 f824 	bl	8003946 <HAL_GPIO_WritePin>
 80018fe:	bf00      	nop
    }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010c00 	.word	0x40010c00

0800190c <led_wave_effect>:
        case 3: HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); break;
        case 4: HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin); break;
    }
}

void led_wave_effect(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
    static uint32_t last_step = 0;
    static uint8_t phase = 0;

    if (HAL_GetTick() - last_step >= 100) {
 8001910:	f000 ff88 	bl	8002824 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <led_wave_effect+0xac>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b63      	cmp	r3, #99	@ 0x63
 800191e:	d949      	bls.n	80019b4 <led_wave_effect+0xa8>
        last_step = HAL_GetTick();
 8001920:	f000 ff80 	bl	8002824 <HAL_GetTick>
 8001924:	4603      	mov	r3, r0
 8001926:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <led_wave_effect+0xac>)
 8001928:	6013      	str	r3, [r2, #0]

        switch (phase) {
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <led_wave_effect+0xb0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b07      	cmp	r3, #7
 8001930:	d832      	bhi.n	8001998 <led_wave_effect+0x8c>
 8001932:	a201      	add	r2, pc, #4	@ (adr r2, 8001938 <led_wave_effect+0x2c>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001959 	.word	0x08001959
 800193c:	08001961 	.word	0x08001961
 8001940:	08001969 	.word	0x08001969
 8001944:	08001971 	.word	0x08001971
 8001948:	08001979 	.word	0x08001979
 800194c:	08001981 	.word	0x08001981
 8001950:	08001989 	.word	0x08001989
 8001954:	08001991 	.word	0x08001991
            case 0: led_off(1); break;  // Enciende LED 1
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff ffa3 	bl	80018a4 <led_off>
 800195e:	e01c      	b.n	800199a <led_wave_effect+0x8e>
            case 1: led_off(2); break;  // Enciende LED 2
 8001960:	2002      	movs	r0, #2
 8001962:	f7ff ff9f 	bl	80018a4 <led_off>
 8001966:	e018      	b.n	800199a <led_wave_effect+0x8e>
            case 2: led_off(3); break;  // Enciende LED 3
 8001968:	2003      	movs	r0, #3
 800196a:	f7ff ff9b 	bl	80018a4 <led_off>
 800196e:	e014      	b.n	800199a <led_wave_effect+0x8e>
            case 3: led_off(4); break;  // Enciende LED 4
 8001970:	2004      	movs	r0, #4
 8001972:	f7ff ff97 	bl	80018a4 <led_off>
 8001976:	e010      	b.n	800199a <led_wave_effect+0x8e>

            case 4: led_soft_off(1); break;  // Fade-out LED 1
 8001978:	2001      	movs	r0, #1
 800197a:	f000 f821 	bl	80019c0 <led_soft_off>
 800197e:	e00c      	b.n	800199a <led_wave_effect+0x8e>
            case 5: led_soft_off(2); break;
 8001980:	2002      	movs	r0, #2
 8001982:	f000 f81d 	bl	80019c0 <led_soft_off>
 8001986:	e008      	b.n	800199a <led_wave_effect+0x8e>
            case 6: led_soft_off(3); break;
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f819 	bl	80019c0 <led_soft_off>
 800198e:	e004      	b.n	800199a <led_wave_effect+0x8e>
            case 7: led_soft_off(4); break;
 8001990:	2004      	movs	r0, #4
 8001992:	f000 f815 	bl	80019c0 <led_soft_off>
 8001996:	e000      	b.n	800199a <led_wave_effect+0x8e>

            default: break;
 8001998:	bf00      	nop
        }

        phase++;
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <led_wave_effect+0xb0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	3301      	adds	r3, #1
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <led_wave_effect+0xb0>)
 80019a4:	701a      	strb	r2, [r3, #0]
        if (phase > 7) phase = 0;
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <led_wave_effect+0xb0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b07      	cmp	r3, #7
 80019ac:	d902      	bls.n	80019b4 <led_wave_effect+0xa8>
 80019ae:	4b03      	ldr	r3, [pc, #12]	@ (80019bc <led_wave_effect+0xb0>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
    }
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000258 	.word	0x20000258
 80019bc:	2000025c 	.word	0x2000025c

080019c0 <led_soft_off>:

void led_soft_off(uint8_t led_num) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
    for (int duty = 10; duty > 0; duty--) {
 80019ca:	230a      	movs	r3, #10
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	e014      	b.n	80019fa <led_soft_off+0x3a>
        led_off(led_num);         // Enciende
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff66 	bl	80018a4 <led_off>
        HAL_Delay(duty);          // ON time
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 ff2c 	bl	8002838 <HAL_Delay>
        led_on(led_num);          // Apaga
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ff2a 	bl	800183c <led_on>
        HAL_Delay(10 - duty);     // OFF time
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f1c3 030a 	rsb	r3, r3, #10
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 ff22 	bl	8002838 <HAL_Delay>
    for (int duty = 10; duty > 0; duty--) {
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	dce7      	bgt.n	80019d0 <led_soft_off+0x10>
    }

    // Asegura que termine apagado (en tu lógica, ON = apagado)
    led_on(led_num);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff1a 	bl	800183c <led_on>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f023 030f 	bic.w	r3, r3, #15
 8001a20:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	f043 030c 	orr.w	r3, r3, #12
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	f043 030c 	orr.w	r3, r3, #12
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001a50:	f107 0208 	add.w	r2, r7, #8
 8001a54:	2364      	movs	r3, #100	@ 0x64
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2304      	movs	r3, #4
 8001a5a:	214e      	movs	r1, #78	@ 0x4e
 8001a5c:	4803      	ldr	r0, [pc, #12]	@ (8001a6c <lcd_send_cmd+0x5c>)
 8001a5e:	f002 f8f1 	bl	8003c44 <HAL_I2C_Master_Transmit>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002d4 	.word	0x200002d4

08001a70 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f023 030f 	bic.w	r3, r3, #15
 8001a80:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	f043 030d 	orr.w	r3, r3, #13
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	f043 0309 	orr.w	r3, r3, #9
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	f043 030d 	orr.w	r3, r3, #13
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001aa6:	7bbb      	ldrb	r3, [r7, #14]
 8001aa8:	f043 0309 	orr.w	r3, r3, #9
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ab0:	f107 0208 	add.w	r2, r7, #8
 8001ab4:	2364      	movs	r3, #100	@ 0x64
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2304      	movs	r3, #4
 8001aba:	214e      	movs	r1, #78	@ 0x4e
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <lcd_send_data+0x5c>)
 8001abe:	f002 f8c1 	bl	8003c44 <HAL_I2C_Master_Transmit>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002d4 	.word	0x200002d4

08001ad0 <lcd_clear>:
    lcd_put_cur(row, col);
    lcd_send_string(buffer);
}

void lcd_clear (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001ad6:	2080      	movs	r0, #128	@ 0x80
 8001ad8:	f7ff ff9a 	bl	8001a10 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	e005      	b.n	8001aee <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001ae2:	2020      	movs	r0, #32
 8001ae4:	f7ff ffc4 	bl	8001a70 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b45      	cmp	r3, #69	@ 0x45
 8001af2:	ddf6      	ble.n	8001ae2 <lcd_clear+0x12>
	}
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
    switch (row)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <lcd_put_cur+0x18>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d005      	beq.n	8001b20 <lcd_put_cur+0x22>
 8001b14:	e009      	b.n	8001b2a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b1c:	603b      	str	r3, [r7, #0]
            break;
 8001b1e:	e004      	b.n	8001b2a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001b26:	603b      	str	r3, [r7, #0]
            break;
 8001b28:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff6e 	bl	8001a10 <lcd_send_cmd>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <lcd_init>:


void lcd_init (void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001b40:	2032      	movs	r0, #50	@ 0x32
 8001b42:	f000 fe79 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b46:	2030      	movs	r0, #48	@ 0x30
 8001b48:	f7ff ff62 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001b4c:	2005      	movs	r0, #5
 8001b4e:	f000 fe73 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b52:	2030      	movs	r0, #48	@ 0x30
 8001b54:	f7ff ff5c 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 fe6d 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001b5e:	2030      	movs	r0, #48	@ 0x30
 8001b60:	f7ff ff56 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(10);
 8001b64:	200a      	movs	r0, #10
 8001b66:	f000 fe67 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001b6a:	2020      	movs	r0, #32
 8001b6c:	f7ff ff50 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(10);
 8001b70:	200a      	movs	r0, #10
 8001b72:	f000 fe61 	bl	8002838 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001b76:	2028      	movs	r0, #40	@ 0x28
 8001b78:	f7ff ff4a 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(1);
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f000 fe5b 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001b82:	2008      	movs	r0, #8
 8001b84:	f7ff ff44 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f000 fe55 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f7ff ff3e 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f000 fe4f 	bl	8002838 <HAL_Delay>
	HAL_Delay(1);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 fe4c 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001ba0:	2006      	movs	r0, #6
 8001ba2:	f7ff ff35 	bl	8001a10 <lcd_send_cmd>
	HAL_Delay(1);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 fe46 	bl	8002838 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001bac:	200c      	movs	r0, #12
 8001bae:	f7ff ff2f 	bl	8001a10 <lcd_send_cmd>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <lcd_send_string>:

void lcd_send_string (const char *str)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001bbe:	e006      	b.n	8001bce <lcd_send_string+0x18>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff51 	bl	8001a70 <lcd_send_data>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f4      	bne.n	8001bc0 <lcd_send_string+0xa>
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be4:	f000 fdc6 	bl	8002774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be8:	f000 f830 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bec:	f000 fa0c 	bl	8002008 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bf0:	f000 f9ec 	bl	8001fcc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001bf4:	f000 f9c0 	bl	8001f78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001bf8:	f000 f8de 	bl	8001db8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001bfc:	f000 f880 	bl	8001d00 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001c00:	f000 f936 	bl	8001e70 <MX_TIM3_Init>
  MX_I2C2_Init();
 8001c04:	f000 f906 	bl	8001e14 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001c08:	f000 f98c 	bl	8001f24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	  // Iniciar periféricos personalizados
  lcd_init();
 8001c0c:	f7ff ff96 	bl	8001b3c <lcd_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_value, 3);
 8001c10:	2203      	movs	r2, #3
 8001c12:	490b      	ldr	r1, [pc, #44]	@ (8001c40 <main+0x60>)
 8001c14:	480b      	ldr	r0, [pc, #44]	@ (8001c44 <main+0x64>)
 8001c16:	f000 ff0b 	bl	8002a30 <HAL_ADC_Start_DMA>
  	  //DWT->CYCCNT = 0;
  	  //DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;


  	  // Mostrar mensaje inicial
      lcd_clear();
 8001c1a:	f7ff ff59 	bl	8001ad0 <lcd_clear>
      lcd_put_cur(0, 0);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff ff6c 	bl	8001afe <lcd_put_cur>
  	  lcd_send_string("Sistema iniciado");
 8001c26:	4808      	ldr	r0, [pc, #32]	@ (8001c48 <main+0x68>)
 8001c28:	f7ff ffc5 	bl	8001bb6 <lcd_send_string>
  	  HAL_Delay(1000);
 8001c2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c30:	f000 fe02 	bl	8002838 <HAL_Delay>
      lcd_clear();
 8001c34:	f7ff ff4c 	bl	8001ad0 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_update();
 8001c38:	f7ff f9f6 	bl	8001028 <fsm_update>
 8001c3c:	e7fc      	b.n	8001c38 <main+0x58>
 8001c3e:	bf00      	nop
 8001c40:	20000454 	.word	0x20000454
 8001c44:	20000260 	.word	0x20000260
 8001c48:	08008edc 	.word	0x08008edc

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b094      	sub	sp, #80	@ 0x50
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c56:	2228      	movs	r2, #40	@ 0x28
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 fedc 	bl	8006a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 f871 	bl	8004d88 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001cac:	f000 fa4c 	bl	8002148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cc0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fadd 	bl	800528c <HAL_RCC_ClockConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cd8:	f000 fa36 	bl	8002148 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fc5e 	bl	80055a8 <HAL_RCCEx_PeriphCLKConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001cf2:	f000 fa29 	bl	8002148 <Error_Handler>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3750      	adds	r7, #80	@ 0x50
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d10:	4b27      	ldr	r3, [pc, #156]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d12:	4a28      	ldr	r2, [pc, #160]	@ (8001db4 <MX_ADC1_Init+0xb4>)
 8001d14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d16:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d24:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d2c:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d3e:	481c      	ldr	r0, [pc, #112]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d40:	f000 fd9e 	bl	8002880 <HAL_ADC_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001d4a:	f000 f9fd 	bl	8002148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001d4e:	230a      	movs	r3, #10
 8001d50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001d56:	2307      	movs	r3, #7
 8001d58:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4814      	ldr	r0, [pc, #80]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d60:	f000 ff60 	bl	8002c24 <HAL_ADC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d6a:	f000 f9ed 	bl	8002148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d7c:	f000 ff52 	bl	8002c24 <HAL_ADC_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d86:	f000 f9df 	bl	8002148 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	@ (8001db0 <MX_ADC1_Init+0xb0>)
 8001d98:	f000 ff44 	bl	8002c24 <HAL_ADC_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001da2:	f000 f9d1 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000260 	.word	0x20000260
 8001db4:	40012400 	.word	0x40012400

08001db8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001dbe:	4a13      	ldr	r2, [pc, #76]	@ (8001e0c <MX_I2C1_Init+0x54>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001dc4:	4a12      	ldr	r2, [pc, #72]	@ (8001e10 <MX_I2C1_Init+0x58>)
 8001dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001dd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <MX_I2C1_Init+0x50>)
 8001df6:	f001 fde1 	bl	80039bc <HAL_I2C_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e00:	f000 f9a2 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200002d4 	.word	0x200002d4
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	000186a0 	.word	0x000186a0

08001e14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e1a:	4a13      	ldr	r2, [pc, #76]	@ (8001e68 <MX_I2C2_Init+0x54>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e20:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <MX_I2C2_Init+0x58>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	@ (8001e64 <MX_I2C2_Init+0x50>)
 8001e52:	f001 fdb3 	bl	80039bc <HAL_I2C_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e5c:	f000 f974 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000328 	.word	0x20000328
 8001e68:	40005800 	.word	0x40005800
 8001e6c:	00061a80 	.word	0x00061a80

08001e70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	615a      	str	r2, [r3, #20]
 8001e90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e92:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001e94:	4a22      	ldr	r2, [pc, #136]	@ (8001f20 <MX_TIM3_Init+0xb0>)
 8001e96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001e98:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001e9a:	2247      	movs	r2, #71	@ 0x47
 8001e9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001ea6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001eaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001eb8:	4818      	ldr	r0, [pc, #96]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001eba:	f003 fc2b 	bl	8005714 <HAL_TIM_PWM_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f000 f940 	bl	8002148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed0:	f107 0320 	add.w	r3, r7, #32
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001ed8:	f003 ff24 	bl	8005d24 <HAL_TIMEx_MasterConfigSynchronization>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ee2:	f000 f931 	bl	8002148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee6:	2360      	movs	r3, #96	@ 0x60
 8001ee8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4619      	mov	r1, r3
 8001efc:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001efe:	f003 fc59 	bl	80057b4 <HAL_TIM_PWM_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001f08:	f000 f91e 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f0c:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <MX_TIM3_Init+0xac>)
 8001f0e:	f000 fa6d 	bl	80023ec <HAL_TIM_MspPostInit>

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000037c 	.word	0x2000037c
 8001f20:	40000400 	.word	0x40000400

08001f24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <MX_USART1_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_USART1_UART_Init+0x4c>)
 8001f5c:	f003 ff40 	bl	8005de0 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f66:	f000 f8ef 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200003c4 	.word	0x200003c4
 8001f74:	40013800 	.word	0x40013800

08001f78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <MX_USART2_UART_Init+0x50>)
 8001f80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001f84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa2:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fae:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	f003 ff16 	bl	8005de0 <HAL_UART_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fba:	f000 f8c5 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000040c 	.word	0x2000040c
 8001fc8:	40004400 	.word	0x40004400

08001fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_DMA_Init+0x38>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8002004 <MX_DMA_Init+0x38>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6153      	str	r3, [r2, #20]
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_DMA_Init+0x38>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	200b      	movs	r0, #11
 8001ff0:	f001 f8e9 	bl	80031c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ff4:	200b      	movs	r0, #11
 8001ff6:	f001 f902 	bl	80031fe <HAL_NVIC_EnableIRQ>

}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201c:	4b45      	ldr	r3, [pc, #276]	@ (8002134 <MX_GPIO_Init+0x12c>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a44      	ldr	r2, [pc, #272]	@ (8002134 <MX_GPIO_Init+0x12c>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b42      	ldr	r3, [pc, #264]	@ (8002134 <MX_GPIO_Init+0x12c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002034:	4b3f      	ldr	r3, [pc, #252]	@ (8002134 <MX_GPIO_Init+0x12c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a3e      	ldr	r2, [pc, #248]	@ (8002134 <MX_GPIO_Init+0x12c>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b3c      	ldr	r3, [pc, #240]	@ (8002134 <MX_GPIO_Init+0x12c>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204c:	4b39      	ldr	r3, [pc, #228]	@ (8002134 <MX_GPIO_Init+0x12c>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a38      	ldr	r2, [pc, #224]	@ (8002134 <MX_GPIO_Init+0x12c>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b36      	ldr	r3, [pc, #216]	@ (8002134 <MX_GPIO_Init+0x12c>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002064:	4b33      	ldr	r3, [pc, #204]	@ (8002134 <MX_GPIO_Init+0x12c>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a32      	ldr	r2, [pc, #200]	@ (8002134 <MX_GPIO_Init+0x12c>)
 800206a:	f043 0308 	orr.w	r3, r3, #8
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <MX_GPIO_Init+0x12c>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LEDGREEN_Pin|LED4_Pin
 800207c:	2200      	movs	r2, #0
 800207e:	f24e 0106 	movw	r1, #57350	@ 0xe006
 8002082:	482d      	ldr	r0, [pc, #180]	@ (8002138 <MX_GPIO_Init+0x130>)
 8002084:	f001 fc5f 	bl	8003946 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R2_Pin|R1_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800208e:	482b      	ldr	r0, [pc, #172]	@ (800213c <MX_GPIO_Init+0x134>)
 8002090:	f001 fc59 	bl	8003946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002094:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800209a:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <MX_GPIO_Init+0x138>)
 800209c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020a2:	f107 0310 	add.w	r3, r7, #16
 80020a6:	4619      	mov	r1, r3
 80020a8:	4826      	ldr	r0, [pc, #152]	@ (8002144 <MX_GPIO_Init+0x13c>)
 80020aa:	f001 fab1 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOTON2_Pin BOTON3_Pin */
  GPIO_InitStruct.Pin = BOTON2_Pin|BOTON3_Pin;
 80020ae:	2382      	movs	r3, #130	@ 0x82
 80020b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b6:	2301      	movs	r3, #1
 80020b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 0310 	add.w	r3, r7, #16
 80020be:	4619      	mov	r1, r3
 80020c0:	4820      	ldr	r0, [pc, #128]	@ (8002144 <MX_GPIO_Init+0x13c>)
 80020c2:	f001 faa5 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON1_Pin */
  GPIO_InitStruct.Pin = BOTON1_Pin;
 80020c6:	2301      	movs	r3, #1
 80020c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON1_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	4619      	mov	r1, r3
 80020d8:	4817      	ldr	r0, [pc, #92]	@ (8002138 <MX_GPIO_Init+0x130>)
 80020da:	f001 fa99 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LEDGREEN_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LEDGREEN_Pin|LED4_Pin
 80020de:	f24e 0306 	movw	r3, #57350	@ 0xe006
 80020e2:	613b      	str	r3, [r7, #16]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2302      	movs	r3, #2
 80020ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4619      	mov	r1, r3
 80020f6:	4810      	ldr	r0, [pc, #64]	@ (8002138 <MX_GPIO_Init+0x130>)
 80020f8:	f001 fa8a 	bl	8003610 <HAL_GPIO_Init>

  /*Configure GPIO pins : R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R2_Pin|R1_Pin;
 80020fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2302      	movs	r3, #2
 800210c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4619      	mov	r1, r3
 8002114:	4809      	ldr	r0, [pc, #36]	@ (800213c <MX_GPIO_Init+0x134>)
 8002116:	f001 fa7b 	bl	8003610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2028      	movs	r0, #40	@ 0x28
 8002120:	f001 f851 	bl	80031c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002124:	2028      	movs	r0, #40	@ 0x28
 8002126:	f001 f86a 	bl	80031fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800212a:	bf00      	nop
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40010c00 	.word	0x40010c00
 800213c:	40010800 	.word	0x40010800
 8002140:	10110000 	.word	0x10110000
 8002144:	40011000 	.word	0x40011000

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <Error_Handler+0x8>

08002154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <HAL_MspInit+0x5c>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a0e      	ldr	r2, [pc, #56]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <HAL_MspInit+0x5c>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800218a:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <HAL_MspInit+0x60>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_MspInit+0x60>)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40010000 	.word	0x40010000

080021b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0318 	add.w	r3, r7, #24
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a33      	ldr	r2, [pc, #204]	@ (80022a0 <HAL_ADC_MspInit+0xe8>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d15f      	bne.n	8002298 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021d8:	4b32      	ldr	r3, [pc, #200]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a31      	ldr	r2, [pc, #196]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f0:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	4a2b      	ldr	r2, [pc, #172]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	6193      	str	r3, [r2, #24]
 80021fc:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002208:	4b26      	ldr	r3, [pc, #152]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a25      	ldr	r2, [pc, #148]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <HAL_ADC_MspInit+0xec>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002220:	2301      	movs	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002224:	2303      	movs	r3, #3
 8002226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	4619      	mov	r1, r3
 800222e:	481e      	ldr	r0, [pc, #120]	@ (80022a8 <HAL_ADC_MspInit+0xf0>)
 8002230:	f001 f9ee 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002234:	2303      	movs	r3, #3
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002238:	2303      	movs	r3, #3
 800223a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	4619      	mov	r1, r3
 8002242:	481a      	ldr	r0, [pc, #104]	@ (80022ac <HAL_ADC_MspInit+0xf4>)
 8002244:	f001 f9e4 	bl	8003610 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 800224a:	4a1a      	ldr	r2, [pc, #104]	@ (80022b4 <HAL_ADC_MspInit+0xfc>)
 800224c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 8002250:	2200      	movs	r2, #0
 8002252:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 800225c:	2280      	movs	r2, #128	@ 0x80
 800225e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 8002262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002266:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 800226a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800226e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 8002272:	2220      	movs	r2, #32
 8002274:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002276:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 800227e:	f000 ffd9 	bl	8003234 <HAL_DMA_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002288:	f7ff ff5e 	bl	8002148 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a08      	ldr	r2, [pc, #32]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 8002290:	621a      	str	r2, [r3, #32]
 8002292:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <HAL_ADC_MspInit+0xf8>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	@ 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40012400 	.word	0x40012400
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40011000 	.word	0x40011000
 80022ac:	40010800 	.word	0x40010800
 80022b0:	20000290 	.word	0x20000290
 80022b4:	40020008 	.word	0x40020008

080022b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	@ 0x30
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a32      	ldr	r2, [pc, #200]	@ (800239c <HAL_I2C_MspInit+0xe4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d133      	bne.n	8002340 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d8:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a30      	ldr	r2, [pc, #192]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f6:	2312      	movs	r3, #18
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	4827      	ldr	r0, [pc, #156]	@ (80023a4 <HAL_I2C_MspInit+0xec>)
 8002306:	f001 f983 	bl	8003610 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800230a:	4b27      	ldr	r3, [pc, #156]	@ (80023a8 <HAL_I2C_MspInit+0xf0>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002312:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231a:	f043 0302 	orr.w	r3, r3, #2
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002320:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <HAL_I2C_MspInit+0xf0>)
 8002322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002324:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4a1d      	ldr	r2, [pc, #116]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 800232c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002330:	61d3      	str	r3, [r2, #28]
 8002332:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800233e:	e029      	b.n	8002394 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_I2C_MspInit+0xf4>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d124      	bne.n	8002394 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6193      	str	r3, [r2, #24]
 8002356:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002362:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002368:	2312      	movs	r3, #18
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	480b      	ldr	r0, [pc, #44]	@ (80023a4 <HAL_I2C_MspInit+0xec>)
 8002378:	f001 f94a 	bl	8003610 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 8002382:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002386:	61d3      	str	r3, [r2, #28]
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_I2C_MspInit+0xe8>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
}
 8002394:	bf00      	nop
 8002396:	3730      	adds	r7, #48	@ 0x30
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40005400 	.word	0x40005400
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010c00 	.word	0x40010c00
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40005800 	.word	0x40005800

080023b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <HAL_TIM_PWM_MspInit+0x34>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10b      	bne.n	80023da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023c2:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x38>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x38>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	61d3      	str	r3, [r2, #28]
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_TIM_PWM_MspInit+0x38>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_TIM_MspPostInit+0x7c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d129      	bne.n	8002460 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	4b17      	ldr	r3, [pc, #92]	@ (800246c <HAL_TIM_MspPostInit+0x80>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a16      	ldr	r2, [pc, #88]	@ (800246c <HAL_TIM_MspPostInit+0x80>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <HAL_TIM_MspPostInit+0x80>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002424:	2340      	movs	r3, #64	@ 0x40
 8002426:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2302      	movs	r3, #2
 800242e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4619      	mov	r1, r3
 8002436:	480e      	ldr	r0, [pc, #56]	@ (8002470 <HAL_TIM_MspPostInit+0x84>)
 8002438:	f001 f8ea 	bl	8003610 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800243c:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <HAL_TIM_MspPostInit+0x88>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	4a06      	ldr	r2, [pc, #24]	@ (8002474 <HAL_TIM_MspPostInit+0x88>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40000400 	.word	0x40000400
 800246c:	40021000 	.word	0x40021000
 8002470:	40011000 	.word	0x40011000
 8002474:	40010000 	.word	0x40010000

08002478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	@ 0x30
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a37      	ldr	r2, [pc, #220]	@ (8002570 <HAL_UART_MspInit+0xf8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d13e      	bne.n	8002516 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002498:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a35      	ldr	r2, [pc, #212]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 800249e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b33      	ldr	r3, [pc, #204]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b0:	4b30      	ldr	r3, [pc, #192]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4a2f      	ldr	r2, [pc, #188]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	6193      	str	r3, [r2, #24]
 80024bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024c8:	2340      	movs	r3, #64	@ 0x40
 80024ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024cc:	2302      	movs	r3, #2
 80024ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	f107 031c 	add.w	r3, r7, #28
 80024d8:	4619      	mov	r1, r3
 80024da:	4827      	ldr	r0, [pc, #156]	@ (8002578 <HAL_UART_MspInit+0x100>)
 80024dc:	f001 f898 	bl	8003610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024e0:	2380      	movs	r3, #128	@ 0x80
 80024e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	4821      	ldr	r0, [pc, #132]	@ (8002578 <HAL_UART_MspInit+0x100>)
 80024f4:	f001 f88c 	bl	8003610 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80024f8:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_UART_MspInit+0x104>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800250e:	4a1b      	ldr	r2, [pc, #108]	@ (800257c <HAL_UART_MspInit+0x104>)
 8002510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002512:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002514:	e028      	b.n	8002568 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_UART_MspInit+0x108>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d123      	bne.n	8002568 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002520:	4b14      	ldr	r3, [pc, #80]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	4a13      	ldr	r2, [pc, #76]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800252a:	61d3      	str	r3, [r2, #28]
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6193      	str	r3, [r2, #24]
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_UART_MspInit+0xfc>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002550:	230c      	movs	r3, #12
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	4619      	mov	r1, r3
 8002562:	4808      	ldr	r0, [pc, #32]	@ (8002584 <HAL_UART_MspInit+0x10c>)
 8002564:	f001 f854 	bl	8003610 <HAL_GPIO_Init>
}
 8002568:	bf00      	nop
 800256a:	3730      	adds	r7, #48	@ 0x30
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013800 	.word	0x40013800
 8002574:	40021000 	.word	0x40021000
 8002578:	40010c00 	.word	0x40010c00
 800257c:	40010000 	.word	0x40010000
 8002580:	40004400 	.word	0x40004400
 8002584:	40010800 	.word	0x40010800

08002588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <NMI_Handler+0x4>

08002590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <HardFault_Handler+0x4>

08002598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <MemManage_Handler+0x4>

080025a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <UsageFault_Handler+0x4>

080025b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d8:	f000 f912 	bl	8002800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <DMA1_Channel1_IRQHandler+0x10>)
 80025e6:	f000 fedf 	bl	80033a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000290 	.word	0x20000290

080025f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025fc:	f001 f9bc 	bl	8003978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <check_stock>:
    [CAFE_MOCHA]      = {1, 1, 1, 1},
    [CAFE_DOBLE]      = {2, 0, 2, 0},
    [CAFE_AMERICANO]  = {1, 0, 2, 0}
};

bool check_stock(tipo_de_cafe tipo) {
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
    if (tipo < CAFE_LATTE || tipo > CAFE_AMERICANO) return false;
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	2b03      	cmp	r3, #3
 8002612:	d901      	bls.n	8002618 <check_stock+0x14>
 8002614:	2300      	movs	r3, #0
 8002616:	e02c      	b.n	8002672 <check_stock+0x6e>

    return  stock_cafe     >= recetas[tipo].cafe &&
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	4a18      	ldr	r2, [pc, #96]	@ (800267c <check_stock+0x78>)
 800261c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8002620:	461a      	mov	r2, r3
 8002622:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <check_stock+0x7c>)
 8002624:	681b      	ldr	r3, [r3, #0]
            stock_leche    >= recetas[tipo].leche &&
            stock_agua     >= recetas[tipo].agua &&
 8002626:	429a      	cmp	r2, r3
 8002628:	dc1f      	bgt.n	800266a <check_stock+0x66>
            stock_leche    >= recetas[tipo].leche &&
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4a13      	ldr	r2, [pc, #76]	@ (800267c <check_stock+0x78>)
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	461a      	mov	r2, r3
 8002636:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <check_stock+0x80>)
 8002638:	681b      	ldr	r3, [r3, #0]
    return  stock_cafe     >= recetas[tipo].cafe &&
 800263a:	429a      	cmp	r2, r3
 800263c:	dc15      	bgt.n	800266a <check_stock+0x66>
            stock_agua     >= recetas[tipo].agua &&
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4a0e      	ldr	r2, [pc, #56]	@ (800267c <check_stock+0x78>)
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	461a      	mov	r2, r3
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <check_stock+0x84>)
 800264c:	681b      	ldr	r3, [r3, #0]
            stock_leche    >= recetas[tipo].leche &&
 800264e:	429a      	cmp	r2, r3
 8002650:	dc0b      	bgt.n	800266a <check_stock+0x66>
            stock_chocolate>= recetas[tipo].chocolate;
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4a09      	ldr	r2, [pc, #36]	@ (800267c <check_stock+0x78>)
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	78db      	ldrb	r3, [r3, #3]
 800265c:	461a      	mov	r2, r3
 800265e:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <check_stock+0x88>)
 8002660:	681b      	ldr	r3, [r3, #0]
            stock_agua     >= recetas[tipo].agua &&
 8002662:	429a      	cmp	r2, r3
 8002664:	dc01      	bgt.n	800266a <check_stock+0x66>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <check_stock+0x68>
 800266a:	2300      	movs	r3, #0
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	08008ef0 	.word	0x08008ef0
 8002680:	20000004 	.word	0x20000004
 8002684:	20000008 	.word	0x20000008
 8002688:	2000000c 	.word	0x2000000c
 800268c:	20000010 	.word	0x20000010

08002690 <descontar_stock>:

void descontar_stock(tipo_de_cafe tipo) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
    if (!check_stock(tipo)) return;
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ffb1 	bl	8002604 <check_stock>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d127      	bne.n	80026fe <descontar_stock+0x6e>

    stock_cafe     -= recetas[tipo].cafe;
 80026ae:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <descontar_stock+0x78>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	79fa      	ldrb	r2, [r7, #7]
 80026b4:	4915      	ldr	r1, [pc, #84]	@ (800270c <descontar_stock+0x7c>)
 80026b6:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <descontar_stock+0x78>)
 80026be:	6013      	str	r3, [r2, #0]
    stock_leche    -= recetas[tipo].leche;
 80026c0:	4b13      	ldr	r3, [pc, #76]	@ (8002710 <descontar_stock+0x80>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4911      	ldr	r1, [pc, #68]	@ (800270c <descontar_stock+0x7c>)
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	785b      	ldrb	r3, [r3, #1]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <descontar_stock+0x80>)
 80026d2:	6013      	str	r3, [r2, #0]
    stock_agua     -= recetas[tipo].agua;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <descontar_stock+0x84>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	490c      	ldr	r1, [pc, #48]	@ (800270c <descontar_stock+0x7c>)
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	789b      	ldrb	r3, [r3, #2]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <descontar_stock+0x84>)
 80026e6:	6013      	str	r3, [r2, #0]
    stock_chocolate-= recetas[tipo].chocolate;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <descontar_stock+0x88>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4907      	ldr	r1, [pc, #28]	@ (800270c <descontar_stock+0x7c>)
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	78db      	ldrb	r3, [r3, #3]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	4a07      	ldr	r2, [pc, #28]	@ (8002718 <descontar_stock+0x88>)
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e000      	b.n	8002700 <descontar_stock+0x70>
    if (!check_stock(tipo)) return;
 80026fe:	bf00      	nop
}
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000004 	.word	0x20000004
 800270c:	08008ef0 	.word	0x08008ef0
 8002710:	20000008 	.word	0x20000008
 8002714:	2000000c 	.word	0x2000000c
 8002718:	20000010 	.word	0x20000010

0800271c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002728:	f7ff fff8 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800272c:	480b      	ldr	r0, [pc, #44]	@ (800275c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800272e:	490c      	ldr	r1, [pc, #48]	@ (8002760 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002730:	4a0c      	ldr	r2, [pc, #48]	@ (8002764 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a09      	ldr	r2, [pc, #36]	@ (8002768 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002744:	4c09      	ldr	r4, [pc, #36]	@ (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002752:	f004 f96d 	bl	8006a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002756:	f7ff fa43 	bl	8001be0 <main>
  bx lr
 800275a:	4770      	bx	lr
  ldr r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002760:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002764:	080092b0 	.word	0x080092b0
  ldr r2, =_sbss
 8002768:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800276c:	200005b4 	.word	0x200005b4

08002770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002770:	e7fe      	b.n	8002770 <ADC1_2_IRQHandler>
	...

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002778:	4b08      	ldr	r3, [pc, #32]	@ (800279c <HAL_Init+0x28>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a07      	ldr	r2, [pc, #28]	@ (800279c <HAL_Init+0x28>)
 800277e:	f043 0310 	orr.w	r3, r3, #16
 8002782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002784:	2003      	movs	r0, #3
 8002786:	f000 fd13 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278a:	2000      	movs	r0, #0
 800278c:	f000 f808 	bl	80027a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002790:	f7ff fce0 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40022000 	.word	0x40022000

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027a8:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_InitTick+0x54>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b12      	ldr	r3, [pc, #72]	@ (80027f8 <HAL_InitTick+0x58>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	4619      	mov	r1, r3
 80027b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fd2b 	bl	800321a <HAL_SYSTICK_Config>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00e      	b.n	80027ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0f      	cmp	r3, #15
 80027d2:	d80a      	bhi.n	80027ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d4:	2200      	movs	r2, #0
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027dc:	f000 fcf3 	bl	80031c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e0:	4a06      	ldr	r2, [pc, #24]	@ (80027fc <HAL_InitTick+0x5c>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e000      	b.n	80027ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000014 	.word	0x20000014
 80027f8:	2000001c 	.word	0x2000001c
 80027fc:	20000018 	.word	0x20000018

08002800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_IncTick+0x1c>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	461a      	mov	r2, r3
 800280a:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <HAL_IncTick+0x20>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4413      	add	r3, r2
 8002810:	4a03      	ldr	r2, [pc, #12]	@ (8002820 <HAL_IncTick+0x20>)
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	2000001c 	.word	0x2000001c
 8002820:	20000460 	.word	0x20000460

08002824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b02      	ldr	r3, [pc, #8]	@ (8002834 <HAL_GetTick+0x10>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000460 	.word	0x20000460

08002838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff fff0 	bl	8002824 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002850:	d005      	beq.n	800285e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002852:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <HAL_Delay+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285e:	bf00      	nop
 8002860:	f7ff ffe0 	bl	8002824 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	429a      	cmp	r2, r3
 800286e:	d8f7      	bhi.n	8002860 <HAL_Delay+0x28>
  {
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	2000001c 	.word	0x2000001c

08002880 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0be      	b.n	8002a20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff fc7a 	bl	80021b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 faff 	bl	8002ec8 <ADC_ConversionStop_Disable>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 8099 	bne.w	8002a0e <HAL_ADC_Init+0x18e>
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 8095 	bne.w	8002a0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028ec:	f023 0302 	bic.w	r3, r3, #2
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002900:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7b1b      	ldrb	r3, [r3, #12]
 8002906:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002908:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4313      	orrs	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002918:	d003      	beq.n	8002922 <HAL_ADC_Init+0xa2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <HAL_ADC_Init+0xa8>
 8002922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002926:	e000      	b.n	800292a <HAL_ADC_Init+0xaa>
 8002928:	2300      	movs	r3, #0
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7d1b      	ldrb	r3, [r3, #20]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d119      	bne.n	800296c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7b1b      	ldrb	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	3b01      	subs	r3, #1
 8002946:	035a      	lsls	r2, r3, #13
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	e00b      	b.n	800296c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	4b28      	ldr	r3, [pc, #160]	@ (8002a28 <HAL_ADC_Init+0x1a8>)
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299c:	d003      	beq.n	80029a6 <HAL_ADC_Init+0x126>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d104      	bne.n	80029b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	051b      	lsls	r3, r3, #20
 80029ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <HAL_ADC_Init+0x1ac>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d10b      	bne.n	80029ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029ea:	e018      	b.n	8002a1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	f023 0312 	bic.w	r3, r3, #18
 80029f4:	f043 0210 	orr.w	r2, r3, #16
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a0c:	e007      	b.n	8002a1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	f043 0210 	orr.w	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	ffe1f7fd 	.word	0xffe1f7fd
 8002a2c:	ff1f0efe 	.word	0xff1f0efe

08002a30 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a64      	ldr	r2, [pc, #400]	@ (8002bd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_ADC_Start_DMA+0x24>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a63      	ldr	r2, [pc, #396]	@ (8002bdc <HAL_ADC_Start_DMA+0x1ac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d106      	bne.n	8002a62 <HAL_ADC_Start_DMA+0x32>
 8002a54:	4b60      	ldr	r3, [pc, #384]	@ (8002bd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f040 80b3 	bne.w	8002bc8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_Start_DMA+0x40>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0ae      	b.n	8002bce <HAL_ADC_Start_DMA+0x19e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f9cb 	bl	8002e14 <ADC_Enable>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 809a 	bne.w	8002bbe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4e      	ldr	r2, [pc, #312]	@ (8002bdc <HAL_ADC_Start_DMA+0x1ac>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d105      	bne.n	8002ab4 <HAL_ADC_Start_DMA+0x84>
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d115      	bne.n	8002ae0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d026      	beq.n	8002b1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ad6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ade:	e01d      	b.n	8002b1c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a39      	ldr	r2, [pc, #228]	@ (8002bd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d004      	beq.n	8002b00 <HAL_ADC_Start_DMA+0xd0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a38      	ldr	r2, [pc, #224]	@ (8002bdc <HAL_ADC_Start_DMA+0x1ac>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10d      	bne.n	8002b1c <HAL_ADC_Start_DMA+0xec>
 8002b00:	4b35      	ldr	r3, [pc, #212]	@ (8002bd8 <HAL_ADC_Start_DMA+0x1a8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	f023 0206 	bic.w	r2, r3, #6
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b34:	e002      	b.n	8002b3c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a25      	ldr	r2, [pc, #148]	@ (8002be0 <HAL_ADC_Start_DMA+0x1b0>)
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a24      	ldr	r2, [pc, #144]	@ (8002be4 <HAL_ADC_Start_DMA+0x1b4>)
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a23      	ldr	r2, [pc, #140]	@ (8002be8 <HAL_ADC_Start_DMA+0x1b8>)
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0202 	mvn.w	r2, #2
 8002b64:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b74:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a18      	ldr	r0, [r3, #32]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	334c      	adds	r3, #76	@ 0x4c
 8002b80:	4619      	mov	r1, r3
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f000 fbaf 	bl	80032e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b94:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b98:	d108      	bne.n	8002bac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002ba8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002baa:	e00f      	b.n	8002bcc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002bba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002bbc:	e006      	b.n	8002bcc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002bc6:	e001      	b.n	8002bcc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40012400 	.word	0x40012400
 8002bdc:	40012800 	.word	0x40012800
 8002be0:	08002f4b 	.word	0x08002f4b
 8002be4:	08002fc7 	.word	0x08002fc7
 8002be8:	08002fe3 	.word	0x08002fe3

08002bec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x20>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0dc      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x1da>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d81c      	bhi.n	8002c8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b05      	subs	r3, #5
 8002c66:	221f      	movs	r2, #31
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	4019      	ands	r1, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b05      	subs	r3, #5
 8002c80:	fa00 f203 	lsl.w	r2, r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c8c:	e03c      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d81c      	bhi.n	8002cd0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3b23      	subs	r3, #35	@ 0x23
 8002ca8:	221f      	movs	r2, #31
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	4019      	ands	r1, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b23      	subs	r3, #35	@ 0x23
 8002cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cce:	e01b      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b41      	subs	r3, #65	@ 0x41
 8002ce2:	221f      	movs	r2, #31
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	4019      	ands	r1, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b41      	subs	r3, #65	@ 0x41
 8002cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	d91c      	bls.n	8002d4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68d9      	ldr	r1, [r3, #12]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b1e      	subs	r3, #30
 8002d22:	2207      	movs	r2, #7
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	4019      	ands	r1, r3
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6898      	ldr	r0, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	3b1e      	subs	r3, #30
 8002d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	e019      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6919      	ldr	r1, [r3, #16]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4019      	ands	r1, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6898      	ldr	r0, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	fa00 f203 	lsl.w	r2, r0, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d003      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d8a:	2b11      	cmp	r3, #17
 8002d8c:	d132      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d125      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d126      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002db4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d11a      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dbe:	4b13      	ldr	r3, [pc, #76]	@ (8002e0c <HAL_ADC_ConfigChannel+0x1e8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a13      	ldr	r2, [pc, #76]	@ (8002e10 <HAL_ADC_ConfigChannel+0x1ec>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	0c9a      	lsrs	r2, r3, #18
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dd4:	e002      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x1b2>
 8002de2:	e007      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	40012400 	.word	0x40012400
 8002e0c:	20000014 	.word	0x20000014
 8002e10:	431bde83 	.word	0x431bde83

08002e14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d040      	beq.n	8002eb4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e42:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec0 <ADC_Enable+0xac>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <ADC_Enable+0xb0>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	0c9b      	lsrs	r3, r3, #18
 8002e4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e50:	e002      	b.n	8002e58 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f9      	bne.n	8002e52 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e5e:	f7ff fce1 	bl	8002824 <HAL_GetTick>
 8002e62:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e64:	e01f      	b.n	8002ea6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e66:	f7ff fcdd 	bl	8002824 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d918      	bls.n	8002ea6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d011      	beq.n	8002ea6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	f043 0210 	orr.w	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d1d8      	bne.n	8002e66 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000014 	.word	0x20000014
 8002ec4:	431bde83 	.word	0x431bde83

08002ec8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d12e      	bne.n	8002f40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ef2:	f7ff fc97 	bl	8002824 <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ef8:	e01b      	b.n	8002f32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002efa:	f7ff fc93 	bl	8002824 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d914      	bls.n	8002f32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10d      	bne.n	8002f32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	f043 0210 	orr.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e007      	b.n	8002f42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d0dc      	beq.n	8002efa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d127      	bne.n	8002fb4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f7a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f7e:	d115      	bne.n	8002fac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d111      	bne.n	8002fac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d105      	bne.n	8002fac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7ff fe1d 	bl	8002bec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002fb2:	e004      	b.n	8002fbe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fe12 	bl	8002bfe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f7ff fe01 	bl	8002c10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4906      	ldr	r1, [pc, #24]	@ (80030b0 <__NVIC_EnableIRQ+0x34>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	e000e100 	.word	0xe000e100

080030b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	6039      	str	r1, [r7, #0]
 80030be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	db0a      	blt.n	80030de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	490c      	ldr	r1, [pc, #48]	@ (8003100 <__NVIC_SetPriority+0x4c>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	0112      	lsls	r2, r2, #4
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	440b      	add	r3, r1
 80030d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030dc:	e00a      	b.n	80030f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4908      	ldr	r1, [pc, #32]	@ (8003104 <__NVIC_SetPriority+0x50>)
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	3b04      	subs	r3, #4
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	440b      	add	r3, r1
 80030f2:	761a      	strb	r2, [r3, #24]
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f1c3 0307 	rsb	r3, r3, #7
 8003122:	2b04      	cmp	r3, #4
 8003124:	bf28      	it	cs
 8003126:	2304      	movcs	r3, #4
 8003128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3304      	adds	r3, #4
 800312e:	2b06      	cmp	r3, #6
 8003130:	d902      	bls.n	8003138 <NVIC_EncodePriority+0x30>
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3b03      	subs	r3, #3
 8003136:	e000      	b.n	800313a <NVIC_EncodePriority+0x32>
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	401a      	ands	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003150:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa01 f303 	lsl.w	r3, r1, r3
 800315a:	43d9      	mvns	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	4313      	orrs	r3, r2
         );
}
 8003162:	4618      	mov	r0, r3
 8003164:	3724      	adds	r7, #36	@ 0x24
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800317c:	d301      	bcc.n	8003182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317e:	2301      	movs	r3, #1
 8003180:	e00f      	b.n	80031a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <SysTick_Config+0x40>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318a:	210f      	movs	r1, #15
 800318c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003190:	f7ff ff90 	bl	80030b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <SysTick_Config+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319a:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <SysTick_Config+0x40>)
 800319c:	2207      	movs	r2, #7
 800319e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff2d 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d8:	f7ff ff42 	bl	8003060 <__NVIC_GetPriorityGrouping>
 80031dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	6978      	ldr	r0, [r7, #20]
 80031e4:	f7ff ff90 	bl	8003108 <NVIC_EncodePriority>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff5f 	bl	80030b4 <__NVIC_SetPriority>
}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff35 	bl	800307c <__NVIC_EnableIRQ>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ffa2 	bl	800316c <SysTick_Config>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e043      	b.n	80032d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	4b22      	ldr	r3, [pc, #136]	@ (80032dc <HAL_DMA_Init+0xa8>)
 8003252:	4413      	add	r3, r2
 8003254:	4a22      	ldr	r2, [pc, #136]	@ (80032e0 <HAL_DMA_Init+0xac>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	009a      	lsls	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1f      	ldr	r2, [pc, #124]	@ (80032e4 <HAL_DMA_Init+0xb0>)
 8003266:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800327e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003282:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800328c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	bffdfff8 	.word	0xbffdfff8
 80032e0:	cccccccd 	.word	0xcccccccd
 80032e4:	40020000 	.word	0x40020000

080032e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_DMA_Start_IT+0x20>
 8003304:	2302      	movs	r3, #2
 8003306:	e04b      	b.n	80033a0 <HAL_DMA_Start_IT+0xb8>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d13a      	bne.n	8003392 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f937 	bl	80035b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 020e 	orr.w	r2, r2, #14
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e00f      	b.n	8003380 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0204 	bic.w	r2, r2, #4
 800336e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 020a 	orr.w	r2, r2, #10
 800337e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	e005      	b.n	800339e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	2204      	movs	r2, #4
 80033c6:	409a      	lsls	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04f      	beq.n	8003470 <HAL_DMA_IRQHandler+0xc8>
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d04a      	beq.n	8003470 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d107      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a66      	ldr	r2, [pc, #408]	@ (8003598 <HAL_DMA_IRQHandler+0x1f0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d029      	beq.n	8003456 <HAL_DMA_IRQHandler+0xae>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a65      	ldr	r2, [pc, #404]	@ (800359c <HAL_DMA_IRQHandler+0x1f4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_IRQHandler+0xaa>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a63      	ldr	r2, [pc, #396]	@ (80035a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01a      	beq.n	800344c <HAL_DMA_IRQHandler+0xa4>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a62      	ldr	r2, [pc, #392]	@ (80035a4 <HAL_DMA_IRQHandler+0x1fc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d012      	beq.n	8003446 <HAL_DMA_IRQHandler+0x9e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a60      	ldr	r2, [pc, #384]	@ (80035a8 <HAL_DMA_IRQHandler+0x200>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00a      	beq.n	8003440 <HAL_DMA_IRQHandler+0x98>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5f      	ldr	r2, [pc, #380]	@ (80035ac <HAL_DMA_IRQHandler+0x204>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d102      	bne.n	800343a <HAL_DMA_IRQHandler+0x92>
 8003434:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003438:	e00e      	b.n	8003458 <HAL_DMA_IRQHandler+0xb0>
 800343a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800343e:	e00b      	b.n	8003458 <HAL_DMA_IRQHandler+0xb0>
 8003440:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003444:	e008      	b.n	8003458 <HAL_DMA_IRQHandler+0xb0>
 8003446:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800344a:	e005      	b.n	8003458 <HAL_DMA_IRQHandler+0xb0>
 800344c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003450:	e002      	b.n	8003458 <HAL_DMA_IRQHandler+0xb0>
 8003452:	2340      	movs	r3, #64	@ 0x40
 8003454:	e000      	b.n	8003458 <HAL_DMA_IRQHandler+0xb0>
 8003456:	2304      	movs	r3, #4
 8003458:	4a55      	ldr	r2, [pc, #340]	@ (80035b0 <HAL_DMA_IRQHandler+0x208>)
 800345a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8094 	beq.w	800358e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800346e:	e08e      	b.n	800358e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	2202      	movs	r2, #2
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d056      	beq.n	800352e <HAL_DMA_IRQHandler+0x186>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d051      	beq.n	800352e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 020a 	bic.w	r2, r2, #10
 80034a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a38      	ldr	r2, [pc, #224]	@ (8003598 <HAL_DMA_IRQHandler+0x1f0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d029      	beq.n	800350e <HAL_DMA_IRQHandler+0x166>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a37      	ldr	r2, [pc, #220]	@ (800359c <HAL_DMA_IRQHandler+0x1f4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d022      	beq.n	800350a <HAL_DMA_IRQHandler+0x162>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a35      	ldr	r2, [pc, #212]	@ (80035a0 <HAL_DMA_IRQHandler+0x1f8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01a      	beq.n	8003504 <HAL_DMA_IRQHandler+0x15c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a34      	ldr	r2, [pc, #208]	@ (80035a4 <HAL_DMA_IRQHandler+0x1fc>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d012      	beq.n	80034fe <HAL_DMA_IRQHandler+0x156>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a32      	ldr	r2, [pc, #200]	@ (80035a8 <HAL_DMA_IRQHandler+0x200>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00a      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x150>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a31      	ldr	r2, [pc, #196]	@ (80035ac <HAL_DMA_IRQHandler+0x204>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d102      	bne.n	80034f2 <HAL_DMA_IRQHandler+0x14a>
 80034ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034f0:	e00e      	b.n	8003510 <HAL_DMA_IRQHandler+0x168>
 80034f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034f6:	e00b      	b.n	8003510 <HAL_DMA_IRQHandler+0x168>
 80034f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034fc:	e008      	b.n	8003510 <HAL_DMA_IRQHandler+0x168>
 80034fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003502:	e005      	b.n	8003510 <HAL_DMA_IRQHandler+0x168>
 8003504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003508:	e002      	b.n	8003510 <HAL_DMA_IRQHandler+0x168>
 800350a:	2320      	movs	r3, #32
 800350c:	e000      	b.n	8003510 <HAL_DMA_IRQHandler+0x168>
 800350e:	2302      	movs	r3, #2
 8003510:	4a27      	ldr	r2, [pc, #156]	@ (80035b0 <HAL_DMA_IRQHandler+0x208>)
 8003512:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d034      	beq.n	800358e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800352c:	e02f      	b.n	800358e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2208      	movs	r2, #8
 8003534:	409a      	lsls	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d028      	beq.n	8003590 <HAL_DMA_IRQHandler+0x1e8>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d023      	beq.n	8003590 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 020e 	bic.w	r2, r2, #14
 8003556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
    }
  }
  return;
 800358e:	bf00      	nop
 8003590:	bf00      	nop
}
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40020008 	.word	0x40020008
 800359c:	4002001c 	.word	0x4002001c
 80035a0:	40020030 	.word	0x40020030
 80035a4:	40020044 	.word	0x40020044
 80035a8:	40020058 	.word	0x40020058
 80035ac:	4002006c 	.word	0x4002006c
 80035b0:	40020000 	.word	0x40020000

080035b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f202 	lsl.w	r2, r1, r2
 80035d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d108      	bne.n	80035f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035f2:	e007      	b.n	8003604 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	60da      	str	r2, [r3, #12]
}
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
	...

08003610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003610:	b480      	push	{r7}
 8003612:	b08b      	sub	sp, #44	@ 0x2c
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003622:	e169      	b.n	80038f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003624:	2201      	movs	r2, #1
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 8158 	bne.w	80038f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a9a      	ldr	r2, [pc, #616]	@ (80038b0 <HAL_GPIO_Init+0x2a0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d05e      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 800364c:	4a98      	ldr	r2, [pc, #608]	@ (80038b0 <HAL_GPIO_Init+0x2a0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d875      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003652:	4a98      	ldr	r2, [pc, #608]	@ (80038b4 <HAL_GPIO_Init+0x2a4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d058      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003658:	4a96      	ldr	r2, [pc, #600]	@ (80038b4 <HAL_GPIO_Init+0x2a4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d86f      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800365e:	4a96      	ldr	r2, [pc, #600]	@ (80038b8 <HAL_GPIO_Init+0x2a8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d052      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003664:	4a94      	ldr	r2, [pc, #592]	@ (80038b8 <HAL_GPIO_Init+0x2a8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d869      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800366a:	4a94      	ldr	r2, [pc, #592]	@ (80038bc <HAL_GPIO_Init+0x2ac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d04c      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 8003670:	4a92      	ldr	r2, [pc, #584]	@ (80038bc <HAL_GPIO_Init+0x2ac>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d863      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003676:	4a92      	ldr	r2, [pc, #584]	@ (80038c0 <HAL_GPIO_Init+0x2b0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d046      	beq.n	800370a <HAL_GPIO_Init+0xfa>
 800367c:	4a90      	ldr	r2, [pc, #576]	@ (80038c0 <HAL_GPIO_Init+0x2b0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d85d      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 8003682:	2b12      	cmp	r3, #18
 8003684:	d82a      	bhi.n	80036dc <HAL_GPIO_Init+0xcc>
 8003686:	2b12      	cmp	r3, #18
 8003688:	d859      	bhi.n	800373e <HAL_GPIO_Init+0x12e>
 800368a:	a201      	add	r2, pc, #4	@ (adr r2, 8003690 <HAL_GPIO_Init+0x80>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	0800370b 	.word	0x0800370b
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036f7 	.word	0x080036f7
 800369c:	08003739 	.word	0x08003739
 80036a0:	0800373f 	.word	0x0800373f
 80036a4:	0800373f 	.word	0x0800373f
 80036a8:	0800373f 	.word	0x0800373f
 80036ac:	0800373f 	.word	0x0800373f
 80036b0:	0800373f 	.word	0x0800373f
 80036b4:	0800373f 	.word	0x0800373f
 80036b8:	0800373f 	.word	0x0800373f
 80036bc:	0800373f 	.word	0x0800373f
 80036c0:	0800373f 	.word	0x0800373f
 80036c4:	0800373f 	.word	0x0800373f
 80036c8:	0800373f 	.word	0x0800373f
 80036cc:	0800373f 	.word	0x0800373f
 80036d0:	0800373f 	.word	0x0800373f
 80036d4:	080036ed 	.word	0x080036ed
 80036d8:	08003701 	.word	0x08003701
 80036dc:	4a79      	ldr	r2, [pc, #484]	@ (80038c4 <HAL_GPIO_Init+0x2b4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036e2:	e02c      	b.n	800373e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	623b      	str	r3, [r7, #32]
          break;
 80036ea:	e029      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	3304      	adds	r3, #4
 80036f2:	623b      	str	r3, [r7, #32]
          break;
 80036f4:	e024      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	3308      	adds	r3, #8
 80036fc:	623b      	str	r3, [r7, #32]
          break;
 80036fe:	e01f      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	330c      	adds	r3, #12
 8003706:	623b      	str	r3, [r7, #32]
          break;
 8003708:	e01a      	b.n	8003740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003712:	2304      	movs	r3, #4
 8003714:	623b      	str	r3, [r7, #32]
          break;
 8003716:	e013      	b.n	8003740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003720:	2308      	movs	r3, #8
 8003722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	611a      	str	r2, [r3, #16]
          break;
 800372a:	e009      	b.n	8003740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800372c:	2308      	movs	r3, #8
 800372e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	615a      	str	r2, [r3, #20]
          break;
 8003736:	e003      	b.n	8003740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
          break;
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x130>
          break;
 800373e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2bff      	cmp	r3, #255	@ 0xff
 8003744:	d801      	bhi.n	800374a <HAL_GPIO_Init+0x13a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	e001      	b.n	800374e <HAL_GPIO_Init+0x13e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2bff      	cmp	r3, #255	@ 0xff
 8003754:	d802      	bhi.n	800375c <HAL_GPIO_Init+0x14c>
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	e002      	b.n	8003762 <HAL_GPIO_Init+0x152>
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	3b08      	subs	r3, #8
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	210f      	movs	r1, #15
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	fa01 f303 	lsl.w	r3, r1, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	6a39      	ldr	r1, [r7, #32]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	431a      	orrs	r2, r3
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80b1 	beq.w	80038f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003790:	4b4d      	ldr	r3, [pc, #308]	@ (80038c8 <HAL_GPIO_Init+0x2b8>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a4c      	ldr	r2, [pc, #304]	@ (80038c8 <HAL_GPIO_Init+0x2b8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6193      	str	r3, [r2, #24]
 800379c:	4b4a      	ldr	r3, [pc, #296]	@ (80038c8 <HAL_GPIO_Init+0x2b8>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037a8:	4a48      	ldr	r2, [pc, #288]	@ (80038cc <HAL_GPIO_Init+0x2bc>)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3302      	adds	r3, #2
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	220f      	movs	r2, #15
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a40      	ldr	r2, [pc, #256]	@ (80038d0 <HAL_GPIO_Init+0x2c0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_GPIO_Init+0x1ec>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a3f      	ldr	r2, [pc, #252]	@ (80038d4 <HAL_GPIO_Init+0x2c4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00d      	beq.n	80037f8 <HAL_GPIO_Init+0x1e8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a3e      	ldr	r2, [pc, #248]	@ (80038d8 <HAL_GPIO_Init+0x2c8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <HAL_GPIO_Init+0x1e4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a3d      	ldr	r2, [pc, #244]	@ (80038dc <HAL_GPIO_Init+0x2cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d101      	bne.n	80037f0 <HAL_GPIO_Init+0x1e0>
 80037ec:	2303      	movs	r3, #3
 80037ee:	e006      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f0:	2304      	movs	r3, #4
 80037f2:	e004      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e002      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_GPIO_Init+0x1ee>
 80037fc:	2300      	movs	r3, #0
 80037fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003800:	f002 0203 	and.w	r2, r2, #3
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	4093      	lsls	r3, r2
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800380e:	492f      	ldr	r1, [pc, #188]	@ (80038cc <HAL_GPIO_Init+0x2bc>)
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d006      	beq.n	8003836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003828:	4b2d      	ldr	r3, [pc, #180]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	492c      	ldr	r1, [pc, #176]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]
 8003834:	e006      	b.n	8003844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003836:	4b2a      	ldr	r3, [pc, #168]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	43db      	mvns	r3, r3
 800383e:	4928      	ldr	r1, [pc, #160]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003840:	4013      	ands	r3, r2
 8003842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003850:	4b23      	ldr	r3, [pc, #140]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	4922      	ldr	r1, [pc, #136]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	60cb      	str	r3, [r1, #12]
 800385c:	e006      	b.n	800386c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800385e:	4b20      	ldr	r3, [pc, #128]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	43db      	mvns	r3, r3
 8003866:	491e      	ldr	r1, [pc, #120]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003868:	4013      	ands	r3, r2
 800386a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d006      	beq.n	8003886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003878:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	4918      	ldr	r1, [pc, #96]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003886:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	43db      	mvns	r3, r3
 800388e:	4914      	ldr	r1, [pc, #80]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 8003890:	4013      	ands	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d021      	beq.n	80038e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038a0:	4b0f      	ldr	r3, [pc, #60]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	490e      	ldr	r1, [pc, #56]	@ (80038e0 <HAL_GPIO_Init+0x2d0>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
 80038ac:	e021      	b.n	80038f2 <HAL_GPIO_Init+0x2e2>
 80038ae:	bf00      	nop
 80038b0:	10320000 	.word	0x10320000
 80038b4:	10310000 	.word	0x10310000
 80038b8:	10220000 	.word	0x10220000
 80038bc:	10210000 	.word	0x10210000
 80038c0:	10120000 	.word	0x10120000
 80038c4:	10110000 	.word	0x10110000
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40010800 	.word	0x40010800
 80038d4:	40010c00 	.word	0x40010c00
 80038d8:	40011000 	.word	0x40011000
 80038dc:	40011400 	.word	0x40011400
 80038e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_GPIO_Init+0x304>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4909      	ldr	r1, [pc, #36]	@ (8003914 <HAL_GPIO_Init+0x304>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	f47f ae8e 	bne.w	8003624 <HAL_GPIO_Init+0x14>
  }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	372c      	adds	r7, #44	@ 0x2c
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40010400 	.word	0x40010400

08003918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	887b      	ldrh	r3, [r7, #2]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
 8003934:	e001      	b.n	800393a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	807b      	strh	r3, [r7, #2]
 8003952:	4613      	mov	r3, r2
 8003954:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003956:	787b      	ldrb	r3, [r7, #1]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800395c:	887a      	ldrh	r2, [r7, #2]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003962:	e003      	b.n	800396c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003964:	887b      	ldrh	r3, [r7, #2]
 8003966:	041a      	lsls	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	611a      	str	r2, [r3, #16]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr
	...

08003978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003982:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800398e:	4a05      	ldr	r2, [pc, #20]	@ (80039a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f806 	bl	80039a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40010400 	.word	0x40010400

080039a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e12b      	b.n	8003c26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fe fc68 	bl	80022b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	@ 0x24
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0201 	bic.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a20:	f001 fd7c 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8003a24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a81      	ldr	r2, [pc, #516]	@ (8003c30 <HAL_I2C_Init+0x274>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d807      	bhi.n	8003a40 <HAL_I2C_Init+0x84>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a80      	ldr	r2, [pc, #512]	@ (8003c34 <HAL_I2C_Init+0x278>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	bf94      	ite	ls
 8003a38:	2301      	movls	r3, #1
 8003a3a:	2300      	movhi	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	e006      	b.n	8003a4e <HAL_I2C_Init+0x92>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a7d      	ldr	r2, [pc, #500]	@ (8003c38 <HAL_I2C_Init+0x27c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0e7      	b.n	8003c26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a78      	ldr	r2, [pc, #480]	@ (8003c3c <HAL_I2C_Init+0x280>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0c9b      	lsrs	r3, r3, #18
 8003a60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4a6a      	ldr	r2, [pc, #424]	@ (8003c30 <HAL_I2C_Init+0x274>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d802      	bhi.n	8003a90 <HAL_I2C_Init+0xd4>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	e009      	b.n	8003aa4 <HAL_I2C_Init+0xe8>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	4a69      	ldr	r2, [pc, #420]	@ (8003c40 <HAL_I2C_Init+0x284>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ab6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	495c      	ldr	r1, [pc, #368]	@ (8003c30 <HAL_I2C_Init+0x274>)
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	d819      	bhi.n	8003af8 <HAL_I2C_Init+0x13c>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e59      	subs	r1, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad2:	1c59      	adds	r1, r3, #1
 8003ad4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ad8:	400b      	ands	r3, r1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_I2C_Init+0x138>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e59      	subs	r1, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af2:	e051      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003af4:	2304      	movs	r3, #4
 8003af6:	e04f      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d111      	bne.n	8003b24 <HAL_I2C_Init+0x168>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e58      	subs	r0, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	440b      	add	r3, r1
 8003b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf0c      	ite	eq
 8003b1c:	2301      	moveq	r3, #1
 8003b1e:	2300      	movne	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e012      	b.n	8003b4a <HAL_I2C_Init+0x18e>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e58      	subs	r0, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Init+0x196>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e022      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10e      	bne.n	8003b78 <HAL_I2C_Init+0x1bc>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1e58      	subs	r0, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6859      	ldr	r1, [r3, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	440b      	add	r3, r1
 8003b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b76:	e00f      	b.n	8003b98 <HAL_I2C_Init+0x1dc>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	6809      	ldr	r1, [r1, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6911      	ldr	r1, [r2, #16]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	4311      	orrs	r1, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	000186a0 	.word	0x000186a0
 8003c34:	001e847f 	.word	0x001e847f
 8003c38:	003d08ff 	.word	0x003d08ff
 8003c3c:	431bde83 	.word	0x431bde83
 8003c40:	10624dd3 	.word	0x10624dd3

08003c44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	460b      	mov	r3, r1
 8003c52:	817b      	strh	r3, [r7, #10]
 8003c54:	4613      	mov	r3, r2
 8003c56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c58:	f7fe fde4 	bl	8002824 <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f040 80e0 	bne.w	8003e2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	4970      	ldr	r1, [pc, #448]	@ (8003e38 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fe50 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0d3      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2C_Master_Transmit+0x50>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e0cc      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d007      	beq.n	8003cba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	@ 0x21
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a50      	ldr	r2, [pc, #320]	@ (8003e3c <HAL_I2C_Master_Transmit+0x1f8>)
 8003cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fc0a 	bl	800451c <I2C_MasterRequestWrite>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e08d      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d28:	e066      	b.n	8003df8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	6a39      	ldr	r1, [r7, #32]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 ff0e 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d107      	bne.n	8003d52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e06b      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	781a      	ldrb	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d11b      	bne.n	8003dcc <HAL_I2C_Master_Transmit+0x188>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d017      	beq.n	8003dcc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	6a39      	ldr	r1, [r7, #32]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 ff05 	bl	8004be0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d107      	bne.n	8003df4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e01a      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d194      	bne.n	8003d2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	00100002 	.word	0x00100002
 8003e3c:	ffff0000 	.word	0xffff0000

08003e40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	817b      	strh	r3, [r7, #10]
 8003e52:	460b      	mov	r3, r1
 8003e54:	813b      	strh	r3, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e5a:	f7fe fce3 	bl	8002824 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	f040 80d9 	bne.w	8004020 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	2319      	movs	r3, #25
 8003e74:	2201      	movs	r2, #1
 8003e76:	496d      	ldr	r1, [pc, #436]	@ (800402c <HAL_I2C_Mem_Write+0x1ec>)
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 fd4f 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0cc      	b.n	8004022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Mem_Write+0x56>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0c5      	b.n	8004022 <HAL_I2C_Mem_Write+0x1e2>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d007      	beq.n	8003ebc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2221      	movs	r2, #33	@ 0x21
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2240      	movs	r2, #64	@ 0x40
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a4d      	ldr	r2, [pc, #308]	@ (8004030 <HAL_I2C_Mem_Write+0x1f0>)
 8003efc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003efe:	88f8      	ldrh	r0, [r7, #6]
 8003f00:	893a      	ldrh	r2, [r7, #8]
 8003f02:	8979      	ldrh	r1, [r7, #10]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fb86 	bl	8004620 <I2C_RequestMemoryWrite>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d052      	beq.n	8003fc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e081      	b.n	8004022 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fe14 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d107      	bne.n	8003f46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e06b      	b.n	8004022 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d11b      	bne.n	8003fc0 <HAL_I2C_Mem_Write+0x180>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d017      	beq.n	8003fc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1aa      	bne.n	8003f1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fe07 	bl	8004be0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d107      	bne.n	8003ff0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e016      	b.n	8004022 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	00100002 	.word	0x00100002
 8004030:	ffff0000 	.word	0xffff0000

08004034 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	@ 0x30
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	817b      	strh	r3, [r7, #10]
 8004046:	460b      	mov	r3, r1
 8004048:	813b      	strh	r3, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004052:	f7fe fbe7 	bl	8002824 <HAL_GetTick>
 8004056:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b20      	cmp	r3, #32
 8004062:	f040 8250 	bne.w	8004506 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	2319      	movs	r3, #25
 800406c:	2201      	movs	r2, #1
 800406e:	4982      	ldr	r1, [pc, #520]	@ (8004278 <HAL_I2C_Mem_Read+0x244>)
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fc53 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
 800407e:	e243      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_I2C_Mem_Read+0x5a>
 800408a:	2302      	movs	r3, #2
 800408c:	e23c      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d007      	beq.n	80040b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2222      	movs	r2, #34	@ 0x22
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2240      	movs	r2, #64	@ 0x40
 80040d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a62      	ldr	r2, [pc, #392]	@ (800427c <HAL_I2C_Mem_Read+0x248>)
 80040f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040f6:	88f8      	ldrh	r0, [r7, #6]
 80040f8:	893a      	ldrh	r2, [r7, #8]
 80040fa:	8979      	ldrh	r1, [r7, #10]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4603      	mov	r3, r0
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fb20 	bl	800474c <I2C_RequestMemoryRead>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e1f8      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d113      	bne.n	8004146 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	e1cc      	b.n	80044e0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	2b01      	cmp	r3, #1
 800414c:	d11e      	bne.n	800418c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800415e:	b672      	cpsid	i
}
 8004160:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004186:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004188:	b662      	cpsie	i
}
 800418a:	e035      	b.n	80041f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004190:	2b02      	cmp	r3, #2
 8004192:	d11e      	bne.n	80041d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041a4:	b672      	cpsid	i
}
 80041a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041ce:	b662      	cpsie	i
}
 80041d0:	e012      	b.n	80041f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041f8:	e172      	b.n	80044e0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fe:	2b03      	cmp	r3, #3
 8004200:	f200 811f 	bhi.w	8004442 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004208:	2b01      	cmp	r3, #1
 800420a:	d123      	bne.n	8004254 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800420c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fd2d 	bl	8004c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e173      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004252:	e145      	b.n	80044e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004258:	2b02      	cmp	r3, #2
 800425a:	d152      	bne.n	8004302 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004262:	2200      	movs	r2, #0
 8004264:	4906      	ldr	r1, [pc, #24]	@ (8004280 <HAL_I2C_Mem_Read+0x24c>)
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 fb58 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e148      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
 8004276:	bf00      	nop
 8004278:	00100002 	.word	0x00100002
 800427c:	ffff0000 	.word	0xffff0000
 8004280:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004284:	b672      	cpsid	i
}
 8004286:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042ca:	b662      	cpsie	i
}
 80042cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004300:	e0ee      	b.n	80044e0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004308:	2200      	movs	r2, #0
 800430a:	4981      	ldr	r1, [pc, #516]	@ (8004510 <HAL_I2C_Mem_Read+0x4dc>)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fb05 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0f5      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800432a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800432c:	b672      	cpsid	i
}
 800432e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004362:	4b6c      	ldr	r3, [pc, #432]	@ (8004514 <HAL_I2C_Mem_Read+0x4e0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	08db      	lsrs	r3, r3, #3
 8004368:	4a6b      	ldr	r2, [pc, #428]	@ (8004518 <HAL_I2C_Mem_Read+0x4e4>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0a1a      	lsrs	r2, r3, #8
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	00da      	lsls	r2, r3, #3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	3b01      	subs	r3, #1
 8004380:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d118      	bne.n	80043ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043aa:	b662      	cpsie	i
}
 80043ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0a6      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d1d9      	bne.n	800437c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800440a:	b662      	cpsie	i
}
 800440c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004440:	e04e      	b.n	80044e0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004444:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 fc12 	bl	8004c70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e058      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b04      	cmp	r3, #4
 8004494:	d124      	bne.n	80044e0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	2b03      	cmp	r3, #3
 800449c:	d107      	bne.n	80044ae <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f ae88 	bne.w	80041fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	e000      	b.n	8004508 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3728      	adds	r7, #40	@ 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	00010004 	.word	0x00010004
 8004514:	20000014 	.word	0x20000014
 8004518:	14f8b589 	.word	0x14f8b589

0800451c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b088      	sub	sp, #32
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	460b      	mov	r3, r1
 800452a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d006      	beq.n	8004546 <I2C_MasterRequestWrite+0x2a>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d003      	beq.n	8004546 <I2C_MasterRequestWrite+0x2a>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004544:	d108      	bne.n	8004558 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e00b      	b.n	8004570 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	2b12      	cmp	r3, #18
 800455e:	d107      	bne.n	8004570 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800456e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f9cd 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004592:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004596:	d103      	bne.n	80045a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e035      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045bc:	611a      	str	r2, [r3, #16]
 80045be:	e01b      	b.n	80045f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c0:	897b      	ldrh	r3, [r7, #10]
 80045c2:	11db      	asrs	r3, r3, #7
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0306 	and.w	r3, r3, #6
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f063 030f 	orn	r3, r3, #15
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	490e      	ldr	r1, [pc, #56]	@ (8004618 <I2C_MasterRequestWrite+0xfc>)
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa16 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e010      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045ee:	897b      	ldrh	r3, [r7, #10]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4907      	ldr	r1, [pc, #28]	@ (800461c <I2C_MasterRequestWrite+0x100>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa06 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	00010008 	.word	0x00010008
 800461c:	00010002 	.word	0x00010002

08004620 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	817b      	strh	r3, [r7, #10]
 8004632:	460b      	mov	r3, r1
 8004634:	813b      	strh	r3, [r7, #8]
 8004636:	4613      	mov	r3, r2
 8004638:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	2200      	movs	r2, #0
 8004652:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f960 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004670:	d103      	bne.n	800467a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004678:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e05f      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800468c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	6a3a      	ldr	r2, [r7, #32]
 8004692:	492d      	ldr	r1, [pc, #180]	@ (8004748 <I2C_RequestMemoryWrite+0x128>)
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f9bb 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e04c      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046bc:	6a39      	ldr	r1, [r7, #32]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fa46 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d107      	bne.n	80046e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e02b      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046ec:	893b      	ldrh	r3, [r7, #8]
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	611a      	str	r2, [r3, #16]
 80046f6:	e021      	b.n	800473c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046f8:	893b      	ldrh	r3, [r7, #8]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004708:	6a39      	ldr	r1, [r7, #32]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 fa20 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00d      	beq.n	8004732 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2b04      	cmp	r3, #4
 800471c:	d107      	bne.n	800472e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800472c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e005      	b.n	800473e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	00010002 	.word	0x00010002

0800474c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	4608      	mov	r0, r1
 8004756:	4611      	mov	r1, r2
 8004758:	461a      	mov	r2, r3
 800475a:	4603      	mov	r3, r0
 800475c:	817b      	strh	r3, [r7, #10]
 800475e:	460b      	mov	r3, r1
 8004760:	813b      	strh	r3, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004774:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004784:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	2200      	movs	r2, #0
 800478e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f8c2 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00d      	beq.n	80047ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ac:	d103      	bne.n	80047b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e0aa      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	4952      	ldr	r1, [pc, #328]	@ (8004918 <I2C_RequestMemoryRead+0x1cc>)
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f91d 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e097      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f8:	6a39      	ldr	r1, [r7, #32]
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f9a8 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00d      	beq.n	8004822 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	2b04      	cmp	r3, #4
 800480c:	d107      	bne.n	800481e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e076      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004828:	893b      	ldrh	r3, [r7, #8]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]
 8004832:	e021      	b.n	8004878 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004834:	893b      	ldrh	r3, [r7, #8]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	b29b      	uxth	r3, r3
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004844:	6a39      	ldr	r1, [r7, #32]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f982 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00d      	beq.n	800486e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004856:	2b04      	cmp	r3, #4
 8004858:	d107      	bne.n	800486a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004868:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e050      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800486e:	893b      	ldrh	r3, [r7, #8]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800487a:	6a39      	ldr	r1, [r7, #32]
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f967 	bl	8004b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	2b04      	cmp	r3, #4
 800488e:	d107      	bne.n	80048a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e035      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f82b 	bl	800491c <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048da:	d103      	bne.n	80048e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e013      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048e8:	897b      	ldrh	r3, [r7, #10]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	6a3a      	ldr	r2, [r7, #32]
 80048fc:	4906      	ldr	r1, [pc, #24]	@ (8004918 <I2C_RequestMemoryRead+0x1cc>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f886 	bl	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	00010002 	.word	0x00010002

0800491c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800492c:	e048      	b.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004934:	d044      	beq.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004936:	f7fd ff75 	bl	8002824 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d139      	bne.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10d      	bne.n	8004972 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	e00c      	b.n	800498c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	43da      	mvns	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	d116      	bne.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e023      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d10d      	bne.n	80049e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	e00c      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	43da      	mvns	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf0c      	ite	eq
 80049f8:	2301      	moveq	r3, #1
 80049fa:	2300      	movne	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d093      	beq.n	800492e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a1e:	e071      	b.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2e:	d123      	bne.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	f043 0204 	orr.w	r2, r3, #4
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e067      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a7e:	d041      	beq.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a80:	f7fd fed0 	bl	8002824 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d136      	bne.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10c      	bne.n	8004aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	bf14      	ite	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	2300      	moveq	r3, #0
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	e00b      	b.n	8004ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e021      	b.n	8004b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	0c1b      	lsrs	r3, r3, #16
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10c      	bne.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	43da      	mvns	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e00b      	b.n	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	43da      	mvns	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4013      	ands	r3, r2
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f af6d 	bne.w	8004a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5c:	e034      	b.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8e3 	bl	8004d2a <I2C_IsAcknowledgeFailed>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e034      	b.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b74:	d028      	beq.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b76:	f7fd fe55 	bl	8002824 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d302      	bcc.n	8004b8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11d      	bne.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b96:	2b80      	cmp	r3, #128	@ 0x80
 8004b98:	d016      	beq.n	8004bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e007      	b.n	8004bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd2:	2b80      	cmp	r3, #128	@ 0x80
 8004bd4:	d1c3      	bne.n	8004b5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bec:	e034      	b.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f89b 	bl	8004d2a <I2C_IsAcknowledgeFailed>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e034      	b.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c04:	d028      	beq.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7fd fe0d 	bl	8002824 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d302      	bcc.n	8004c1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d11d      	bne.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d016      	beq.n	8004c58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e007      	b.n	8004c68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d1c3      	bne.n	8004bee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c7c:	e049      	b.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d119      	bne.n	8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0210 	mvn.w	r2, #16
 8004c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e030      	b.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc0:	f7fd fdb0 	bl	8002824 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d302      	bcc.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d016      	beq.n	8004d12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e007      	b.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1c:	2b40      	cmp	r3, #64	@ 0x40
 8004d1e:	d1ae      	bne.n	8004c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d40:	d11b      	bne.n	8004d7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2220      	movs	r2, #32
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e272      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 8087 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004da8:	4b92      	ldr	r3, [pc, #584]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d00c      	beq.n	8004dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004db4:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d112      	bne.n	8004de6 <HAL_RCC_OscConfig+0x5e>
 8004dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dcc:	d10b      	bne.n	8004de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dce:	4b89      	ldr	r3, [pc, #548]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d06c      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x12c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d168      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e24c      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dee:	d106      	bne.n	8004dfe <HAL_RCC_OscConfig+0x76>
 8004df0:	4b80      	ldr	r3, [pc, #512]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7f      	ldr	r2, [pc, #508]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e02e      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x98>
 8004e06:	4b7b      	ldr	r3, [pc, #492]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	4b78      	ldr	r3, [pc, #480]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a77      	ldr	r2, [pc, #476]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e01d      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0xbc>
 8004e2a:	4b72      	ldr	r3, [pc, #456]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a71      	ldr	r2, [pc, #452]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b6f      	ldr	r3, [pc, #444]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0xd4>
 8004e44:	4b6b      	ldr	r3, [pc, #428]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a6a      	ldr	r2, [pc, #424]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4b68      	ldr	r3, [pc, #416]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a67      	ldr	r2, [pc, #412]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fd fcde 	bl	8002824 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fd fcda 	bl	8002824 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	@ 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e200      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0xe4>
 8004e8a:	e014      	b.n	8004eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fcca 	bl	8002824 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fd fcc6 	bl	8002824 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1ec      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea6:	4b53      	ldr	r3, [pc, #332]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0x10c>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d063      	beq.n	8004f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ece:	4b49      	ldr	r3, [pc, #292]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x18c>
 8004eda:	4b46      	ldr	r3, [pc, #280]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d116      	bne.n	8004f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	4b43      	ldr	r3, [pc, #268]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x176>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e1c0      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efe:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4939      	ldr	r1, [pc, #228]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	e03a      	b.n	8004f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1c:	4b36      	ldr	r3, [pc, #216]	@ (8004ff8 <HAL_RCC_OscConfig+0x270>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fd fc7f 	bl	8002824 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2a:	f7fd fc7b 	bl	8002824 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e1a1      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f48:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4927      	ldr	r1, [pc, #156]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5e:	4b26      	ldr	r3, [pc, #152]	@ (8004ff8 <HAL_RCC_OscConfig+0x270>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd fc5e 	bl	8002824 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fd fc5a 	bl	8002824 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e180      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d03a      	beq.n	800500c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d019      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa4:	f7fd fc3e 	bl	8002824 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fac:	f7fd fc3a 	bl	8002824 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e160      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <HAL_RCC_OscConfig+0x26c>)
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fca:	2001      	movs	r0, #1
 8004fcc:	f000 face 	bl	800556c <RCC_Delay>
 8004fd0:	e01c      	b.n	800500c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <HAL_RCC_OscConfig+0x274>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd8:	f7fd fc24 	bl	8002824 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fde:	e00f      	b.n	8005000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7fd fc20 	bl	8002824 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d908      	bls.n	8005000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e146      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
 8004ff2:	bf00      	nop
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	42420000 	.word	0x42420000
 8004ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	4b92      	ldr	r3, [pc, #584]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e9      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a6 	beq.w	8005166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501e:	4b8b      	ldr	r3, [pc, #556]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	4b88      	ldr	r3, [pc, #544]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4a87      	ldr	r2, [pc, #540]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005034:	61d3      	str	r3, [r2, #28]
 8005036:	4b85      	ldr	r3, [pc, #532]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005046:	4b82      	ldr	r3, [pc, #520]	@ (8005250 <HAL_RCC_OscConfig+0x4c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504e:	2b00      	cmp	r3, #0
 8005050:	d118      	bne.n	8005084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005052:	4b7f      	ldr	r3, [pc, #508]	@ (8005250 <HAL_RCC_OscConfig+0x4c8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a7e      	ldr	r2, [pc, #504]	@ (8005250 <HAL_RCC_OscConfig+0x4c8>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505e:	f7fd fbe1 	bl	8002824 <HAL_GetTick>
 8005062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005064:	e008      	b.n	8005078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005066:	f7fd fbdd 	bl	8002824 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b64      	cmp	r3, #100	@ 0x64
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e103      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005078:	4b75      	ldr	r3, [pc, #468]	@ (8005250 <HAL_RCC_OscConfig+0x4c8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f0      	beq.n	8005066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x312>
 800508c:	4b6f      	ldr	r3, [pc, #444]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a6e      	ldr	r2, [pc, #440]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6213      	str	r3, [r2, #32]
 8005098:	e02d      	b.n	80050f6 <HAL_RCC_OscConfig+0x36e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10c      	bne.n	80050bc <HAL_RCC_OscConfig+0x334>
 80050a2:	4b6a      	ldr	r3, [pc, #424]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4a69      	ldr	r2, [pc, #420]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6213      	str	r3, [r2, #32]
 80050ae:	4b67      	ldr	r3, [pc, #412]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	4a66      	ldr	r2, [pc, #408]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050b4:	f023 0304 	bic.w	r3, r3, #4
 80050b8:	6213      	str	r3, [r2, #32]
 80050ba:	e01c      	b.n	80050f6 <HAL_RCC_OscConfig+0x36e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d10c      	bne.n	80050de <HAL_RCC_OscConfig+0x356>
 80050c4:	4b61      	ldr	r3, [pc, #388]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	4a60      	ldr	r2, [pc, #384]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	f043 0304 	orr.w	r3, r3, #4
 80050ce:	6213      	str	r3, [r2, #32]
 80050d0:	4b5e      	ldr	r3, [pc, #376]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4a5d      	ldr	r2, [pc, #372]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6213      	str	r3, [r2, #32]
 80050dc:	e00b      	b.n	80050f6 <HAL_RCC_OscConfig+0x36e>
 80050de:	4b5b      	ldr	r3, [pc, #364]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4a5a      	ldr	r2, [pc, #360]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	6213      	str	r3, [r2, #32]
 80050ea:	4b58      	ldr	r3, [pc, #352]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4a57      	ldr	r2, [pc, #348]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d015      	beq.n	800512a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fe:	f7fd fb91 	bl	8002824 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005104:	e00a      	b.n	800511c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005106:	f7fd fb8d 	bl	8002824 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005114:	4293      	cmp	r3, r2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e0b1      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	4b4b      	ldr	r3, [pc, #300]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ee      	beq.n	8005106 <HAL_RCC_OscConfig+0x37e>
 8005128:	e014      	b.n	8005154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800512a:	f7fd fb7b 	bl	8002824 <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fd fb77 	bl	8002824 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e09b      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005148:	4b40      	ldr	r3, [pc, #256]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ee      	bne.n	8005132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d105      	bne.n	8005166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800515a:	4b3c      	ldr	r3, [pc, #240]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4a3b      	ldr	r2, [pc, #236]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8087 	beq.w	800527e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005170:	4b36      	ldr	r3, [pc, #216]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d061      	beq.n	8005240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d146      	bne.n	8005212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005184:	4b33      	ldr	r3, [pc, #204]	@ (8005254 <HAL_RCC_OscConfig+0x4cc>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518a:	f7fd fb4b 	bl	8002824 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fd fb47 	bl	8002824 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e06d      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a4:	4b29      	ldr	r3, [pc, #164]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b8:	d108      	bne.n	80051cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051ba:	4b24      	ldr	r3, [pc, #144]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	4921      	ldr	r1, [pc, #132]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051cc:	4b1f      	ldr	r3, [pc, #124]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a19      	ldr	r1, [r3, #32]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051dc:	430b      	orrs	r3, r1
 80051de:	491b      	ldr	r1, [pc, #108]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005254 <HAL_RCC_OscConfig+0x4cc>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd fb1b 	bl	8002824 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fd fb17 	bl	8002824 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e03d      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005204:	4b11      	ldr	r3, [pc, #68]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCC_OscConfig+0x46a>
 8005210:	e035      	b.n	800527e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005212:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <HAL_RCC_OscConfig+0x4cc>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fd fb04 	bl	8002824 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd fb00 	bl	8002824 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e026      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005232:	4b06      	ldr	r3, [pc, #24]	@ (800524c <HAL_RCC_OscConfig+0x4c4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x498>
 800523e:	e01e      	b.n	800527e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d107      	bne.n	8005258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e019      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
 800524c:	40021000 	.word	0x40021000
 8005250:	40007000 	.word	0x40007000
 8005254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005258:	4b0b      	ldr	r3, [pc, #44]	@ (8005288 <HAL_RCC_OscConfig+0x500>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	429a      	cmp	r2, r3
 800526a:	d106      	bne.n	800527a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40021000 	.word	0x40021000

0800528c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0d0      	b.n	8005442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a0:	4b6a      	ldr	r3, [pc, #424]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d910      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ae:	4b67      	ldr	r3, [pc, #412]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f023 0207 	bic.w	r2, r3, #7
 80052b6:	4965      	ldr	r1, [pc, #404]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b63      	ldr	r3, [pc, #396]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0b8      	b.n	8005442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d020      	beq.n	800531e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e8:	4b59      	ldr	r3, [pc, #356]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4a58      	ldr	r2, [pc, #352]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 80052ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005300:	4b53      	ldr	r3, [pc, #332]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4a52      	ldr	r2, [pc, #328]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800530a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800530c:	4b50      	ldr	r3, [pc, #320]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	494d      	ldr	r1, [pc, #308]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d040      	beq.n	80053ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d107      	bne.n	8005342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005332:	4b47      	ldr	r3, [pc, #284]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d115      	bne.n	800536a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07f      	b.n	8005442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534a:	4b41      	ldr	r3, [pc, #260]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e073      	b.n	8005442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535a:	4b3d      	ldr	r3, [pc, #244]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e06b      	b.n	8005442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800536a:	4b39      	ldr	r3, [pc, #228]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f023 0203 	bic.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4936      	ldr	r1, [pc, #216]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	4313      	orrs	r3, r2
 800537a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800537c:	f7fd fa52 	bl	8002824 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	e00a      	b.n	800539a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005384:	f7fd fa4e 	bl	8002824 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e053      	b.n	8005442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	4b2d      	ldr	r3, [pc, #180]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 020c 	and.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d1eb      	bne.n	8005384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ac:	4b27      	ldr	r3, [pc, #156]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d210      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b24      	ldr	r3, [pc, #144]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f023 0207 	bic.w	r2, r3, #7
 80053c2:	4922      	ldr	r1, [pc, #136]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ca:	4b20      	ldr	r3, [pc, #128]	@ (800544c <HAL_RCC_ClockConfig+0x1c0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e032      	b.n	8005442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e8:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4916      	ldr	r1, [pc, #88]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005406:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	490e      	ldr	r1, [pc, #56]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800541a:	f000 f821 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 800541e:	4602      	mov	r2, r0
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_RCC_ClockConfig+0x1c4>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	490a      	ldr	r1, [pc, #40]	@ (8005454 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	5ccb      	ldrb	r3, [r1, r3]
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	4a09      	ldr	r2, [pc, #36]	@ (8005458 <HAL_RCC_ClockConfig+0x1cc>)
 8005434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <HAL_RCC_ClockConfig+0x1d0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7fd f9b0 	bl	80027a0 <HAL_InitTick>

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40022000 	.word	0x40022000
 8005450:	40021000 	.word	0x40021000
 8005454:	08008f00 	.word	0x08008f00
 8005458:	20000014 	.word	0x20000014
 800545c:	20000018 	.word	0x20000018

08005460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005460:	b480      	push	{r7}
 8005462:	b087      	sub	sp, #28
 8005464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800547a:	4b1e      	ldr	r3, [pc, #120]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b04      	cmp	r3, #4
 8005488:	d002      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x30>
 800548a:	2b08      	cmp	r3, #8
 800548c:	d003      	beq.n	8005496 <HAL_RCC_GetSysClockFreq+0x36>
 800548e:	e027      	b.n	80054e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005492:	613b      	str	r3, [r7, #16]
      break;
 8005494:	e027      	b.n	80054e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	0c9b      	lsrs	r3, r3, #18
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	4a17      	ldr	r2, [pc, #92]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80054a0:	5cd3      	ldrb	r3, [r2, r3]
 80054a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054ae:	4b11      	ldr	r3, [pc, #68]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	0c5b      	lsrs	r3, r3, #17
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	4a11      	ldr	r2, [pc, #68]	@ (8005500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054ba:	5cd3      	ldrb	r3, [r2, r3]
 80054bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a0d      	ldr	r2, [pc, #52]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80054c2:	fb03 f202 	mul.w	r2, r3, r2
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e004      	b.n	80054da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80054d4:	fb02 f303 	mul.w	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	613b      	str	r3, [r7, #16]
      break;
 80054de:	e002      	b.n	80054e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054e0:	4b05      	ldr	r3, [pc, #20]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80054e2:	613b      	str	r3, [r7, #16]
      break;
 80054e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054e6:	693b      	ldr	r3, [r7, #16]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40021000 	.word	0x40021000
 80054f8:	007a1200 	.word	0x007a1200
 80054fc:	08008f18 	.word	0x08008f18
 8005500:	08008f28 	.word	0x08008f28
 8005504:	003d0900 	.word	0x003d0900

08005508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800550c:	4b02      	ldr	r3, [pc, #8]	@ (8005518 <HAL_RCC_GetHCLKFreq+0x10>)
 800550e:	681b      	ldr	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	20000014 	.word	0x20000014

0800551c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005520:	f7ff fff2 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b05      	ldr	r3, [pc, #20]	@ (800553c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4903      	ldr	r1, [pc, #12]	@ (8005540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000
 8005540:	08008f10 	.word	0x08008f10

08005544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005548:	f7ff ffde 	bl	8005508 <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	0adb      	lsrs	r3, r3, #11
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4903      	ldr	r1, [pc, #12]	@ (8005568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000
 8005568:	08008f10 	.word	0x08008f10

0800556c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005574:	4b0a      	ldr	r3, [pc, #40]	@ (80055a0 <RCC_Delay+0x34>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a0a      	ldr	r2, [pc, #40]	@ (80055a4 <RCC_Delay+0x38>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	0a5b      	lsrs	r3, r3, #9
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	fb02 f303 	mul.w	r3, r2, r3
 8005586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005588:	bf00      	nop
  }
  while (Delay --);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	60fa      	str	r2, [r7, #12]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f9      	bne.n	8005588 <RCC_Delay+0x1c>
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr
 80055a0:	20000014 	.word	0x20000014
 80055a4:	10624dd3 	.word	0x10624dd3

080055a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d07d      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055c4:	2300      	movs	r3, #0
 80055c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10d      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055de:	61d3      	str	r3, [r2, #28]
 80055e0:	4b49      	ldr	r3, [pc, #292]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ec:	2301      	movs	r3, #1
 80055ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f0:	4b46      	ldr	r3, [pc, #280]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d118      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fc:	4b43      	ldr	r3, [pc, #268]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a42      	ldr	r2, [pc, #264]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005608:	f7fd f90c 	bl	8002824 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560e:	e008      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005610:	f7fd f908 	bl	8002824 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	@ 0x64
 800561c:	d901      	bls.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e06d      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005622:	4b3a      	ldr	r3, [pc, #232]	@ (800570c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800562e:	4b36      	ldr	r3, [pc, #216]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d02e      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	429a      	cmp	r2, r3
 800564a:	d027      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800564c:	4b2e      	ldr	r3, [pc, #184]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005654:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005656:	4b2e      	ldr	r3, [pc, #184]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800565c:	4b2c      	ldr	r3, [pc, #176]	@ (8005710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005662:	4a29      	ldr	r2, [pc, #164]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d014      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005672:	f7fd f8d7 	bl	8002824 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005678:	e00a      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd f8d3 	bl	8002824 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e036      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005690:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ee      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569c:	4b1a      	ldr	r3, [pc, #104]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4917      	ldr	r1, [pc, #92]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d105      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b4:	4b14      	ldr	r3, [pc, #80]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	4a13      	ldr	r2, [pc, #76]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	490b      	ldr	r1, [pc, #44]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0310 	and.w	r3, r3, #16
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056ea:	4b07      	ldr	r3, [pc, #28]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4904      	ldr	r1, [pc, #16]	@ (8005708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
 8005710:	42420440 	.word	0x42420440

08005714 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e041      	b.n	80057aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fc fe38 	bl	80023b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f000 f8f0 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e0ae      	b.n	8005930 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	f200 809f 	bhi.w	8005920 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057e2:	a201      	add	r2, pc, #4	@ (adr r2, 80057e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	08005921 	.word	0x08005921
 80057f0:	08005921 	.word	0x08005921
 80057f4:	08005921 	.word	0x08005921
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	08005921 	.word	0x08005921
 8005800:	08005921 	.word	0x08005921
 8005804:	08005921 	.word	0x08005921
 8005808:	0800589f 	.word	0x0800589f
 800580c:	08005921 	.word	0x08005921
 8005810:	08005921 	.word	0x08005921
 8005814:	08005921 	.word	0x08005921
 8005818:	080058df 	.word	0x080058df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 f8f6 	bl	8005a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6999      	ldr	r1, [r3, #24]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	619a      	str	r2, [r3, #24]
      break;
 800585a:	e064      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 f93c 	bl	8005ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6999      	ldr	r1, [r3, #24]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	619a      	str	r2, [r3, #24]
      break;
 800589c:	e043      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f985 	bl	8005bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0208 	orr.w	r2, r2, #8
 80058b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69da      	ldr	r2, [r3, #28]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0204 	bic.w	r2, r2, #4
 80058c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	61da      	str	r2, [r3, #28]
      break;
 80058dc:	e023      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f9cf 	bl	8005c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69da      	ldr	r2, [r3, #28]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69da      	ldr	r2, [r3, #28]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	021a      	lsls	r2, r3, #8
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	61da      	str	r2, [r3, #28]
      break;
 800591e:	e002      	b.n	8005926 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	75fb      	strb	r3, [r7, #23]
      break;
 8005924:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a08 <TIM_Base_SetConfig+0xd0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00b      	beq.n	8005968 <TIM_Base_SetConfig+0x30>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005956:	d007      	beq.n	8005968 <TIM_Base_SetConfig+0x30>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a2c      	ldr	r2, [pc, #176]	@ (8005a0c <TIM_Base_SetConfig+0xd4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0x30>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a2b      	ldr	r2, [pc, #172]	@ (8005a10 <TIM_Base_SetConfig+0xd8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d108      	bne.n	800597a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a22      	ldr	r2, [pc, #136]	@ (8005a08 <TIM_Base_SetConfig+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00b      	beq.n	800599a <TIM_Base_SetConfig+0x62>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005988:	d007      	beq.n	800599a <TIM_Base_SetConfig+0x62>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a0c <TIM_Base_SetConfig+0xd4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_Base_SetConfig+0x62>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1e      	ldr	r2, [pc, #120]	@ (8005a10 <TIM_Base_SetConfig+0xd8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d108      	bne.n	80059ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005a08 <TIM_Base_SetConfig+0xd0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d103      	bne.n	80059e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f023 0201 	bic.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]
  }
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800

08005a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f023 0201 	bic.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 0302 	bic.w	r3, r3, #2
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005adc <TIM_OC1_SetConfig+0xc8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10c      	bne.n	8005a8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f023 0308 	bic.w	r3, r3, #8
 8005a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f023 0304 	bic.w	r3, r3, #4
 8005a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <TIM_OC1_SetConfig+0xc8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00

08005ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f023 0210 	bic.w	r2, r3, #16
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	021b      	lsls	r3, r3, #8
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0320 	bic.w	r3, r3, #32
 8005b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb0 <TIM_OC2_SetConfig+0xd0>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d10d      	bne.n	8005b5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a14      	ldr	r2, [pc, #80]	@ (8005bb0 <TIM_OC2_SetConfig+0xd0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d113      	bne.n	8005b8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr
 8005bb0:	40012c00 	.word	0x40012c00

08005bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0303 	bic.w	r3, r3, #3
 8005bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c84 <TIM_OC3_SetConfig+0xd0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10d      	bne.n	8005c2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a14      	ldr	r2, [pc, #80]	@ (8005c84 <TIM_OC3_SetConfig+0xd0>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d113      	bne.n	8005c5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	621a      	str	r2, [r3, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00

08005c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	031b      	lsls	r3, r3, #12
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8005d20 <TIM_OC4_SetConfig+0x98>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d109      	bne.n	8005cfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	019b      	lsls	r3, r3, #6
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr
 8005d20:	40012c00 	.word	0x40012c00

08005d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e046      	b.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00e      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d88:	d009      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a10      	ldr	r2, [pc, #64]	@ (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d10c      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800

08005de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e042      	b.n	8005e78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc fb36 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	@ 0x24
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f82b 	bl	8005e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005eba:	f023 030c 	bic.w	r3, r3, #12
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f94 <UART_SetConfig+0x114>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d103      	bne.n	8005ef0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7ff fb2c 	bl	8005544 <HAL_RCC_GetPCLK2Freq>
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	e002      	b.n	8005ef6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ef0:	f7ff fb14 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 8005ef4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009a      	lsls	r2, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0c:	4a22      	ldr	r2, [pc, #136]	@ (8005f98 <UART_SetConfig+0x118>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	0119      	lsls	r1, r3, #4
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009a      	lsls	r2, r3, #2
 8005f20:	441a      	add	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f98 <UART_SetConfig+0x118>)
 8005f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	2064      	movs	r0, #100	@ 0x64
 8005f36:	fb00 f303 	mul.w	r3, r0, r3
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	3332      	adds	r3, #50	@ 0x32
 8005f40:	4a15      	ldr	r2, [pc, #84]	@ (8005f98 <UART_SetConfig+0x118>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f4c:	4419      	add	r1, r3
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009a      	lsls	r2, r3, #2
 8005f58:	441a      	add	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f64:	4b0c      	ldr	r3, [pc, #48]	@ (8005f98 <UART_SetConfig+0x118>)
 8005f66:	fba3 0302 	umull	r0, r3, r3, r2
 8005f6a:	095b      	lsrs	r3, r3, #5
 8005f6c:	2064      	movs	r0, #100	@ 0x64
 8005f6e:	fb00 f303 	mul.w	r3, r0, r3
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	3332      	adds	r3, #50	@ 0x32
 8005f78:	4a07      	ldr	r2, [pc, #28]	@ (8005f98 <UART_SetConfig+0x118>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	f003 020f 	and.w	r2, r3, #15
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	440a      	add	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40013800 	.word	0x40013800
 8005f98:	51eb851f 	.word	0x51eb851f

08005f9c <__cvt>:
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa2:	461d      	mov	r5, r3
 8005fa4:	bfbb      	ittet	lt
 8005fa6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005faa:	461d      	movlt	r5, r3
 8005fac:	2300      	movge	r3, #0
 8005fae:	232d      	movlt	r3, #45	@ 0x2d
 8005fb0:	b088      	sub	sp, #32
 8005fb2:	4614      	mov	r4, r2
 8005fb4:	bfb8      	it	lt
 8005fb6:	4614      	movlt	r4, r2
 8005fb8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005fba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005fbc:	7013      	strb	r3, [r2, #0]
 8005fbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fc0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005fc4:	f023 0820 	bic.w	r8, r3, #32
 8005fc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fcc:	d005      	beq.n	8005fda <__cvt+0x3e>
 8005fce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fd2:	d100      	bne.n	8005fd6 <__cvt+0x3a>
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e000      	b.n	8005fdc <__cvt+0x40>
 8005fda:	2303      	movs	r3, #3
 8005fdc:	aa07      	add	r2, sp, #28
 8005fde:	9204      	str	r2, [sp, #16]
 8005fe0:	aa06      	add	r2, sp, #24
 8005fe2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005fe6:	e9cd 3600 	strd	r3, r6, [sp]
 8005fea:	4622      	mov	r2, r4
 8005fec:	462b      	mov	r3, r5
 8005fee:	f000 fddf 	bl	8006bb0 <_dtoa_r>
 8005ff2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	d119      	bne.n	800602e <__cvt+0x92>
 8005ffa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ffc:	07db      	lsls	r3, r3, #31
 8005ffe:	d50e      	bpl.n	800601e <__cvt+0x82>
 8006000:	eb00 0906 	add.w	r9, r0, r6
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa fccc 	bl	80009a8 <__aeabi_dcmpeq>
 8006010:	b108      	cbz	r0, 8006016 <__cvt+0x7a>
 8006012:	f8cd 901c 	str.w	r9, [sp, #28]
 8006016:	2230      	movs	r2, #48	@ 0x30
 8006018:	9b07      	ldr	r3, [sp, #28]
 800601a:	454b      	cmp	r3, r9
 800601c:	d31e      	bcc.n	800605c <__cvt+0xc0>
 800601e:	4638      	mov	r0, r7
 8006020:	9b07      	ldr	r3, [sp, #28]
 8006022:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006024:	1bdb      	subs	r3, r3, r7
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	b008      	add	sp, #32
 800602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006032:	eb00 0906 	add.w	r9, r0, r6
 8006036:	d1e5      	bne.n	8006004 <__cvt+0x68>
 8006038:	7803      	ldrb	r3, [r0, #0]
 800603a:	2b30      	cmp	r3, #48	@ 0x30
 800603c:	d10a      	bne.n	8006054 <__cvt+0xb8>
 800603e:	2200      	movs	r2, #0
 8006040:	2300      	movs	r3, #0
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f7fa fcaf 	bl	80009a8 <__aeabi_dcmpeq>
 800604a:	b918      	cbnz	r0, 8006054 <__cvt+0xb8>
 800604c:	f1c6 0601 	rsb	r6, r6, #1
 8006050:	f8ca 6000 	str.w	r6, [sl]
 8006054:	f8da 3000 	ldr.w	r3, [sl]
 8006058:	4499      	add	r9, r3
 800605a:	e7d3      	b.n	8006004 <__cvt+0x68>
 800605c:	1c59      	adds	r1, r3, #1
 800605e:	9107      	str	r1, [sp, #28]
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	e7d9      	b.n	8006018 <__cvt+0x7c>

08006064 <__exponent>:
 8006064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006066:	2900      	cmp	r1, #0
 8006068:	bfb6      	itet	lt
 800606a:	232d      	movlt	r3, #45	@ 0x2d
 800606c:	232b      	movge	r3, #43	@ 0x2b
 800606e:	4249      	neglt	r1, r1
 8006070:	2909      	cmp	r1, #9
 8006072:	7002      	strb	r2, [r0, #0]
 8006074:	7043      	strb	r3, [r0, #1]
 8006076:	dd29      	ble.n	80060cc <__exponent+0x68>
 8006078:	f10d 0307 	add.w	r3, sp, #7
 800607c:	461d      	mov	r5, r3
 800607e:	270a      	movs	r7, #10
 8006080:	fbb1 f6f7 	udiv	r6, r1, r7
 8006084:	461a      	mov	r2, r3
 8006086:	fb07 1416 	mls	r4, r7, r6, r1
 800608a:	3430      	adds	r4, #48	@ 0x30
 800608c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006090:	460c      	mov	r4, r1
 8006092:	2c63      	cmp	r4, #99	@ 0x63
 8006094:	4631      	mov	r1, r6
 8006096:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800609a:	dcf1      	bgt.n	8006080 <__exponent+0x1c>
 800609c:	3130      	adds	r1, #48	@ 0x30
 800609e:	1e94      	subs	r4, r2, #2
 80060a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060a4:	4623      	mov	r3, r4
 80060a6:	1c41      	adds	r1, r0, #1
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	d30a      	bcc.n	80060c2 <__exponent+0x5e>
 80060ac:	f10d 0309 	add.w	r3, sp, #9
 80060b0:	1a9b      	subs	r3, r3, r2
 80060b2:	42ac      	cmp	r4, r5
 80060b4:	bf88      	it	hi
 80060b6:	2300      	movhi	r3, #0
 80060b8:	3302      	adds	r3, #2
 80060ba:	4403      	add	r3, r0
 80060bc:	1a18      	subs	r0, r3, r0
 80060be:	b003      	add	sp, #12
 80060c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060ca:	e7ed      	b.n	80060a8 <__exponent+0x44>
 80060cc:	2330      	movs	r3, #48	@ 0x30
 80060ce:	3130      	adds	r1, #48	@ 0x30
 80060d0:	7083      	strb	r3, [r0, #2]
 80060d2:	70c1      	strb	r1, [r0, #3]
 80060d4:	1d03      	adds	r3, r0, #4
 80060d6:	e7f1      	b.n	80060bc <__exponent+0x58>

080060d8 <_printf_float>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	b091      	sub	sp, #68	@ 0x44
 80060de:	460c      	mov	r4, r1
 80060e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80060e4:	4616      	mov	r6, r2
 80060e6:	461f      	mov	r7, r3
 80060e8:	4605      	mov	r5, r0
 80060ea:	f000 fc9d 	bl	8006a28 <_localeconv_r>
 80060ee:	6803      	ldr	r3, [r0, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	9308      	str	r3, [sp, #32]
 80060f4:	f7fa f82c 	bl	8000150 <strlen>
 80060f8:	2300      	movs	r3, #0
 80060fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80060fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006100:	9009      	str	r0, [sp, #36]	@ 0x24
 8006102:	3307      	adds	r3, #7
 8006104:	f023 0307 	bic.w	r3, r3, #7
 8006108:	f103 0208 	add.w	r2, r3, #8
 800610c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006110:	f8d4 b000 	ldr.w	fp, [r4]
 8006114:	f8c8 2000 	str.w	r2, [r8]
 8006118:	e9d3 8900 	ldrd	r8, r9, [r3]
 800611c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006122:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006126:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800612a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800612e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006132:	4b9c      	ldr	r3, [pc, #624]	@ (80063a4 <_printf_float+0x2cc>)
 8006134:	f7fa fc6a 	bl	8000a0c <__aeabi_dcmpun>
 8006138:	bb70      	cbnz	r0, 8006198 <_printf_float+0xc0>
 800613a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800613e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006142:	4b98      	ldr	r3, [pc, #608]	@ (80063a4 <_printf_float+0x2cc>)
 8006144:	f7fa fc44 	bl	80009d0 <__aeabi_dcmple>
 8006148:	bb30      	cbnz	r0, 8006198 <_printf_float+0xc0>
 800614a:	2200      	movs	r2, #0
 800614c:	2300      	movs	r3, #0
 800614e:	4640      	mov	r0, r8
 8006150:	4649      	mov	r1, r9
 8006152:	f7fa fc33 	bl	80009bc <__aeabi_dcmplt>
 8006156:	b110      	cbz	r0, 800615e <_printf_float+0x86>
 8006158:	232d      	movs	r3, #45	@ 0x2d
 800615a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800615e:	4a92      	ldr	r2, [pc, #584]	@ (80063a8 <_printf_float+0x2d0>)
 8006160:	4b92      	ldr	r3, [pc, #584]	@ (80063ac <_printf_float+0x2d4>)
 8006162:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006166:	bf94      	ite	ls
 8006168:	4690      	movls	r8, r2
 800616a:	4698      	movhi	r8, r3
 800616c:	2303      	movs	r3, #3
 800616e:	f04f 0900 	mov.w	r9, #0
 8006172:	6123      	str	r3, [r4, #16]
 8006174:	f02b 0304 	bic.w	r3, fp, #4
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	4633      	mov	r3, r6
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	9700      	str	r7, [sp, #0]
 8006182:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006184:	f000 f9d4 	bl	8006530 <_printf_common>
 8006188:	3001      	adds	r0, #1
 800618a:	f040 8090 	bne.w	80062ae <_printf_float+0x1d6>
 800618e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006192:	b011      	add	sp, #68	@ 0x44
 8006194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	4640      	mov	r0, r8
 800619e:	4649      	mov	r1, r9
 80061a0:	f7fa fc34 	bl	8000a0c <__aeabi_dcmpun>
 80061a4:	b148      	cbz	r0, 80061ba <_printf_float+0xe2>
 80061a6:	464b      	mov	r3, r9
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfb8      	it	lt
 80061ac:	232d      	movlt	r3, #45	@ 0x2d
 80061ae:	4a80      	ldr	r2, [pc, #512]	@ (80063b0 <_printf_float+0x2d8>)
 80061b0:	bfb8      	it	lt
 80061b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061b6:	4b7f      	ldr	r3, [pc, #508]	@ (80063b4 <_printf_float+0x2dc>)
 80061b8:	e7d3      	b.n	8006162 <_printf_float+0x8a>
 80061ba:	6863      	ldr	r3, [r4, #4]
 80061bc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	d13f      	bne.n	8006244 <_printf_float+0x16c>
 80061c4:	2306      	movs	r3, #6
 80061c6:	6063      	str	r3, [r4, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80061ce:	6023      	str	r3, [r4, #0]
 80061d0:	9206      	str	r2, [sp, #24]
 80061d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80061d4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80061d8:	aa0d      	add	r2, sp, #52	@ 0x34
 80061da:	9203      	str	r2, [sp, #12]
 80061dc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80061e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	4642      	mov	r2, r8
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	4628      	mov	r0, r5
 80061ec:	464b      	mov	r3, r9
 80061ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80061f0:	f7ff fed4 	bl	8005f9c <__cvt>
 80061f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80061f6:	4680      	mov	r8, r0
 80061f8:	2947      	cmp	r1, #71	@ 0x47
 80061fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80061fc:	d128      	bne.n	8006250 <_printf_float+0x178>
 80061fe:	1cc8      	adds	r0, r1, #3
 8006200:	db02      	blt.n	8006208 <_printf_float+0x130>
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	4299      	cmp	r1, r3
 8006206:	dd40      	ble.n	800628a <_printf_float+0x1b2>
 8006208:	f1aa 0a02 	sub.w	sl, sl, #2
 800620c:	fa5f fa8a 	uxtb.w	sl, sl
 8006210:	4652      	mov	r2, sl
 8006212:	3901      	subs	r1, #1
 8006214:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006218:	910d      	str	r1, [sp, #52]	@ 0x34
 800621a:	f7ff ff23 	bl	8006064 <__exponent>
 800621e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006220:	4681      	mov	r9, r0
 8006222:	1813      	adds	r3, r2, r0
 8006224:	2a01      	cmp	r2, #1
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	dc02      	bgt.n	8006230 <_printf_float+0x158>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	07d2      	lsls	r2, r2, #31
 800622e:	d501      	bpl.n	8006234 <_printf_float+0x15c>
 8006230:	3301      	adds	r3, #1
 8006232:	6123      	str	r3, [r4, #16]
 8006234:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006238:	2b00      	cmp	r3, #0
 800623a:	d09e      	beq.n	800617a <_printf_float+0xa2>
 800623c:	232d      	movs	r3, #45	@ 0x2d
 800623e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006242:	e79a      	b.n	800617a <_printf_float+0xa2>
 8006244:	2947      	cmp	r1, #71	@ 0x47
 8006246:	d1bf      	bne.n	80061c8 <_printf_float+0xf0>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1bd      	bne.n	80061c8 <_printf_float+0xf0>
 800624c:	2301      	movs	r3, #1
 800624e:	e7ba      	b.n	80061c6 <_printf_float+0xee>
 8006250:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006254:	d9dc      	bls.n	8006210 <_printf_float+0x138>
 8006256:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800625a:	d118      	bne.n	800628e <_printf_float+0x1b6>
 800625c:	2900      	cmp	r1, #0
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	dd0b      	ble.n	800627a <_printf_float+0x1a2>
 8006262:	6121      	str	r1, [r4, #16]
 8006264:	b913      	cbnz	r3, 800626c <_printf_float+0x194>
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	07d0      	lsls	r0, r2, #31
 800626a:	d502      	bpl.n	8006272 <_printf_float+0x19a>
 800626c:	3301      	adds	r3, #1
 800626e:	440b      	add	r3, r1
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	f04f 0900 	mov.w	r9, #0
 8006276:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006278:	e7dc      	b.n	8006234 <_printf_float+0x15c>
 800627a:	b913      	cbnz	r3, 8006282 <_printf_float+0x1aa>
 800627c:	6822      	ldr	r2, [r4, #0]
 800627e:	07d2      	lsls	r2, r2, #31
 8006280:	d501      	bpl.n	8006286 <_printf_float+0x1ae>
 8006282:	3302      	adds	r3, #2
 8006284:	e7f4      	b.n	8006270 <_printf_float+0x198>
 8006286:	2301      	movs	r3, #1
 8006288:	e7f2      	b.n	8006270 <_printf_float+0x198>
 800628a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800628e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006290:	4299      	cmp	r1, r3
 8006292:	db05      	blt.n	80062a0 <_printf_float+0x1c8>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	6121      	str	r1, [r4, #16]
 8006298:	07d8      	lsls	r0, r3, #31
 800629a:	d5ea      	bpl.n	8006272 <_printf_float+0x19a>
 800629c:	1c4b      	adds	r3, r1, #1
 800629e:	e7e7      	b.n	8006270 <_printf_float+0x198>
 80062a0:	2900      	cmp	r1, #0
 80062a2:	bfcc      	ite	gt
 80062a4:	2201      	movgt	r2, #1
 80062a6:	f1c1 0202 	rsble	r2, r1, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	e7e0      	b.n	8006270 <_printf_float+0x198>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	055a      	lsls	r2, r3, #21
 80062b2:	d407      	bmi.n	80062c4 <_printf_float+0x1ec>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	4642      	mov	r2, r8
 80062b8:	4631      	mov	r1, r6
 80062ba:	4628      	mov	r0, r5
 80062bc:	47b8      	blx	r7
 80062be:	3001      	adds	r0, #1
 80062c0:	d12b      	bne.n	800631a <_printf_float+0x242>
 80062c2:	e764      	b.n	800618e <_printf_float+0xb6>
 80062c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062c8:	f240 80dc 	bls.w	8006484 <_printf_float+0x3ac>
 80062cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062d0:	2200      	movs	r2, #0
 80062d2:	2300      	movs	r3, #0
 80062d4:	f7fa fb68 	bl	80009a8 <__aeabi_dcmpeq>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d033      	beq.n	8006344 <_printf_float+0x26c>
 80062dc:	2301      	movs	r3, #1
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	4a35      	ldr	r2, [pc, #212]	@ (80063b8 <_printf_float+0x2e0>)
 80062e4:	47b8      	blx	r7
 80062e6:	3001      	adds	r0, #1
 80062e8:	f43f af51 	beq.w	800618e <_printf_float+0xb6>
 80062ec:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80062f0:	4543      	cmp	r3, r8
 80062f2:	db02      	blt.n	80062fa <_printf_float+0x222>
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	07d8      	lsls	r0, r3, #31
 80062f8:	d50f      	bpl.n	800631a <_printf_float+0x242>
 80062fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	f43f af42 	beq.w	800618e <_printf_float+0xb6>
 800630a:	f04f 0900 	mov.w	r9, #0
 800630e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006312:	f104 0a1a 	add.w	sl, r4, #26
 8006316:	45c8      	cmp	r8, r9
 8006318:	dc09      	bgt.n	800632e <_printf_float+0x256>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	079b      	lsls	r3, r3, #30
 800631e:	f100 8102 	bmi.w	8006526 <_printf_float+0x44e>
 8006322:	68e0      	ldr	r0, [r4, #12]
 8006324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006326:	4298      	cmp	r0, r3
 8006328:	bfb8      	it	lt
 800632a:	4618      	movlt	r0, r3
 800632c:	e731      	b.n	8006192 <_printf_float+0xba>
 800632e:	2301      	movs	r3, #1
 8006330:	4652      	mov	r2, sl
 8006332:	4631      	mov	r1, r6
 8006334:	4628      	mov	r0, r5
 8006336:	47b8      	blx	r7
 8006338:	3001      	adds	r0, #1
 800633a:	f43f af28 	beq.w	800618e <_printf_float+0xb6>
 800633e:	f109 0901 	add.w	r9, r9, #1
 8006342:	e7e8      	b.n	8006316 <_printf_float+0x23e>
 8006344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006346:	2b00      	cmp	r3, #0
 8006348:	dc38      	bgt.n	80063bc <_printf_float+0x2e4>
 800634a:	2301      	movs	r3, #1
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	4a19      	ldr	r2, [pc, #100]	@ (80063b8 <_printf_float+0x2e0>)
 8006352:	47b8      	blx	r7
 8006354:	3001      	adds	r0, #1
 8006356:	f43f af1a 	beq.w	800618e <_printf_float+0xb6>
 800635a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800635e:	ea59 0303 	orrs.w	r3, r9, r3
 8006362:	d102      	bne.n	800636a <_printf_float+0x292>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	d5d7      	bpl.n	800631a <_printf_float+0x242>
 800636a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	f43f af0a 	beq.w	800618e <_printf_float+0xb6>
 800637a:	f04f 0a00 	mov.w	sl, #0
 800637e:	f104 0b1a 	add.w	fp, r4, #26
 8006382:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006384:	425b      	negs	r3, r3
 8006386:	4553      	cmp	r3, sl
 8006388:	dc01      	bgt.n	800638e <_printf_float+0x2b6>
 800638a:	464b      	mov	r3, r9
 800638c:	e793      	b.n	80062b6 <_printf_float+0x1de>
 800638e:	2301      	movs	r3, #1
 8006390:	465a      	mov	r2, fp
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	f43f aef8 	beq.w	800618e <_printf_float+0xb6>
 800639e:	f10a 0a01 	add.w	sl, sl, #1
 80063a2:	e7ee      	b.n	8006382 <_printf_float+0x2aa>
 80063a4:	7fefffff 	.word	0x7fefffff
 80063a8:	08008f2a 	.word	0x08008f2a
 80063ac:	08008f2e 	.word	0x08008f2e
 80063b0:	08008f32 	.word	0x08008f32
 80063b4:	08008f36 	.word	0x08008f36
 80063b8:	08008f3a 	.word	0x08008f3a
 80063bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063be:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80063c2:	4553      	cmp	r3, sl
 80063c4:	bfa8      	it	ge
 80063c6:	4653      	movge	r3, sl
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	4699      	mov	r9, r3
 80063cc:	dc36      	bgt.n	800643c <_printf_float+0x364>
 80063ce:	f04f 0b00 	mov.w	fp, #0
 80063d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063d6:	f104 021a 	add.w	r2, r4, #26
 80063da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80063de:	eba3 0309 	sub.w	r3, r3, r9
 80063e2:	455b      	cmp	r3, fp
 80063e4:	dc31      	bgt.n	800644a <_printf_float+0x372>
 80063e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063e8:	459a      	cmp	sl, r3
 80063ea:	dc3a      	bgt.n	8006462 <_printf_float+0x38a>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	07da      	lsls	r2, r3, #31
 80063f0:	d437      	bmi.n	8006462 <_printf_float+0x38a>
 80063f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063f4:	ebaa 0903 	sub.w	r9, sl, r3
 80063f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063fa:	ebaa 0303 	sub.w	r3, sl, r3
 80063fe:	4599      	cmp	r9, r3
 8006400:	bfa8      	it	ge
 8006402:	4699      	movge	r9, r3
 8006404:	f1b9 0f00 	cmp.w	r9, #0
 8006408:	dc33      	bgt.n	8006472 <_printf_float+0x39a>
 800640a:	f04f 0800 	mov.w	r8, #0
 800640e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006412:	f104 0b1a 	add.w	fp, r4, #26
 8006416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006418:	ebaa 0303 	sub.w	r3, sl, r3
 800641c:	eba3 0309 	sub.w	r3, r3, r9
 8006420:	4543      	cmp	r3, r8
 8006422:	f77f af7a 	ble.w	800631a <_printf_float+0x242>
 8006426:	2301      	movs	r3, #1
 8006428:	465a      	mov	r2, fp
 800642a:	4631      	mov	r1, r6
 800642c:	4628      	mov	r0, r5
 800642e:	47b8      	blx	r7
 8006430:	3001      	adds	r0, #1
 8006432:	f43f aeac 	beq.w	800618e <_printf_float+0xb6>
 8006436:	f108 0801 	add.w	r8, r8, #1
 800643a:	e7ec      	b.n	8006416 <_printf_float+0x33e>
 800643c:	4642      	mov	r2, r8
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	d1c2      	bne.n	80063ce <_printf_float+0x2f6>
 8006448:	e6a1      	b.n	800618e <_printf_float+0xb6>
 800644a:	2301      	movs	r3, #1
 800644c:	4631      	mov	r1, r6
 800644e:	4628      	mov	r0, r5
 8006450:	920a      	str	r2, [sp, #40]	@ 0x28
 8006452:	47b8      	blx	r7
 8006454:	3001      	adds	r0, #1
 8006456:	f43f ae9a 	beq.w	800618e <_printf_float+0xb6>
 800645a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800645c:	f10b 0b01 	add.w	fp, fp, #1
 8006460:	e7bb      	b.n	80063da <_printf_float+0x302>
 8006462:	4631      	mov	r1, r6
 8006464:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	d1c0      	bne.n	80063f2 <_printf_float+0x31a>
 8006470:	e68d      	b.n	800618e <_printf_float+0xb6>
 8006472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006474:	464b      	mov	r3, r9
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	4442      	add	r2, r8
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	d1c3      	bne.n	800640a <_printf_float+0x332>
 8006482:	e684      	b.n	800618e <_printf_float+0xb6>
 8006484:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006488:	f1ba 0f01 	cmp.w	sl, #1
 800648c:	dc01      	bgt.n	8006492 <_printf_float+0x3ba>
 800648e:	07db      	lsls	r3, r3, #31
 8006490:	d536      	bpl.n	8006500 <_printf_float+0x428>
 8006492:	2301      	movs	r3, #1
 8006494:	4642      	mov	r2, r8
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	f43f ae76 	beq.w	800618e <_printf_float+0xb6>
 80064a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f ae6e 	beq.w	800618e <_printf_float+0xb6>
 80064b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064b6:	2200      	movs	r2, #0
 80064b8:	2300      	movs	r3, #0
 80064ba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80064be:	f7fa fa73 	bl	80009a8 <__aeabi_dcmpeq>
 80064c2:	b9c0      	cbnz	r0, 80064f6 <_printf_float+0x41e>
 80064c4:	4653      	mov	r3, sl
 80064c6:	f108 0201 	add.w	r2, r8, #1
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	d10c      	bne.n	80064ee <_printf_float+0x416>
 80064d4:	e65b      	b.n	800618e <_printf_float+0xb6>
 80064d6:	2301      	movs	r3, #1
 80064d8:	465a      	mov	r2, fp
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae54 	beq.w	800618e <_printf_float+0xb6>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	45d0      	cmp	r8, sl
 80064ec:	dbf3      	blt.n	80064d6 <_printf_float+0x3fe>
 80064ee:	464b      	mov	r3, r9
 80064f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064f4:	e6e0      	b.n	80062b8 <_printf_float+0x1e0>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0b1a 	add.w	fp, r4, #26
 80064fe:	e7f4      	b.n	80064ea <_printf_float+0x412>
 8006500:	2301      	movs	r3, #1
 8006502:	4642      	mov	r2, r8
 8006504:	e7e1      	b.n	80064ca <_printf_float+0x3f2>
 8006506:	2301      	movs	r3, #1
 8006508:	464a      	mov	r2, r9
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	f43f ae3c 	beq.w	800618e <_printf_float+0xb6>
 8006516:	f108 0801 	add.w	r8, r8, #1
 800651a:	68e3      	ldr	r3, [r4, #12]
 800651c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800651e:	1a5b      	subs	r3, r3, r1
 8006520:	4543      	cmp	r3, r8
 8006522:	dcf0      	bgt.n	8006506 <_printf_float+0x42e>
 8006524:	e6fd      	b.n	8006322 <_printf_float+0x24a>
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	f104 0919 	add.w	r9, r4, #25
 800652e:	e7f4      	b.n	800651a <_printf_float+0x442>

08006530 <_printf_common>:
 8006530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	4616      	mov	r6, r2
 8006536:	4698      	mov	r8, r3
 8006538:	688a      	ldr	r2, [r1, #8]
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	4607      	mov	r7, r0
 800653e:	4293      	cmp	r3, r2
 8006540:	bfb8      	it	lt
 8006542:	4613      	movlt	r3, r2
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800654a:	460c      	mov	r4, r1
 800654c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006550:	b10a      	cbz	r2, 8006556 <_printf_common+0x26>
 8006552:	3301      	adds	r3, #1
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	0699      	lsls	r1, r3, #26
 800655a:	bf42      	ittt	mi
 800655c:	6833      	ldrmi	r3, [r6, #0]
 800655e:	3302      	addmi	r3, #2
 8006560:	6033      	strmi	r3, [r6, #0]
 8006562:	6825      	ldr	r5, [r4, #0]
 8006564:	f015 0506 	ands.w	r5, r5, #6
 8006568:	d106      	bne.n	8006578 <_printf_common+0x48>
 800656a:	f104 0a19 	add.w	sl, r4, #25
 800656e:	68e3      	ldr	r3, [r4, #12]
 8006570:	6832      	ldr	r2, [r6, #0]
 8006572:	1a9b      	subs	r3, r3, r2
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc2b      	bgt.n	80065d0 <_printf_common+0xa0>
 8006578:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	3b00      	subs	r3, #0
 8006580:	bf18      	it	ne
 8006582:	2301      	movne	r3, #1
 8006584:	0692      	lsls	r2, r2, #26
 8006586:	d430      	bmi.n	80065ea <_printf_common+0xba>
 8006588:	4641      	mov	r1, r8
 800658a:	4638      	mov	r0, r7
 800658c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006590:	47c8      	blx	r9
 8006592:	3001      	adds	r0, #1
 8006594:	d023      	beq.n	80065de <_printf_common+0xae>
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	6922      	ldr	r2, [r4, #16]
 800659a:	f003 0306 	and.w	r3, r3, #6
 800659e:	2b04      	cmp	r3, #4
 80065a0:	bf14      	ite	ne
 80065a2:	2500      	movne	r5, #0
 80065a4:	6833      	ldreq	r3, [r6, #0]
 80065a6:	f04f 0600 	mov.w	r6, #0
 80065aa:	bf08      	it	eq
 80065ac:	68e5      	ldreq	r5, [r4, #12]
 80065ae:	f104 041a 	add.w	r4, r4, #26
 80065b2:	bf08      	it	eq
 80065b4:	1aed      	subeq	r5, r5, r3
 80065b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80065ba:	bf08      	it	eq
 80065bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065c0:	4293      	cmp	r3, r2
 80065c2:	bfc4      	itt	gt
 80065c4:	1a9b      	subgt	r3, r3, r2
 80065c6:	18ed      	addgt	r5, r5, r3
 80065c8:	42b5      	cmp	r5, r6
 80065ca:	d11a      	bne.n	8006602 <_printf_common+0xd2>
 80065cc:	2000      	movs	r0, #0
 80065ce:	e008      	b.n	80065e2 <_printf_common+0xb2>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4652      	mov	r2, sl
 80065d4:	4641      	mov	r1, r8
 80065d6:	4638      	mov	r0, r7
 80065d8:	47c8      	blx	r9
 80065da:	3001      	adds	r0, #1
 80065dc:	d103      	bne.n	80065e6 <_printf_common+0xb6>
 80065de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	3501      	adds	r5, #1
 80065e8:	e7c1      	b.n	800656e <_printf_common+0x3e>
 80065ea:	2030      	movs	r0, #48	@ 0x30
 80065ec:	18e1      	adds	r1, r4, r3
 80065ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065f8:	4422      	add	r2, r4
 80065fa:	3302      	adds	r3, #2
 80065fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006600:	e7c2      	b.n	8006588 <_printf_common+0x58>
 8006602:	2301      	movs	r3, #1
 8006604:	4622      	mov	r2, r4
 8006606:	4641      	mov	r1, r8
 8006608:	4638      	mov	r0, r7
 800660a:	47c8      	blx	r9
 800660c:	3001      	adds	r0, #1
 800660e:	d0e6      	beq.n	80065de <_printf_common+0xae>
 8006610:	3601      	adds	r6, #1
 8006612:	e7d9      	b.n	80065c8 <_printf_common+0x98>

08006614 <_printf_i>:
 8006614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006618:	7e0f      	ldrb	r7, [r1, #24]
 800661a:	4691      	mov	r9, r2
 800661c:	2f78      	cmp	r7, #120	@ 0x78
 800661e:	4680      	mov	r8, r0
 8006620:	460c      	mov	r4, r1
 8006622:	469a      	mov	sl, r3
 8006624:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800662a:	d807      	bhi.n	800663c <_printf_i+0x28>
 800662c:	2f62      	cmp	r7, #98	@ 0x62
 800662e:	d80a      	bhi.n	8006646 <_printf_i+0x32>
 8006630:	2f00      	cmp	r7, #0
 8006632:	f000 80d3 	beq.w	80067dc <_printf_i+0x1c8>
 8006636:	2f58      	cmp	r7, #88	@ 0x58
 8006638:	f000 80ba 	beq.w	80067b0 <_printf_i+0x19c>
 800663c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006644:	e03a      	b.n	80066bc <_printf_i+0xa8>
 8006646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800664a:	2b15      	cmp	r3, #21
 800664c:	d8f6      	bhi.n	800663c <_printf_i+0x28>
 800664e:	a101      	add	r1, pc, #4	@ (adr r1, 8006654 <_printf_i+0x40>)
 8006650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006654:	080066ad 	.word	0x080066ad
 8006658:	080066c1 	.word	0x080066c1
 800665c:	0800663d 	.word	0x0800663d
 8006660:	0800663d 	.word	0x0800663d
 8006664:	0800663d 	.word	0x0800663d
 8006668:	0800663d 	.word	0x0800663d
 800666c:	080066c1 	.word	0x080066c1
 8006670:	0800663d 	.word	0x0800663d
 8006674:	0800663d 	.word	0x0800663d
 8006678:	0800663d 	.word	0x0800663d
 800667c:	0800663d 	.word	0x0800663d
 8006680:	080067c3 	.word	0x080067c3
 8006684:	080066eb 	.word	0x080066eb
 8006688:	0800677d 	.word	0x0800677d
 800668c:	0800663d 	.word	0x0800663d
 8006690:	0800663d 	.word	0x0800663d
 8006694:	080067e5 	.word	0x080067e5
 8006698:	0800663d 	.word	0x0800663d
 800669c:	080066eb 	.word	0x080066eb
 80066a0:	0800663d 	.word	0x0800663d
 80066a4:	0800663d 	.word	0x0800663d
 80066a8:	08006785 	.word	0x08006785
 80066ac:	6833      	ldr	r3, [r6, #0]
 80066ae:	1d1a      	adds	r2, r3, #4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6032      	str	r2, [r6, #0]
 80066b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066bc:	2301      	movs	r3, #1
 80066be:	e09e      	b.n	80067fe <_printf_i+0x1ea>
 80066c0:	6833      	ldr	r3, [r6, #0]
 80066c2:	6820      	ldr	r0, [r4, #0]
 80066c4:	1d19      	adds	r1, r3, #4
 80066c6:	6031      	str	r1, [r6, #0]
 80066c8:	0606      	lsls	r6, r0, #24
 80066ca:	d501      	bpl.n	80066d0 <_printf_i+0xbc>
 80066cc:	681d      	ldr	r5, [r3, #0]
 80066ce:	e003      	b.n	80066d8 <_printf_i+0xc4>
 80066d0:	0645      	lsls	r5, r0, #25
 80066d2:	d5fb      	bpl.n	80066cc <_printf_i+0xb8>
 80066d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066d8:	2d00      	cmp	r5, #0
 80066da:	da03      	bge.n	80066e4 <_printf_i+0xd0>
 80066dc:	232d      	movs	r3, #45	@ 0x2d
 80066de:	426d      	negs	r5, r5
 80066e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e4:	230a      	movs	r3, #10
 80066e6:	4859      	ldr	r0, [pc, #356]	@ (800684c <_printf_i+0x238>)
 80066e8:	e011      	b.n	800670e <_printf_i+0xfa>
 80066ea:	6821      	ldr	r1, [r4, #0]
 80066ec:	6833      	ldr	r3, [r6, #0]
 80066ee:	0608      	lsls	r0, r1, #24
 80066f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80066f4:	d402      	bmi.n	80066fc <_printf_i+0xe8>
 80066f6:	0649      	lsls	r1, r1, #25
 80066f8:	bf48      	it	mi
 80066fa:	b2ad      	uxthmi	r5, r5
 80066fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	bf14      	ite	ne
 8006702:	230a      	movne	r3, #10
 8006704:	2308      	moveq	r3, #8
 8006706:	4851      	ldr	r0, [pc, #324]	@ (800684c <_printf_i+0x238>)
 8006708:	2100      	movs	r1, #0
 800670a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800670e:	6866      	ldr	r6, [r4, #4]
 8006710:	2e00      	cmp	r6, #0
 8006712:	bfa8      	it	ge
 8006714:	6821      	ldrge	r1, [r4, #0]
 8006716:	60a6      	str	r6, [r4, #8]
 8006718:	bfa4      	itt	ge
 800671a:	f021 0104 	bicge.w	r1, r1, #4
 800671e:	6021      	strge	r1, [r4, #0]
 8006720:	b90d      	cbnz	r5, 8006726 <_printf_i+0x112>
 8006722:	2e00      	cmp	r6, #0
 8006724:	d04b      	beq.n	80067be <_printf_i+0x1aa>
 8006726:	4616      	mov	r6, r2
 8006728:	fbb5 f1f3 	udiv	r1, r5, r3
 800672c:	fb03 5711 	mls	r7, r3, r1, r5
 8006730:	5dc7      	ldrb	r7, [r0, r7]
 8006732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006736:	462f      	mov	r7, r5
 8006738:	42bb      	cmp	r3, r7
 800673a:	460d      	mov	r5, r1
 800673c:	d9f4      	bls.n	8006728 <_printf_i+0x114>
 800673e:	2b08      	cmp	r3, #8
 8006740:	d10b      	bne.n	800675a <_printf_i+0x146>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	07df      	lsls	r7, r3, #31
 8006746:	d508      	bpl.n	800675a <_printf_i+0x146>
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	6861      	ldr	r1, [r4, #4]
 800674c:	4299      	cmp	r1, r3
 800674e:	bfde      	ittt	le
 8006750:	2330      	movle	r3, #48	@ 0x30
 8006752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006756:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800675a:	1b92      	subs	r2, r2, r6
 800675c:	6122      	str	r2, [r4, #16]
 800675e:	464b      	mov	r3, r9
 8006760:	4621      	mov	r1, r4
 8006762:	4640      	mov	r0, r8
 8006764:	f8cd a000 	str.w	sl, [sp]
 8006768:	aa03      	add	r2, sp, #12
 800676a:	f7ff fee1 	bl	8006530 <_printf_common>
 800676e:	3001      	adds	r0, #1
 8006770:	d14a      	bne.n	8006808 <_printf_i+0x1f4>
 8006772:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006776:	b004      	add	sp, #16
 8006778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	f043 0320 	orr.w	r3, r3, #32
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	2778      	movs	r7, #120	@ 0x78
 8006786:	4832      	ldr	r0, [pc, #200]	@ (8006850 <_printf_i+0x23c>)
 8006788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	6831      	ldr	r1, [r6, #0]
 8006790:	061f      	lsls	r7, r3, #24
 8006792:	f851 5b04 	ldr.w	r5, [r1], #4
 8006796:	d402      	bmi.n	800679e <_printf_i+0x18a>
 8006798:	065f      	lsls	r7, r3, #25
 800679a:	bf48      	it	mi
 800679c:	b2ad      	uxthmi	r5, r5
 800679e:	6031      	str	r1, [r6, #0]
 80067a0:	07d9      	lsls	r1, r3, #31
 80067a2:	bf44      	itt	mi
 80067a4:	f043 0320 	orrmi.w	r3, r3, #32
 80067a8:	6023      	strmi	r3, [r4, #0]
 80067aa:	b11d      	cbz	r5, 80067b4 <_printf_i+0x1a0>
 80067ac:	2310      	movs	r3, #16
 80067ae:	e7ab      	b.n	8006708 <_printf_i+0xf4>
 80067b0:	4826      	ldr	r0, [pc, #152]	@ (800684c <_printf_i+0x238>)
 80067b2:	e7e9      	b.n	8006788 <_printf_i+0x174>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	f023 0320 	bic.w	r3, r3, #32
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	e7f6      	b.n	80067ac <_printf_i+0x198>
 80067be:	4616      	mov	r6, r2
 80067c0:	e7bd      	b.n	800673e <_printf_i+0x12a>
 80067c2:	6833      	ldr	r3, [r6, #0]
 80067c4:	6825      	ldr	r5, [r4, #0]
 80067c6:	1d18      	adds	r0, r3, #4
 80067c8:	6961      	ldr	r1, [r4, #20]
 80067ca:	6030      	str	r0, [r6, #0]
 80067cc:	062e      	lsls	r6, r5, #24
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	d501      	bpl.n	80067d6 <_printf_i+0x1c2>
 80067d2:	6019      	str	r1, [r3, #0]
 80067d4:	e002      	b.n	80067dc <_printf_i+0x1c8>
 80067d6:	0668      	lsls	r0, r5, #25
 80067d8:	d5fb      	bpl.n	80067d2 <_printf_i+0x1be>
 80067da:	8019      	strh	r1, [r3, #0]
 80067dc:	2300      	movs	r3, #0
 80067de:	4616      	mov	r6, r2
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	e7bc      	b.n	800675e <_printf_i+0x14a>
 80067e4:	6833      	ldr	r3, [r6, #0]
 80067e6:	2100      	movs	r1, #0
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	6032      	str	r2, [r6, #0]
 80067ec:	681e      	ldr	r6, [r3, #0]
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	4630      	mov	r0, r6
 80067f2:	f000 f944 	bl	8006a7e <memchr>
 80067f6:	b108      	cbz	r0, 80067fc <_printf_i+0x1e8>
 80067f8:	1b80      	subs	r0, r0, r6
 80067fa:	6060      	str	r0, [r4, #4]
 80067fc:	6863      	ldr	r3, [r4, #4]
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	2300      	movs	r3, #0
 8006802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006806:	e7aa      	b.n	800675e <_printf_i+0x14a>
 8006808:	4632      	mov	r2, r6
 800680a:	4649      	mov	r1, r9
 800680c:	4640      	mov	r0, r8
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	47d0      	blx	sl
 8006812:	3001      	adds	r0, #1
 8006814:	d0ad      	beq.n	8006772 <_printf_i+0x15e>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	079b      	lsls	r3, r3, #30
 800681a:	d413      	bmi.n	8006844 <_printf_i+0x230>
 800681c:	68e0      	ldr	r0, [r4, #12]
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	4298      	cmp	r0, r3
 8006822:	bfb8      	it	lt
 8006824:	4618      	movlt	r0, r3
 8006826:	e7a6      	b.n	8006776 <_printf_i+0x162>
 8006828:	2301      	movs	r3, #1
 800682a:	4632      	mov	r2, r6
 800682c:	4649      	mov	r1, r9
 800682e:	4640      	mov	r0, r8
 8006830:	47d0      	blx	sl
 8006832:	3001      	adds	r0, #1
 8006834:	d09d      	beq.n	8006772 <_printf_i+0x15e>
 8006836:	3501      	adds	r5, #1
 8006838:	68e3      	ldr	r3, [r4, #12]
 800683a:	9903      	ldr	r1, [sp, #12]
 800683c:	1a5b      	subs	r3, r3, r1
 800683e:	42ab      	cmp	r3, r5
 8006840:	dcf2      	bgt.n	8006828 <_printf_i+0x214>
 8006842:	e7eb      	b.n	800681c <_printf_i+0x208>
 8006844:	2500      	movs	r5, #0
 8006846:	f104 0619 	add.w	r6, r4, #25
 800684a:	e7f5      	b.n	8006838 <_printf_i+0x224>
 800684c:	08008f3c 	.word	0x08008f3c
 8006850:	08008f4d 	.word	0x08008f4d

08006854 <siprintf>:
 8006854:	b40e      	push	{r1, r2, r3}
 8006856:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800685a:	b500      	push	{lr}
 800685c:	b09c      	sub	sp, #112	@ 0x70
 800685e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006860:	9002      	str	r0, [sp, #8]
 8006862:	9006      	str	r0, [sp, #24]
 8006864:	9107      	str	r1, [sp, #28]
 8006866:	9104      	str	r1, [sp, #16]
 8006868:	4808      	ldr	r0, [pc, #32]	@ (800688c <siprintf+0x38>)
 800686a:	4909      	ldr	r1, [pc, #36]	@ (8006890 <siprintf+0x3c>)
 800686c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006870:	9105      	str	r1, [sp, #20]
 8006872:	6800      	ldr	r0, [r0, #0]
 8006874:	a902      	add	r1, sp, #8
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	f000 ffbe 	bl	80077f8 <_svfiprintf_r>
 800687c:	2200      	movs	r2, #0
 800687e:	9b02      	ldr	r3, [sp, #8]
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	b01c      	add	sp, #112	@ 0x70
 8006884:	f85d eb04 	ldr.w	lr, [sp], #4
 8006888:	b003      	add	sp, #12
 800688a:	4770      	bx	lr
 800688c:	2000002c 	.word	0x2000002c
 8006890:	ffff0208 	.word	0xffff0208

08006894 <std>:
 8006894:	2300      	movs	r3, #0
 8006896:	b510      	push	{r4, lr}
 8006898:	4604      	mov	r4, r0
 800689a:	e9c0 3300 	strd	r3, r3, [r0]
 800689e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068a2:	6083      	str	r3, [r0, #8]
 80068a4:	8181      	strh	r1, [r0, #12]
 80068a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068a8:	81c2      	strh	r2, [r0, #14]
 80068aa:	6183      	str	r3, [r0, #24]
 80068ac:	4619      	mov	r1, r3
 80068ae:	2208      	movs	r2, #8
 80068b0:	305c      	adds	r0, #92	@ 0x5c
 80068b2:	f000 f8b1 	bl	8006a18 <memset>
 80068b6:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <std+0x58>)
 80068b8:	6224      	str	r4, [r4, #32]
 80068ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80068bc:	4b0c      	ldr	r3, [pc, #48]	@ (80068f0 <std+0x5c>)
 80068be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068c0:	4b0c      	ldr	r3, [pc, #48]	@ (80068f4 <std+0x60>)
 80068c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068c4:	4b0c      	ldr	r3, [pc, #48]	@ (80068f8 <std+0x64>)
 80068c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80068c8:	4b0c      	ldr	r3, [pc, #48]	@ (80068fc <std+0x68>)
 80068ca:	429c      	cmp	r4, r3
 80068cc:	d006      	beq.n	80068dc <std+0x48>
 80068ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068d2:	4294      	cmp	r4, r2
 80068d4:	d002      	beq.n	80068dc <std+0x48>
 80068d6:	33d0      	adds	r3, #208	@ 0xd0
 80068d8:	429c      	cmp	r4, r3
 80068da:	d105      	bne.n	80068e8 <std+0x54>
 80068dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e4:	f000 b8c8 	b.w	8006a78 <__retarget_lock_init_recursive>
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	bf00      	nop
 80068ec:	080083ad 	.word	0x080083ad
 80068f0:	080083cf 	.word	0x080083cf
 80068f4:	08008407 	.word	0x08008407
 80068f8:	0800842b 	.word	0x0800842b
 80068fc:	20000464 	.word	0x20000464

08006900 <stdio_exit_handler>:
 8006900:	4a02      	ldr	r2, [pc, #8]	@ (800690c <stdio_exit_handler+0xc>)
 8006902:	4903      	ldr	r1, [pc, #12]	@ (8006910 <stdio_exit_handler+0x10>)
 8006904:	4803      	ldr	r0, [pc, #12]	@ (8006914 <stdio_exit_handler+0x14>)
 8006906:	f000 b869 	b.w	80069dc <_fwalk_sglue>
 800690a:	bf00      	nop
 800690c:	20000020 	.word	0x20000020
 8006910:	08007c45 	.word	0x08007c45
 8006914:	20000030 	.word	0x20000030

08006918 <cleanup_stdio>:
 8006918:	6841      	ldr	r1, [r0, #4]
 800691a:	4b0c      	ldr	r3, [pc, #48]	@ (800694c <cleanup_stdio+0x34>)
 800691c:	b510      	push	{r4, lr}
 800691e:	4299      	cmp	r1, r3
 8006920:	4604      	mov	r4, r0
 8006922:	d001      	beq.n	8006928 <cleanup_stdio+0x10>
 8006924:	f001 f98e 	bl	8007c44 <_fflush_r>
 8006928:	68a1      	ldr	r1, [r4, #8]
 800692a:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <cleanup_stdio+0x38>)
 800692c:	4299      	cmp	r1, r3
 800692e:	d002      	beq.n	8006936 <cleanup_stdio+0x1e>
 8006930:	4620      	mov	r0, r4
 8006932:	f001 f987 	bl	8007c44 <_fflush_r>
 8006936:	68e1      	ldr	r1, [r4, #12]
 8006938:	4b06      	ldr	r3, [pc, #24]	@ (8006954 <cleanup_stdio+0x3c>)
 800693a:	4299      	cmp	r1, r3
 800693c:	d004      	beq.n	8006948 <cleanup_stdio+0x30>
 800693e:	4620      	mov	r0, r4
 8006940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006944:	f001 b97e 	b.w	8007c44 <_fflush_r>
 8006948:	bd10      	pop	{r4, pc}
 800694a:	bf00      	nop
 800694c:	20000464 	.word	0x20000464
 8006950:	200004cc 	.word	0x200004cc
 8006954:	20000534 	.word	0x20000534

08006958 <global_stdio_init.part.0>:
 8006958:	b510      	push	{r4, lr}
 800695a:	4b0b      	ldr	r3, [pc, #44]	@ (8006988 <global_stdio_init.part.0+0x30>)
 800695c:	4c0b      	ldr	r4, [pc, #44]	@ (800698c <global_stdio_init.part.0+0x34>)
 800695e:	4a0c      	ldr	r2, [pc, #48]	@ (8006990 <global_stdio_init.part.0+0x38>)
 8006960:	4620      	mov	r0, r4
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	2104      	movs	r1, #4
 8006966:	2200      	movs	r2, #0
 8006968:	f7ff ff94 	bl	8006894 <std>
 800696c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006970:	2201      	movs	r2, #1
 8006972:	2109      	movs	r1, #9
 8006974:	f7ff ff8e 	bl	8006894 <std>
 8006978:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800697c:	2202      	movs	r2, #2
 800697e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006982:	2112      	movs	r1, #18
 8006984:	f7ff bf86 	b.w	8006894 <std>
 8006988:	2000059c 	.word	0x2000059c
 800698c:	20000464 	.word	0x20000464
 8006990:	08006901 	.word	0x08006901

08006994 <__sfp_lock_acquire>:
 8006994:	4801      	ldr	r0, [pc, #4]	@ (800699c <__sfp_lock_acquire+0x8>)
 8006996:	f000 b870 	b.w	8006a7a <__retarget_lock_acquire_recursive>
 800699a:	bf00      	nop
 800699c:	200005a1 	.word	0x200005a1

080069a0 <__sfp_lock_release>:
 80069a0:	4801      	ldr	r0, [pc, #4]	@ (80069a8 <__sfp_lock_release+0x8>)
 80069a2:	f000 b86b 	b.w	8006a7c <__retarget_lock_release_recursive>
 80069a6:	bf00      	nop
 80069a8:	200005a1 	.word	0x200005a1

080069ac <__sinit>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4604      	mov	r4, r0
 80069b0:	f7ff fff0 	bl	8006994 <__sfp_lock_acquire>
 80069b4:	6a23      	ldr	r3, [r4, #32]
 80069b6:	b11b      	cbz	r3, 80069c0 <__sinit+0x14>
 80069b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069bc:	f7ff bff0 	b.w	80069a0 <__sfp_lock_release>
 80069c0:	4b04      	ldr	r3, [pc, #16]	@ (80069d4 <__sinit+0x28>)
 80069c2:	6223      	str	r3, [r4, #32]
 80069c4:	4b04      	ldr	r3, [pc, #16]	@ (80069d8 <__sinit+0x2c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f5      	bne.n	80069b8 <__sinit+0xc>
 80069cc:	f7ff ffc4 	bl	8006958 <global_stdio_init.part.0>
 80069d0:	e7f2      	b.n	80069b8 <__sinit+0xc>
 80069d2:	bf00      	nop
 80069d4:	08006919 	.word	0x08006919
 80069d8:	2000059c 	.word	0x2000059c

080069dc <_fwalk_sglue>:
 80069dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e0:	4607      	mov	r7, r0
 80069e2:	4688      	mov	r8, r1
 80069e4:	4614      	mov	r4, r2
 80069e6:	2600      	movs	r6, #0
 80069e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069ec:	f1b9 0901 	subs.w	r9, r9, #1
 80069f0:	d505      	bpl.n	80069fe <_fwalk_sglue+0x22>
 80069f2:	6824      	ldr	r4, [r4, #0]
 80069f4:	2c00      	cmp	r4, #0
 80069f6:	d1f7      	bne.n	80069e8 <_fwalk_sglue+0xc>
 80069f8:	4630      	mov	r0, r6
 80069fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d907      	bls.n	8006a14 <_fwalk_sglue+0x38>
 8006a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	d003      	beq.n	8006a14 <_fwalk_sglue+0x38>
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4638      	mov	r0, r7
 8006a10:	47c0      	blx	r8
 8006a12:	4306      	orrs	r6, r0
 8006a14:	3568      	adds	r5, #104	@ 0x68
 8006a16:	e7e9      	b.n	80069ec <_fwalk_sglue+0x10>

08006a18 <memset>:
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4402      	add	r2, r0
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d100      	bne.n	8006a22 <memset+0xa>
 8006a20:	4770      	bx	lr
 8006a22:	f803 1b01 	strb.w	r1, [r3], #1
 8006a26:	e7f9      	b.n	8006a1c <memset+0x4>

08006a28 <_localeconv_r>:
 8006a28:	4800      	ldr	r0, [pc, #0]	@ (8006a2c <_localeconv_r+0x4>)
 8006a2a:	4770      	bx	lr
 8006a2c:	2000016c 	.word	0x2000016c

08006a30 <__libc_init_array>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	2600      	movs	r6, #0
 8006a34:	4d0c      	ldr	r5, [pc, #48]	@ (8006a68 <__libc_init_array+0x38>)
 8006a36:	4c0d      	ldr	r4, [pc, #52]	@ (8006a6c <__libc_init_array+0x3c>)
 8006a38:	1b64      	subs	r4, r4, r5
 8006a3a:	10a4      	asrs	r4, r4, #2
 8006a3c:	42a6      	cmp	r6, r4
 8006a3e:	d109      	bne.n	8006a54 <__libc_init_array+0x24>
 8006a40:	f002 f94a 	bl	8008cd8 <_init>
 8006a44:	2600      	movs	r6, #0
 8006a46:	4d0a      	ldr	r5, [pc, #40]	@ (8006a70 <__libc_init_array+0x40>)
 8006a48:	4c0a      	ldr	r4, [pc, #40]	@ (8006a74 <__libc_init_array+0x44>)
 8006a4a:	1b64      	subs	r4, r4, r5
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	42a6      	cmp	r6, r4
 8006a50:	d105      	bne.n	8006a5e <__libc_init_array+0x2e>
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
 8006a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a58:	4798      	blx	r3
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7ee      	b.n	8006a3c <__libc_init_array+0xc>
 8006a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a62:	4798      	blx	r3
 8006a64:	3601      	adds	r6, #1
 8006a66:	e7f2      	b.n	8006a4e <__libc_init_array+0x1e>
 8006a68:	080092a8 	.word	0x080092a8
 8006a6c:	080092a8 	.word	0x080092a8
 8006a70:	080092a8 	.word	0x080092a8
 8006a74:	080092ac 	.word	0x080092ac

08006a78 <__retarget_lock_init_recursive>:
 8006a78:	4770      	bx	lr

08006a7a <__retarget_lock_acquire_recursive>:
 8006a7a:	4770      	bx	lr

08006a7c <__retarget_lock_release_recursive>:
 8006a7c:	4770      	bx	lr

08006a7e <memchr>:
 8006a7e:	4603      	mov	r3, r0
 8006a80:	b510      	push	{r4, lr}
 8006a82:	b2c9      	uxtb	r1, r1
 8006a84:	4402      	add	r2, r0
 8006a86:	4293      	cmp	r3, r2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	d101      	bne.n	8006a90 <memchr+0x12>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e003      	b.n	8006a98 <memchr+0x1a>
 8006a90:	7804      	ldrb	r4, [r0, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	428c      	cmp	r4, r1
 8006a96:	d1f6      	bne.n	8006a86 <memchr+0x8>
 8006a98:	bd10      	pop	{r4, pc}

08006a9a <quorem>:
 8006a9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9e:	6903      	ldr	r3, [r0, #16]
 8006aa0:	690c      	ldr	r4, [r1, #16]
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	db7e      	blt.n	8006ba6 <quorem+0x10c>
 8006aa8:	3c01      	subs	r4, #1
 8006aaa:	00a3      	lsls	r3, r4, #2
 8006aac:	f100 0514 	add.w	r5, r0, #20
 8006ab0:	f101 0814 	add.w	r8, r1, #20
 8006ab4:	9300      	str	r3, [sp, #0]
 8006ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aba:	9301      	str	r3, [sp, #4]
 8006abc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006acc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ad0:	d32e      	bcc.n	8006b30 <quorem+0x96>
 8006ad2:	f04f 0a00 	mov.w	sl, #0
 8006ad6:	46c4      	mov	ip, r8
 8006ad8:	46ae      	mov	lr, r5
 8006ada:	46d3      	mov	fp, sl
 8006adc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ae0:	b298      	uxth	r0, r3
 8006ae2:	fb06 a000 	mla	r0, r6, r0, sl
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	0c02      	lsrs	r2, r0, #16
 8006aea:	fb06 2303 	mla	r3, r6, r3, r2
 8006aee:	f8de 2000 	ldr.w	r2, [lr]
 8006af2:	b280      	uxth	r0, r0
 8006af4:	b292      	uxth	r2, r2
 8006af6:	1a12      	subs	r2, r2, r0
 8006af8:	445a      	add	r2, fp
 8006afa:	f8de 0000 	ldr.w	r0, [lr]
 8006afe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b08:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b0c:	b292      	uxth	r2, r2
 8006b0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b12:	45e1      	cmp	r9, ip
 8006b14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b18:	f84e 2b04 	str.w	r2, [lr], #4
 8006b1c:	d2de      	bcs.n	8006adc <quorem+0x42>
 8006b1e:	9b00      	ldr	r3, [sp, #0]
 8006b20:	58eb      	ldr	r3, [r5, r3]
 8006b22:	b92b      	cbnz	r3, 8006b30 <quorem+0x96>
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	3b04      	subs	r3, #4
 8006b28:	429d      	cmp	r5, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	d32f      	bcc.n	8006b8e <quorem+0xf4>
 8006b2e:	613c      	str	r4, [r7, #16]
 8006b30:	4638      	mov	r0, r7
 8006b32:	f001 fb33 	bl	800819c <__mcmp>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	db25      	blt.n	8006b86 <quorem+0xec>
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b42:	f8d1 c000 	ldr.w	ip, [r1]
 8006b46:	fa1f fe82 	uxth.w	lr, r2
 8006b4a:	fa1f f38c 	uxth.w	r3, ip
 8006b4e:	eba3 030e 	sub.w	r3, r3, lr
 8006b52:	4403      	add	r3, r0
 8006b54:	0c12      	lsrs	r2, r2, #16
 8006b56:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b5a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b64:	45c1      	cmp	r9, r8
 8006b66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b6a:	f841 3b04 	str.w	r3, [r1], #4
 8006b6e:	d2e6      	bcs.n	8006b3e <quorem+0xa4>
 8006b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b78:	b922      	cbnz	r2, 8006b84 <quorem+0xea>
 8006b7a:	3b04      	subs	r3, #4
 8006b7c:	429d      	cmp	r5, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	d30b      	bcc.n	8006b9a <quorem+0x100>
 8006b82:	613c      	str	r4, [r7, #16]
 8006b84:	3601      	adds	r6, #1
 8006b86:	4630      	mov	r0, r6
 8006b88:	b003      	add	sp, #12
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	3b04      	subs	r3, #4
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	d1cb      	bne.n	8006b2e <quorem+0x94>
 8006b96:	3c01      	subs	r4, #1
 8006b98:	e7c6      	b.n	8006b28 <quorem+0x8e>
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	d1ef      	bne.n	8006b82 <quorem+0xe8>
 8006ba2:	3c01      	subs	r4, #1
 8006ba4:	e7ea      	b.n	8006b7c <quorem+0xe2>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e7ee      	b.n	8006b88 <quorem+0xee>
 8006baa:	0000      	movs	r0, r0
 8006bac:	0000      	movs	r0, r0
	...

08006bb0 <_dtoa_r>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	69c7      	ldr	r7, [r0, #28]
 8006bba:	b097      	sub	sp, #92	@ 0x5c
 8006bbc:	4683      	mov	fp, r0
 8006bbe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006bc2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006bc4:	b97f      	cbnz	r7, 8006be6 <_dtoa_r+0x36>
 8006bc6:	2010      	movs	r0, #16
 8006bc8:	f000 ff12 	bl	80079f0 <malloc>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	f8cb 001c 	str.w	r0, [fp, #28]
 8006bd2:	b920      	cbnz	r0, 8006bde <_dtoa_r+0x2e>
 8006bd4:	21ef      	movs	r1, #239	@ 0xef
 8006bd6:	4ba8      	ldr	r3, [pc, #672]	@ (8006e78 <_dtoa_r+0x2c8>)
 8006bd8:	48a8      	ldr	r0, [pc, #672]	@ (8006e7c <_dtoa_r+0x2cc>)
 8006bda:	f001 fcd7 	bl	800858c <__assert_func>
 8006bde:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006be2:	6007      	str	r7, [r0, #0]
 8006be4:	60c7      	str	r7, [r0, #12]
 8006be6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006bea:	6819      	ldr	r1, [r3, #0]
 8006bec:	b159      	cbz	r1, 8006c06 <_dtoa_r+0x56>
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4093      	lsls	r3, r2
 8006bf4:	604a      	str	r2, [r1, #4]
 8006bf6:	608b      	str	r3, [r1, #8]
 8006bf8:	4658      	mov	r0, fp
 8006bfa:	f001 f897 	bl	8007d2c <_Bfree>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	1e2b      	subs	r3, r5, #0
 8006c08:	bfaf      	iteee	ge
 8006c0a:	2300      	movge	r3, #0
 8006c0c:	2201      	movlt	r2, #1
 8006c0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c12:	9303      	strlt	r3, [sp, #12]
 8006c14:	bfa8      	it	ge
 8006c16:	6033      	strge	r3, [r6, #0]
 8006c18:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006c1c:	4b98      	ldr	r3, [pc, #608]	@ (8006e80 <_dtoa_r+0x2d0>)
 8006c1e:	bfb8      	it	lt
 8006c20:	6032      	strlt	r2, [r6, #0]
 8006c22:	ea33 0308 	bics.w	r3, r3, r8
 8006c26:	d112      	bne.n	8006c4e <_dtoa_r+0x9e>
 8006c28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c34:	4323      	orrs	r3, r4
 8006c36:	f000 8550 	beq.w	80076da <_dtoa_r+0xb2a>
 8006c3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c3c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006e84 <_dtoa_r+0x2d4>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 8552 	beq.w	80076ea <_dtoa_r+0xb3a>
 8006c46:	f10a 0303 	add.w	r3, sl, #3
 8006c4a:	f000 bd4c 	b.w	80076e6 <_dtoa_r+0xb36>
 8006c4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006c56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f7f9 fea3 	bl	80009a8 <__aeabi_dcmpeq>
 8006c62:	4607      	mov	r7, r0
 8006c64:	b158      	cbz	r0, 8006c7e <_dtoa_r+0xce>
 8006c66:	2301      	movs	r3, #1
 8006c68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c6e:	b113      	cbz	r3, 8006c76 <_dtoa_r+0xc6>
 8006c70:	4b85      	ldr	r3, [pc, #532]	@ (8006e88 <_dtoa_r+0x2d8>)
 8006c72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006e8c <_dtoa_r+0x2dc>
 8006c7a:	f000 bd36 	b.w	80076ea <_dtoa_r+0xb3a>
 8006c7e:	ab14      	add	r3, sp, #80	@ 0x50
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	ab15      	add	r3, sp, #84	@ 0x54
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4658      	mov	r0, fp
 8006c88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006c8c:	f001 fb36 	bl	80082fc <__d2b>
 8006c90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006c94:	4681      	mov	r9, r0
 8006c96:	2e00      	cmp	r6, #0
 8006c98:	d077      	beq.n	8006d8a <_dtoa_r+0x1da>
 8006c9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ca0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ca8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006cac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006cb0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	4b76      	ldr	r3, [pc, #472]	@ (8006e90 <_dtoa_r+0x2e0>)
 8006cb8:	f7f9 fa56 	bl	8000168 <__aeabi_dsub>
 8006cbc:	a368      	add	r3, pc, #416	@ (adr r3, 8006e60 <_dtoa_r+0x2b0>)
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f7f9 fc09 	bl	80004d8 <__aeabi_dmul>
 8006cc6:	a368      	add	r3, pc, #416	@ (adr r3, 8006e68 <_dtoa_r+0x2b8>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f7f9 fa4e 	bl	800016c <__adddf3>
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	f7f9 fb95 	bl	8000404 <__aeabi_i2d>
 8006cda:	a365      	add	r3, pc, #404	@ (adr r3, 8006e70 <_dtoa_r+0x2c0>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f7f9 fbfa 	bl	80004d8 <__aeabi_dmul>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	f7f9 fa3e 	bl	800016c <__adddf3>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	f7f9 fea0 	bl	8000a38 <__aeabi_d2iz>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4607      	mov	r7, r0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4620      	mov	r0, r4
 8006d00:	4629      	mov	r1, r5
 8006d02:	f7f9 fe5b 	bl	80009bc <__aeabi_dcmplt>
 8006d06:	b140      	cbz	r0, 8006d1a <_dtoa_r+0x16a>
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f7f9 fb7b 	bl	8000404 <__aeabi_i2d>
 8006d0e:	4622      	mov	r2, r4
 8006d10:	462b      	mov	r3, r5
 8006d12:	f7f9 fe49 	bl	80009a8 <__aeabi_dcmpeq>
 8006d16:	b900      	cbnz	r0, 8006d1a <_dtoa_r+0x16a>
 8006d18:	3f01      	subs	r7, #1
 8006d1a:	2f16      	cmp	r7, #22
 8006d1c:	d853      	bhi.n	8006dc6 <_dtoa_r+0x216>
 8006d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d22:	4b5c      	ldr	r3, [pc, #368]	@ (8006e94 <_dtoa_r+0x2e4>)
 8006d24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	f7f9 fe46 	bl	80009bc <__aeabi_dcmplt>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d04a      	beq.n	8006dca <_dtoa_r+0x21a>
 8006d34:	2300      	movs	r3, #0
 8006d36:	3f01      	subs	r7, #1
 8006d38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d3c:	1b9b      	subs	r3, r3, r6
 8006d3e:	1e5a      	subs	r2, r3, #1
 8006d40:	bf46      	itte	mi
 8006d42:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d46:	2300      	movmi	r3, #0
 8006d48:	f04f 0800 	movpl.w	r8, #0
 8006d4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d4e:	bf48      	it	mi
 8006d50:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006d52:	2f00      	cmp	r7, #0
 8006d54:	db3b      	blt.n	8006dce <_dtoa_r+0x21e>
 8006d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d58:	970e      	str	r7, [sp, #56]	@ 0x38
 8006d5a:	443b      	add	r3, r7
 8006d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5e:	2300      	movs	r3, #0
 8006d60:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d64:	2b09      	cmp	r3, #9
 8006d66:	d866      	bhi.n	8006e36 <_dtoa_r+0x286>
 8006d68:	2b05      	cmp	r3, #5
 8006d6a:	bfc4      	itt	gt
 8006d6c:	3b04      	subgt	r3, #4
 8006d6e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006d70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d72:	bfc8      	it	gt
 8006d74:	2400      	movgt	r4, #0
 8006d76:	f1a3 0302 	sub.w	r3, r3, #2
 8006d7a:	bfd8      	it	le
 8006d7c:	2401      	movle	r4, #1
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d864      	bhi.n	8006e4c <_dtoa_r+0x29c>
 8006d82:	e8df f003 	tbb	[pc, r3]
 8006d86:	382b      	.short	0x382b
 8006d88:	5636      	.short	0x5636
 8006d8a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006d8e:	441e      	add	r6, r3
 8006d90:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	bfc1      	itttt	gt
 8006d98:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006da0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006da4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006da8:	bfd6      	itet	le
 8006daa:	f1c3 0320 	rsble	r3, r3, #32
 8006dae:	ea48 0003 	orrgt.w	r0, r8, r3
 8006db2:	fa04 f003 	lslle.w	r0, r4, r3
 8006db6:	f7f9 fb15 	bl	80003e4 <__aeabi_ui2d>
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006dc0:	3e01      	subs	r6, #1
 8006dc2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006dc4:	e775      	b.n	8006cb2 <_dtoa_r+0x102>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e7b6      	b.n	8006d38 <_dtoa_r+0x188>
 8006dca:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006dcc:	e7b5      	b.n	8006d3a <_dtoa_r+0x18a>
 8006dce:	427b      	negs	r3, r7
 8006dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	eba8 0807 	sub.w	r8, r8, r7
 8006dd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8006dda:	e7c2      	b.n	8006d62 <_dtoa_r+0x1b2>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006de0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dc35      	bgt.n	8006e52 <_dtoa_r+0x2a2>
 8006de6:	2301      	movs	r3, #1
 8006de8:	461a      	mov	r2, r3
 8006dea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006dee:	9221      	str	r2, [sp, #132]	@ 0x84
 8006df0:	e00b      	b.n	8006e0a <_dtoa_r+0x25a>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e7f3      	b.n	8006dde <_dtoa_r+0x22e>
 8006df6:	2300      	movs	r3, #0
 8006df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	9308      	str	r3, [sp, #32]
 8006e00:	3301      	adds	r3, #1
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	9307      	str	r3, [sp, #28]
 8006e06:	bfb8      	it	lt
 8006e08:	2301      	movlt	r3, #1
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e12:	f102 0514 	add.w	r5, r2, #20
 8006e16:	429d      	cmp	r5, r3
 8006e18:	d91f      	bls.n	8006e5a <_dtoa_r+0x2aa>
 8006e1a:	6041      	str	r1, [r0, #4]
 8006e1c:	4658      	mov	r0, fp
 8006e1e:	f000 ff45 	bl	8007cac <_Balloc>
 8006e22:	4682      	mov	sl, r0
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d139      	bne.n	8006e9c <_dtoa_r+0x2ec>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e98 <_dtoa_r+0x2e8>)
 8006e30:	e6d2      	b.n	8006bd8 <_dtoa_r+0x28>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7e0      	b.n	8006df8 <_dtoa_r+0x248>
 8006e36:	2401      	movs	r4, #1
 8006e38:	2300      	movs	r3, #0
 8006e3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e3c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e42:	2200      	movs	r2, #0
 8006e44:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006e48:	2312      	movs	r3, #18
 8006e4a:	e7d0      	b.n	8006dee <_dtoa_r+0x23e>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e50:	e7f5      	b.n	8006e3e <_dtoa_r+0x28e>
 8006e52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006e58:	e7d7      	b.n	8006e0a <_dtoa_r+0x25a>
 8006e5a:	3101      	adds	r1, #1
 8006e5c:	0052      	lsls	r2, r2, #1
 8006e5e:	e7d8      	b.n	8006e12 <_dtoa_r+0x262>
 8006e60:	636f4361 	.word	0x636f4361
 8006e64:	3fd287a7 	.word	0x3fd287a7
 8006e68:	8b60c8b3 	.word	0x8b60c8b3
 8006e6c:	3fc68a28 	.word	0x3fc68a28
 8006e70:	509f79fb 	.word	0x509f79fb
 8006e74:	3fd34413 	.word	0x3fd34413
 8006e78:	08008f6b 	.word	0x08008f6b
 8006e7c:	08008f82 	.word	0x08008f82
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	08008f67 	.word	0x08008f67
 8006e88:	08008f3b 	.word	0x08008f3b
 8006e8c:	08008f3a 	.word	0x08008f3a
 8006e90:	3ff80000 	.word	0x3ff80000
 8006e94:	08009090 	.word	0x08009090
 8006e98:	08008fda 	.word	0x08008fda
 8006e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ea0:	6018      	str	r0, [r3, #0]
 8006ea2:	9b07      	ldr	r3, [sp, #28]
 8006ea4:	2b0e      	cmp	r3, #14
 8006ea6:	f200 80a4 	bhi.w	8006ff2 <_dtoa_r+0x442>
 8006eaa:	2c00      	cmp	r4, #0
 8006eac:	f000 80a1 	beq.w	8006ff2 <_dtoa_r+0x442>
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	dd33      	ble.n	8006f1c <_dtoa_r+0x36c>
 8006eb4:	4b86      	ldr	r3, [pc, #536]	@ (80070d0 <_dtoa_r+0x520>)
 8006eb6:	f007 020f 	and.w	r2, r7, #15
 8006eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ebe:	05f8      	lsls	r0, r7, #23
 8006ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ec4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ec8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ecc:	d516      	bpl.n	8006efc <_dtoa_r+0x34c>
 8006ece:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ed2:	4b80      	ldr	r3, [pc, #512]	@ (80070d4 <_dtoa_r+0x524>)
 8006ed4:	2603      	movs	r6, #3
 8006ed6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006eda:	f7f9 fc27 	bl	800072c <__aeabi_ddiv>
 8006ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee2:	f004 040f 	and.w	r4, r4, #15
 8006ee6:	4d7b      	ldr	r5, [pc, #492]	@ (80070d4 <_dtoa_r+0x524>)
 8006ee8:	b954      	cbnz	r4, 8006f00 <_dtoa_r+0x350>
 8006eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef2:	f7f9 fc1b 	bl	800072c <__aeabi_ddiv>
 8006ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006efa:	e028      	b.n	8006f4e <_dtoa_r+0x39e>
 8006efc:	2602      	movs	r6, #2
 8006efe:	e7f2      	b.n	8006ee6 <_dtoa_r+0x336>
 8006f00:	07e1      	lsls	r1, r4, #31
 8006f02:	d508      	bpl.n	8006f16 <_dtoa_r+0x366>
 8006f04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f0c:	f7f9 fae4 	bl	80004d8 <__aeabi_dmul>
 8006f10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f14:	3601      	adds	r6, #1
 8006f16:	1064      	asrs	r4, r4, #1
 8006f18:	3508      	adds	r5, #8
 8006f1a:	e7e5      	b.n	8006ee8 <_dtoa_r+0x338>
 8006f1c:	f000 80d2 	beq.w	80070c4 <_dtoa_r+0x514>
 8006f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f24:	427c      	negs	r4, r7
 8006f26:	4b6a      	ldr	r3, [pc, #424]	@ (80070d0 <_dtoa_r+0x520>)
 8006f28:	f004 020f 	and.w	r2, r4, #15
 8006f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 fad0 	bl	80004d8 <__aeabi_dmul>
 8006f38:	2602      	movs	r6, #2
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f40:	4d64      	ldr	r5, [pc, #400]	@ (80070d4 <_dtoa_r+0x524>)
 8006f42:	1124      	asrs	r4, r4, #4
 8006f44:	2c00      	cmp	r4, #0
 8006f46:	f040 80b2 	bne.w	80070ae <_dtoa_r+0x4fe>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1d3      	bne.n	8006ef6 <_dtoa_r+0x346>
 8006f4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80b7 	beq.w	80070c8 <_dtoa_r+0x518>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4b5d      	ldr	r3, [pc, #372]	@ (80070d8 <_dtoa_r+0x528>)
 8006f62:	f7f9 fd2b 	bl	80009bc <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f000 80ae 	beq.w	80070c8 <_dtoa_r+0x518>
 8006f6c:	9b07      	ldr	r3, [sp, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80aa 	beq.w	80070c8 <_dtoa_r+0x518>
 8006f74:	9b08      	ldr	r3, [sp, #32]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	dd37      	ble.n	8006fea <_dtoa_r+0x43a>
 8006f7a:	1e7b      	subs	r3, r7, #1
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	2200      	movs	r2, #0
 8006f82:	4629      	mov	r1, r5
 8006f84:	4b55      	ldr	r3, [pc, #340]	@ (80070dc <_dtoa_r+0x52c>)
 8006f86:	f7f9 faa7 	bl	80004d8 <__aeabi_dmul>
 8006f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f8e:	9c08      	ldr	r4, [sp, #32]
 8006f90:	3601      	adds	r6, #1
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7f9 fa36 	bl	8000404 <__aeabi_i2d>
 8006f98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f9c:	f7f9 fa9c 	bl	80004d8 <__aeabi_dmul>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80070e0 <_dtoa_r+0x530>)
 8006fa4:	f7f9 f8e2 	bl	800016c <__adddf3>
 8006fa8:	4605      	mov	r5, r0
 8006faa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	f040 809a 	bne.w	80070e8 <_dtoa_r+0x538>
 8006fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b4a      	ldr	r3, [pc, #296]	@ (80070e4 <_dtoa_r+0x534>)
 8006fbc:	f7f9 f8d4 	bl	8000168 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fc8:	462a      	mov	r2, r5
 8006fca:	4633      	mov	r3, r6
 8006fcc:	f7f9 fd14 	bl	80009f8 <__aeabi_dcmpgt>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	f040 828e 	bne.w	80074f2 <_dtoa_r+0x942>
 8006fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fda:	462a      	mov	r2, r5
 8006fdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006fe0:	f7f9 fcec 	bl	80009bc <__aeabi_dcmplt>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f040 8127 	bne.w	8007238 <_dtoa_r+0x688>
 8006fea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006fee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006ff2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f2c0 8163 	blt.w	80072c0 <_dtoa_r+0x710>
 8006ffa:	2f0e      	cmp	r7, #14
 8006ffc:	f300 8160 	bgt.w	80072c0 <_dtoa_r+0x710>
 8007000:	4b33      	ldr	r3, [pc, #204]	@ (80070d0 <_dtoa_r+0x520>)
 8007002:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007006:	e9d3 3400 	ldrd	r3, r4, [r3]
 800700a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800700e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007010:	2b00      	cmp	r3, #0
 8007012:	da03      	bge.n	800701c <_dtoa_r+0x46c>
 8007014:	9b07      	ldr	r3, [sp, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f340 8100 	ble.w	800721c <_dtoa_r+0x66c>
 800701c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007020:	4656      	mov	r6, sl
 8007022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 fb7f 	bl	800072c <__aeabi_ddiv>
 800702e:	f7f9 fd03 	bl	8000a38 <__aeabi_d2iz>
 8007032:	4680      	mov	r8, r0
 8007034:	f7f9 f9e6 	bl	8000404 <__aeabi_i2d>
 8007038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800703c:	f7f9 fa4c 	bl	80004d8 <__aeabi_dmul>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4620      	mov	r0, r4
 8007046:	4629      	mov	r1, r5
 8007048:	f7f9 f88e 	bl	8000168 <__aeabi_dsub>
 800704c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007050:	9d07      	ldr	r5, [sp, #28]
 8007052:	f806 4b01 	strb.w	r4, [r6], #1
 8007056:	eba6 040a 	sub.w	r4, r6, sl
 800705a:	42a5      	cmp	r5, r4
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	f040 8116 	bne.w	8007290 <_dtoa_r+0x6e0>
 8007064:	f7f9 f882 	bl	800016c <__adddf3>
 8007068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800706c:	4604      	mov	r4, r0
 800706e:	460d      	mov	r5, r1
 8007070:	f7f9 fcc2 	bl	80009f8 <__aeabi_dcmpgt>
 8007074:	2800      	cmp	r0, #0
 8007076:	f040 80f8 	bne.w	800726a <_dtoa_r+0x6ba>
 800707a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 fc91 	bl	80009a8 <__aeabi_dcmpeq>
 8007086:	b118      	cbz	r0, 8007090 <_dtoa_r+0x4e0>
 8007088:	f018 0f01 	tst.w	r8, #1
 800708c:	f040 80ed 	bne.w	800726a <_dtoa_r+0x6ba>
 8007090:	4649      	mov	r1, r9
 8007092:	4658      	mov	r0, fp
 8007094:	f000 fe4a 	bl	8007d2c <_Bfree>
 8007098:	2300      	movs	r3, #0
 800709a:	7033      	strb	r3, [r6, #0]
 800709c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800709e:	3701      	adds	r7, #1
 80070a0:	601f      	str	r7, [r3, #0]
 80070a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8320 	beq.w	80076ea <_dtoa_r+0xb3a>
 80070aa:	601e      	str	r6, [r3, #0]
 80070ac:	e31d      	b.n	80076ea <_dtoa_r+0xb3a>
 80070ae:	07e2      	lsls	r2, r4, #31
 80070b0:	d505      	bpl.n	80070be <_dtoa_r+0x50e>
 80070b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070b6:	f7f9 fa0f 	bl	80004d8 <__aeabi_dmul>
 80070ba:	2301      	movs	r3, #1
 80070bc:	3601      	adds	r6, #1
 80070be:	1064      	asrs	r4, r4, #1
 80070c0:	3508      	adds	r5, #8
 80070c2:	e73f      	b.n	8006f44 <_dtoa_r+0x394>
 80070c4:	2602      	movs	r6, #2
 80070c6:	e742      	b.n	8006f4e <_dtoa_r+0x39e>
 80070c8:	9c07      	ldr	r4, [sp, #28]
 80070ca:	9704      	str	r7, [sp, #16]
 80070cc:	e761      	b.n	8006f92 <_dtoa_r+0x3e2>
 80070ce:	bf00      	nop
 80070d0:	08009090 	.word	0x08009090
 80070d4:	08009068 	.word	0x08009068
 80070d8:	3ff00000 	.word	0x3ff00000
 80070dc:	40240000 	.word	0x40240000
 80070e0:	401c0000 	.word	0x401c0000
 80070e4:	40140000 	.word	0x40140000
 80070e8:	4b70      	ldr	r3, [pc, #448]	@ (80072ac <_dtoa_r+0x6fc>)
 80070ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070f4:	4454      	add	r4, sl
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d045      	beq.n	8007186 <_dtoa_r+0x5d6>
 80070fa:	2000      	movs	r0, #0
 80070fc:	496c      	ldr	r1, [pc, #432]	@ (80072b0 <_dtoa_r+0x700>)
 80070fe:	f7f9 fb15 	bl	800072c <__aeabi_ddiv>
 8007102:	4633      	mov	r3, r6
 8007104:	462a      	mov	r2, r5
 8007106:	f7f9 f82f 	bl	8000168 <__aeabi_dsub>
 800710a:	4656      	mov	r6, sl
 800710c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007114:	f7f9 fc90 	bl	8000a38 <__aeabi_d2iz>
 8007118:	4605      	mov	r5, r0
 800711a:	f7f9 f973 	bl	8000404 <__aeabi_i2d>
 800711e:	4602      	mov	r2, r0
 8007120:	460b      	mov	r3, r1
 8007122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007126:	f7f9 f81f 	bl	8000168 <__aeabi_dsub>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	3530      	adds	r5, #48	@ 0x30
 8007130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007134:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007138:	f806 5b01 	strb.w	r5, [r6], #1
 800713c:	f7f9 fc3e 	bl	80009bc <__aeabi_dcmplt>
 8007140:	2800      	cmp	r0, #0
 8007142:	d163      	bne.n	800720c <_dtoa_r+0x65c>
 8007144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007148:	2000      	movs	r0, #0
 800714a:	495a      	ldr	r1, [pc, #360]	@ (80072b4 <_dtoa_r+0x704>)
 800714c:	f7f9 f80c 	bl	8000168 <__aeabi_dsub>
 8007150:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007154:	f7f9 fc32 	bl	80009bc <__aeabi_dcmplt>
 8007158:	2800      	cmp	r0, #0
 800715a:	f040 8087 	bne.w	800726c <_dtoa_r+0x6bc>
 800715e:	42a6      	cmp	r6, r4
 8007160:	f43f af43 	beq.w	8006fea <_dtoa_r+0x43a>
 8007164:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007168:	2200      	movs	r2, #0
 800716a:	4b53      	ldr	r3, [pc, #332]	@ (80072b8 <_dtoa_r+0x708>)
 800716c:	f7f9 f9b4 	bl	80004d8 <__aeabi_dmul>
 8007170:	2200      	movs	r2, #0
 8007172:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800717a:	4b4f      	ldr	r3, [pc, #316]	@ (80072b8 <_dtoa_r+0x708>)
 800717c:	f7f9 f9ac 	bl	80004d8 <__aeabi_dmul>
 8007180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007184:	e7c4      	b.n	8007110 <_dtoa_r+0x560>
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	f7f9 f9a5 	bl	80004d8 <__aeabi_dmul>
 800718e:	4656      	mov	r6, sl
 8007190:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007194:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800719a:	f7f9 fc4d 	bl	8000a38 <__aeabi_d2iz>
 800719e:	4605      	mov	r5, r0
 80071a0:	f7f9 f930 	bl	8000404 <__aeabi_i2d>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ac:	f7f8 ffdc 	bl	8000168 <__aeabi_dsub>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	3530      	adds	r5, #48	@ 0x30
 80071b6:	f806 5b01 	strb.w	r5, [r6], #1
 80071ba:	42a6      	cmp	r6, r4
 80071bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	d124      	bne.n	8007210 <_dtoa_r+0x660>
 80071c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071ca:	4b39      	ldr	r3, [pc, #228]	@ (80072b0 <_dtoa_r+0x700>)
 80071cc:	f7f8 ffce 	bl	800016c <__adddf3>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d8:	f7f9 fc0e 	bl	80009f8 <__aeabi_dcmpgt>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d145      	bne.n	800726c <_dtoa_r+0x6bc>
 80071e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071e4:	2000      	movs	r0, #0
 80071e6:	4932      	ldr	r1, [pc, #200]	@ (80072b0 <_dtoa_r+0x700>)
 80071e8:	f7f8 ffbe 	bl	8000168 <__aeabi_dsub>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f4:	f7f9 fbe2 	bl	80009bc <__aeabi_dcmplt>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f43f aef6 	beq.w	8006fea <_dtoa_r+0x43a>
 80071fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007200:	1e73      	subs	r3, r6, #1
 8007202:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007204:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007208:	2b30      	cmp	r3, #48	@ 0x30
 800720a:	d0f8      	beq.n	80071fe <_dtoa_r+0x64e>
 800720c:	9f04      	ldr	r7, [sp, #16]
 800720e:	e73f      	b.n	8007090 <_dtoa_r+0x4e0>
 8007210:	4b29      	ldr	r3, [pc, #164]	@ (80072b8 <_dtoa_r+0x708>)
 8007212:	f7f9 f961 	bl	80004d8 <__aeabi_dmul>
 8007216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800721a:	e7bc      	b.n	8007196 <_dtoa_r+0x5e6>
 800721c:	d10c      	bne.n	8007238 <_dtoa_r+0x688>
 800721e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007222:	2200      	movs	r2, #0
 8007224:	4b25      	ldr	r3, [pc, #148]	@ (80072bc <_dtoa_r+0x70c>)
 8007226:	f7f9 f957 	bl	80004d8 <__aeabi_dmul>
 800722a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800722e:	f7f9 fbd9 	bl	80009e4 <__aeabi_dcmpge>
 8007232:	2800      	cmp	r0, #0
 8007234:	f000 815b 	beq.w	80074ee <_dtoa_r+0x93e>
 8007238:	2400      	movs	r4, #0
 800723a:	4625      	mov	r5, r4
 800723c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800723e:	4656      	mov	r6, sl
 8007240:	43db      	mvns	r3, r3
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	2700      	movs	r7, #0
 8007246:	4621      	mov	r1, r4
 8007248:	4658      	mov	r0, fp
 800724a:	f000 fd6f 	bl	8007d2c <_Bfree>
 800724e:	2d00      	cmp	r5, #0
 8007250:	d0dc      	beq.n	800720c <_dtoa_r+0x65c>
 8007252:	b12f      	cbz	r7, 8007260 <_dtoa_r+0x6b0>
 8007254:	42af      	cmp	r7, r5
 8007256:	d003      	beq.n	8007260 <_dtoa_r+0x6b0>
 8007258:	4639      	mov	r1, r7
 800725a:	4658      	mov	r0, fp
 800725c:	f000 fd66 	bl	8007d2c <_Bfree>
 8007260:	4629      	mov	r1, r5
 8007262:	4658      	mov	r0, fp
 8007264:	f000 fd62 	bl	8007d2c <_Bfree>
 8007268:	e7d0      	b.n	800720c <_dtoa_r+0x65c>
 800726a:	9704      	str	r7, [sp, #16]
 800726c:	4633      	mov	r3, r6
 800726e:	461e      	mov	r6, r3
 8007270:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007274:	2a39      	cmp	r2, #57	@ 0x39
 8007276:	d107      	bne.n	8007288 <_dtoa_r+0x6d8>
 8007278:	459a      	cmp	sl, r3
 800727a:	d1f8      	bne.n	800726e <_dtoa_r+0x6be>
 800727c:	9a04      	ldr	r2, [sp, #16]
 800727e:	3201      	adds	r2, #1
 8007280:	9204      	str	r2, [sp, #16]
 8007282:	2230      	movs	r2, #48	@ 0x30
 8007284:	f88a 2000 	strb.w	r2, [sl]
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	3201      	adds	r2, #1
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e7bd      	b.n	800720c <_dtoa_r+0x65c>
 8007290:	2200      	movs	r2, #0
 8007292:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <_dtoa_r+0x708>)
 8007294:	f7f9 f920 	bl	80004d8 <__aeabi_dmul>
 8007298:	2200      	movs	r2, #0
 800729a:	2300      	movs	r3, #0
 800729c:	4604      	mov	r4, r0
 800729e:	460d      	mov	r5, r1
 80072a0:	f7f9 fb82 	bl	80009a8 <__aeabi_dcmpeq>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f43f aebc 	beq.w	8007022 <_dtoa_r+0x472>
 80072aa:	e6f1      	b.n	8007090 <_dtoa_r+0x4e0>
 80072ac:	08009090 	.word	0x08009090
 80072b0:	3fe00000 	.word	0x3fe00000
 80072b4:	3ff00000 	.word	0x3ff00000
 80072b8:	40240000 	.word	0x40240000
 80072bc:	40140000 	.word	0x40140000
 80072c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	f000 80db 	beq.w	800747e <_dtoa_r+0x8ce>
 80072c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072ca:	2a01      	cmp	r2, #1
 80072cc:	f300 80bf 	bgt.w	800744e <_dtoa_r+0x89e>
 80072d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072d2:	2a00      	cmp	r2, #0
 80072d4:	f000 80b7 	beq.w	8007446 <_dtoa_r+0x896>
 80072d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072dc:	4646      	mov	r6, r8
 80072de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e2:	2101      	movs	r1, #1
 80072e4:	441a      	add	r2, r3
 80072e6:	4658      	mov	r0, fp
 80072e8:	4498      	add	r8, r3
 80072ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80072ec:	f000 fdd2 	bl	8007e94 <__i2b>
 80072f0:	4605      	mov	r5, r0
 80072f2:	b15e      	cbz	r6, 800730c <_dtoa_r+0x75c>
 80072f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	dd08      	ble.n	800730c <_dtoa_r+0x75c>
 80072fa:	42b3      	cmp	r3, r6
 80072fc:	bfa8      	it	ge
 80072fe:	4633      	movge	r3, r6
 8007300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007302:	eba8 0803 	sub.w	r8, r8, r3
 8007306:	1af6      	subs	r6, r6, r3
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	9309      	str	r3, [sp, #36]	@ 0x24
 800730c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800730e:	b1f3      	cbz	r3, 800734e <_dtoa_r+0x79e>
 8007310:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80b7 	beq.w	8007486 <_dtoa_r+0x8d6>
 8007318:	b18c      	cbz	r4, 800733e <_dtoa_r+0x78e>
 800731a:	4629      	mov	r1, r5
 800731c:	4622      	mov	r2, r4
 800731e:	4658      	mov	r0, fp
 8007320:	f000 fe76 	bl	8008010 <__pow5mult>
 8007324:	464a      	mov	r2, r9
 8007326:	4601      	mov	r1, r0
 8007328:	4605      	mov	r5, r0
 800732a:	4658      	mov	r0, fp
 800732c:	f000 fdc8 	bl	8007ec0 <__multiply>
 8007330:	4649      	mov	r1, r9
 8007332:	9004      	str	r0, [sp, #16]
 8007334:	4658      	mov	r0, fp
 8007336:	f000 fcf9 	bl	8007d2c <_Bfree>
 800733a:	9b04      	ldr	r3, [sp, #16]
 800733c:	4699      	mov	r9, r3
 800733e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007340:	1b1a      	subs	r2, r3, r4
 8007342:	d004      	beq.n	800734e <_dtoa_r+0x79e>
 8007344:	4649      	mov	r1, r9
 8007346:	4658      	mov	r0, fp
 8007348:	f000 fe62 	bl	8008010 <__pow5mult>
 800734c:	4681      	mov	r9, r0
 800734e:	2101      	movs	r1, #1
 8007350:	4658      	mov	r0, fp
 8007352:	f000 fd9f 	bl	8007e94 <__i2b>
 8007356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007358:	4604      	mov	r4, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 81c9 	beq.w	80076f2 <_dtoa_r+0xb42>
 8007360:	461a      	mov	r2, r3
 8007362:	4601      	mov	r1, r0
 8007364:	4658      	mov	r0, fp
 8007366:	f000 fe53 	bl	8008010 <__pow5mult>
 800736a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800736c:	4604      	mov	r4, r0
 800736e:	2b01      	cmp	r3, #1
 8007370:	f300 808f 	bgt.w	8007492 <_dtoa_r+0x8e2>
 8007374:	9b02      	ldr	r3, [sp, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f040 8087 	bne.w	800748a <_dtoa_r+0x8da>
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8083 	bne.w	800748e <_dtoa_r+0x8de>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800738e:	0d1b      	lsrs	r3, r3, #20
 8007390:	051b      	lsls	r3, r3, #20
 8007392:	b12b      	cbz	r3, 80073a0 <_dtoa_r+0x7f0>
 8007394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007396:	f108 0801 	add.w	r8, r8, #1
 800739a:	3301      	adds	r3, #1
 800739c:	9309      	str	r3, [sp, #36]	@ 0x24
 800739e:	2301      	movs	r3, #1
 80073a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 81aa 	beq.w	80076fe <_dtoa_r+0xb4e>
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073b0:	6918      	ldr	r0, [r3, #16]
 80073b2:	f000 fd23 	bl	8007dfc <__hi0bits>
 80073b6:	f1c0 0020 	rsb	r0, r0, #32
 80073ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073bc:	4418      	add	r0, r3
 80073be:	f010 001f 	ands.w	r0, r0, #31
 80073c2:	d071      	beq.n	80074a8 <_dtoa_r+0x8f8>
 80073c4:	f1c0 0320 	rsb	r3, r0, #32
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	dd65      	ble.n	8007498 <_dtoa_r+0x8e8>
 80073cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ce:	f1c0 001c 	rsb	r0, r0, #28
 80073d2:	4403      	add	r3, r0
 80073d4:	4480      	add	r8, r0
 80073d6:	4406      	add	r6, r0
 80073d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073da:	f1b8 0f00 	cmp.w	r8, #0
 80073de:	dd05      	ble.n	80073ec <_dtoa_r+0x83c>
 80073e0:	4649      	mov	r1, r9
 80073e2:	4642      	mov	r2, r8
 80073e4:	4658      	mov	r0, fp
 80073e6:	f000 fe6d 	bl	80080c4 <__lshift>
 80073ea:	4681      	mov	r9, r0
 80073ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	dd05      	ble.n	80073fe <_dtoa_r+0x84e>
 80073f2:	4621      	mov	r1, r4
 80073f4:	461a      	mov	r2, r3
 80073f6:	4658      	mov	r0, fp
 80073f8:	f000 fe64 	bl	80080c4 <__lshift>
 80073fc:	4604      	mov	r4, r0
 80073fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d053      	beq.n	80074ac <_dtoa_r+0x8fc>
 8007404:	4621      	mov	r1, r4
 8007406:	4648      	mov	r0, r9
 8007408:	f000 fec8 	bl	800819c <__mcmp>
 800740c:	2800      	cmp	r0, #0
 800740e:	da4d      	bge.n	80074ac <_dtoa_r+0x8fc>
 8007410:	1e7b      	subs	r3, r7, #1
 8007412:	4649      	mov	r1, r9
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	220a      	movs	r2, #10
 8007418:	2300      	movs	r3, #0
 800741a:	4658      	mov	r0, fp
 800741c:	f000 fca8 	bl	8007d70 <__multadd>
 8007420:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007422:	4681      	mov	r9, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 816c 	beq.w	8007702 <_dtoa_r+0xb52>
 800742a:	2300      	movs	r3, #0
 800742c:	4629      	mov	r1, r5
 800742e:	220a      	movs	r2, #10
 8007430:	4658      	mov	r0, fp
 8007432:	f000 fc9d 	bl	8007d70 <__multadd>
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	4605      	mov	r5, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc61      	bgt.n	8007502 <_dtoa_r+0x952>
 800743e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007440:	2b02      	cmp	r3, #2
 8007442:	dc3b      	bgt.n	80074bc <_dtoa_r+0x90c>
 8007444:	e05d      	b.n	8007502 <_dtoa_r+0x952>
 8007446:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007448:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800744c:	e746      	b.n	80072dc <_dtoa_r+0x72c>
 800744e:	9b07      	ldr	r3, [sp, #28]
 8007450:	1e5c      	subs	r4, r3, #1
 8007452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007454:	42a3      	cmp	r3, r4
 8007456:	bfbf      	itttt	lt
 8007458:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800745a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800745c:	1ae3      	sublt	r3, r4, r3
 800745e:	18d2      	addlt	r2, r2, r3
 8007460:	bfa8      	it	ge
 8007462:	1b1c      	subge	r4, r3, r4
 8007464:	9b07      	ldr	r3, [sp, #28]
 8007466:	bfbe      	ittt	lt
 8007468:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800746a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800746c:	2400      	movlt	r4, #0
 800746e:	2b00      	cmp	r3, #0
 8007470:	bfb5      	itete	lt
 8007472:	eba8 0603 	sublt.w	r6, r8, r3
 8007476:	4646      	movge	r6, r8
 8007478:	2300      	movlt	r3, #0
 800747a:	9b07      	ldrge	r3, [sp, #28]
 800747c:	e730      	b.n	80072e0 <_dtoa_r+0x730>
 800747e:	4646      	mov	r6, r8
 8007480:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007482:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007484:	e735      	b.n	80072f2 <_dtoa_r+0x742>
 8007486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007488:	e75c      	b.n	8007344 <_dtoa_r+0x794>
 800748a:	2300      	movs	r3, #0
 800748c:	e788      	b.n	80073a0 <_dtoa_r+0x7f0>
 800748e:	9b02      	ldr	r3, [sp, #8]
 8007490:	e786      	b.n	80073a0 <_dtoa_r+0x7f0>
 8007492:	2300      	movs	r3, #0
 8007494:	930a      	str	r3, [sp, #40]	@ 0x28
 8007496:	e788      	b.n	80073aa <_dtoa_r+0x7fa>
 8007498:	d09f      	beq.n	80073da <_dtoa_r+0x82a>
 800749a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800749c:	331c      	adds	r3, #28
 800749e:	441a      	add	r2, r3
 80074a0:	4498      	add	r8, r3
 80074a2:	441e      	add	r6, r3
 80074a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a6:	e798      	b.n	80073da <_dtoa_r+0x82a>
 80074a8:	4603      	mov	r3, r0
 80074aa:	e7f6      	b.n	800749a <_dtoa_r+0x8ea>
 80074ac:	9b07      	ldr	r3, [sp, #28]
 80074ae:	9704      	str	r7, [sp, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dc20      	bgt.n	80074f6 <_dtoa_r+0x946>
 80074b4:	9308      	str	r3, [sp, #32]
 80074b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	dd1e      	ble.n	80074fa <_dtoa_r+0x94a>
 80074bc:	9b08      	ldr	r3, [sp, #32]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f aebc 	bne.w	800723c <_dtoa_r+0x68c>
 80074c4:	4621      	mov	r1, r4
 80074c6:	2205      	movs	r2, #5
 80074c8:	4658      	mov	r0, fp
 80074ca:	f000 fc51 	bl	8007d70 <__multadd>
 80074ce:	4601      	mov	r1, r0
 80074d0:	4604      	mov	r4, r0
 80074d2:	4648      	mov	r0, r9
 80074d4:	f000 fe62 	bl	800819c <__mcmp>
 80074d8:	2800      	cmp	r0, #0
 80074da:	f77f aeaf 	ble.w	800723c <_dtoa_r+0x68c>
 80074de:	2331      	movs	r3, #49	@ 0x31
 80074e0:	4656      	mov	r6, sl
 80074e2:	f806 3b01 	strb.w	r3, [r6], #1
 80074e6:	9b04      	ldr	r3, [sp, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	9304      	str	r3, [sp, #16]
 80074ec:	e6aa      	b.n	8007244 <_dtoa_r+0x694>
 80074ee:	9c07      	ldr	r4, [sp, #28]
 80074f0:	9704      	str	r7, [sp, #16]
 80074f2:	4625      	mov	r5, r4
 80074f4:	e7f3      	b.n	80074de <_dtoa_r+0x92e>
 80074f6:	9b07      	ldr	r3, [sp, #28]
 80074f8:	9308      	str	r3, [sp, #32]
 80074fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8104 	beq.w	800770a <_dtoa_r+0xb5a>
 8007502:	2e00      	cmp	r6, #0
 8007504:	dd05      	ble.n	8007512 <_dtoa_r+0x962>
 8007506:	4629      	mov	r1, r5
 8007508:	4632      	mov	r2, r6
 800750a:	4658      	mov	r0, fp
 800750c:	f000 fdda 	bl	80080c4 <__lshift>
 8007510:	4605      	mov	r5, r0
 8007512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	d05a      	beq.n	80075ce <_dtoa_r+0xa1e>
 8007518:	4658      	mov	r0, fp
 800751a:	6869      	ldr	r1, [r5, #4]
 800751c:	f000 fbc6 	bl	8007cac <_Balloc>
 8007520:	4606      	mov	r6, r0
 8007522:	b928      	cbnz	r0, 8007530 <_dtoa_r+0x980>
 8007524:	4602      	mov	r2, r0
 8007526:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800752a:	4b83      	ldr	r3, [pc, #524]	@ (8007738 <_dtoa_r+0xb88>)
 800752c:	f7ff bb54 	b.w	8006bd8 <_dtoa_r+0x28>
 8007530:	692a      	ldr	r2, [r5, #16]
 8007532:	f105 010c 	add.w	r1, r5, #12
 8007536:	3202      	adds	r2, #2
 8007538:	0092      	lsls	r2, r2, #2
 800753a:	300c      	adds	r0, #12
 800753c:	f001 f818 	bl	8008570 <memcpy>
 8007540:	2201      	movs	r2, #1
 8007542:	4631      	mov	r1, r6
 8007544:	4658      	mov	r0, fp
 8007546:	f000 fdbd 	bl	80080c4 <__lshift>
 800754a:	462f      	mov	r7, r5
 800754c:	4605      	mov	r5, r0
 800754e:	f10a 0301 	add.w	r3, sl, #1
 8007552:	9307      	str	r3, [sp, #28]
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	4453      	add	r3, sl
 8007558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	930a      	str	r3, [sp, #40]	@ 0x28
 8007562:	9b07      	ldr	r3, [sp, #28]
 8007564:	4621      	mov	r1, r4
 8007566:	3b01      	subs	r3, #1
 8007568:	4648      	mov	r0, r9
 800756a:	9302      	str	r3, [sp, #8]
 800756c:	f7ff fa95 	bl	8006a9a <quorem>
 8007570:	4639      	mov	r1, r7
 8007572:	9008      	str	r0, [sp, #32]
 8007574:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007578:	4648      	mov	r0, r9
 800757a:	f000 fe0f 	bl	800819c <__mcmp>
 800757e:	462a      	mov	r2, r5
 8007580:	9009      	str	r0, [sp, #36]	@ 0x24
 8007582:	4621      	mov	r1, r4
 8007584:	4658      	mov	r0, fp
 8007586:	f000 fe25 	bl	80081d4 <__mdiff>
 800758a:	68c2      	ldr	r2, [r0, #12]
 800758c:	4606      	mov	r6, r0
 800758e:	bb02      	cbnz	r2, 80075d2 <_dtoa_r+0xa22>
 8007590:	4601      	mov	r1, r0
 8007592:	4648      	mov	r0, r9
 8007594:	f000 fe02 	bl	800819c <__mcmp>
 8007598:	4602      	mov	r2, r0
 800759a:	4631      	mov	r1, r6
 800759c:	4658      	mov	r0, fp
 800759e:	920c      	str	r2, [sp, #48]	@ 0x30
 80075a0:	f000 fbc4 	bl	8007d2c <_Bfree>
 80075a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075a8:	9e07      	ldr	r6, [sp, #28]
 80075aa:	ea43 0102 	orr.w	r1, r3, r2
 80075ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075b0:	4319      	orrs	r1, r3
 80075b2:	d110      	bne.n	80075d6 <_dtoa_r+0xa26>
 80075b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075b8:	d029      	beq.n	800760e <_dtoa_r+0xa5e>
 80075ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dd02      	ble.n	80075c6 <_dtoa_r+0xa16>
 80075c0:	9b08      	ldr	r3, [sp, #32]
 80075c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80075c6:	9b02      	ldr	r3, [sp, #8]
 80075c8:	f883 8000 	strb.w	r8, [r3]
 80075cc:	e63b      	b.n	8007246 <_dtoa_r+0x696>
 80075ce:	4628      	mov	r0, r5
 80075d0:	e7bb      	b.n	800754a <_dtoa_r+0x99a>
 80075d2:	2201      	movs	r2, #1
 80075d4:	e7e1      	b.n	800759a <_dtoa_r+0x9ea>
 80075d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d8:	2b00      	cmp	r3, #0
 80075da:	db04      	blt.n	80075e6 <_dtoa_r+0xa36>
 80075dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80075de:	430b      	orrs	r3, r1
 80075e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80075e2:	430b      	orrs	r3, r1
 80075e4:	d120      	bne.n	8007628 <_dtoa_r+0xa78>
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	dded      	ble.n	80075c6 <_dtoa_r+0xa16>
 80075ea:	4649      	mov	r1, r9
 80075ec:	2201      	movs	r2, #1
 80075ee:	4658      	mov	r0, fp
 80075f0:	f000 fd68 	bl	80080c4 <__lshift>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4681      	mov	r9, r0
 80075f8:	f000 fdd0 	bl	800819c <__mcmp>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	dc03      	bgt.n	8007608 <_dtoa_r+0xa58>
 8007600:	d1e1      	bne.n	80075c6 <_dtoa_r+0xa16>
 8007602:	f018 0f01 	tst.w	r8, #1
 8007606:	d0de      	beq.n	80075c6 <_dtoa_r+0xa16>
 8007608:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800760c:	d1d8      	bne.n	80075c0 <_dtoa_r+0xa10>
 800760e:	2339      	movs	r3, #57	@ 0x39
 8007610:	9a02      	ldr	r2, [sp, #8]
 8007612:	7013      	strb	r3, [r2, #0]
 8007614:	4633      	mov	r3, r6
 8007616:	461e      	mov	r6, r3
 8007618:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800761c:	3b01      	subs	r3, #1
 800761e:	2a39      	cmp	r2, #57	@ 0x39
 8007620:	d052      	beq.n	80076c8 <_dtoa_r+0xb18>
 8007622:	3201      	adds	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e60e      	b.n	8007246 <_dtoa_r+0x696>
 8007628:	2a00      	cmp	r2, #0
 800762a:	dd07      	ble.n	800763c <_dtoa_r+0xa8c>
 800762c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007630:	d0ed      	beq.n	800760e <_dtoa_r+0xa5e>
 8007632:	9a02      	ldr	r2, [sp, #8]
 8007634:	f108 0301 	add.w	r3, r8, #1
 8007638:	7013      	strb	r3, [r2, #0]
 800763a:	e604      	b.n	8007246 <_dtoa_r+0x696>
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	9a07      	ldr	r2, [sp, #28]
 8007640:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007646:	4293      	cmp	r3, r2
 8007648:	d028      	beq.n	800769c <_dtoa_r+0xaec>
 800764a:	4649      	mov	r1, r9
 800764c:	2300      	movs	r3, #0
 800764e:	220a      	movs	r2, #10
 8007650:	4658      	mov	r0, fp
 8007652:	f000 fb8d 	bl	8007d70 <__multadd>
 8007656:	42af      	cmp	r7, r5
 8007658:	4681      	mov	r9, r0
 800765a:	f04f 0300 	mov.w	r3, #0
 800765e:	f04f 020a 	mov.w	r2, #10
 8007662:	4639      	mov	r1, r7
 8007664:	4658      	mov	r0, fp
 8007666:	d107      	bne.n	8007678 <_dtoa_r+0xac8>
 8007668:	f000 fb82 	bl	8007d70 <__multadd>
 800766c:	4607      	mov	r7, r0
 800766e:	4605      	mov	r5, r0
 8007670:	9b07      	ldr	r3, [sp, #28]
 8007672:	3301      	adds	r3, #1
 8007674:	9307      	str	r3, [sp, #28]
 8007676:	e774      	b.n	8007562 <_dtoa_r+0x9b2>
 8007678:	f000 fb7a 	bl	8007d70 <__multadd>
 800767c:	4629      	mov	r1, r5
 800767e:	4607      	mov	r7, r0
 8007680:	2300      	movs	r3, #0
 8007682:	220a      	movs	r2, #10
 8007684:	4658      	mov	r0, fp
 8007686:	f000 fb73 	bl	8007d70 <__multadd>
 800768a:	4605      	mov	r5, r0
 800768c:	e7f0      	b.n	8007670 <_dtoa_r+0xac0>
 800768e:	9b08      	ldr	r3, [sp, #32]
 8007690:	2700      	movs	r7, #0
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfcc      	ite	gt
 8007696:	461e      	movgt	r6, r3
 8007698:	2601      	movle	r6, #1
 800769a:	4456      	add	r6, sl
 800769c:	4649      	mov	r1, r9
 800769e:	2201      	movs	r2, #1
 80076a0:	4658      	mov	r0, fp
 80076a2:	f000 fd0f 	bl	80080c4 <__lshift>
 80076a6:	4621      	mov	r1, r4
 80076a8:	4681      	mov	r9, r0
 80076aa:	f000 fd77 	bl	800819c <__mcmp>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	dcb0      	bgt.n	8007614 <_dtoa_r+0xa64>
 80076b2:	d102      	bne.n	80076ba <_dtoa_r+0xb0a>
 80076b4:	f018 0f01 	tst.w	r8, #1
 80076b8:	d1ac      	bne.n	8007614 <_dtoa_r+0xa64>
 80076ba:	4633      	mov	r3, r6
 80076bc:	461e      	mov	r6, r3
 80076be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076c2:	2a30      	cmp	r2, #48	@ 0x30
 80076c4:	d0fa      	beq.n	80076bc <_dtoa_r+0xb0c>
 80076c6:	e5be      	b.n	8007246 <_dtoa_r+0x696>
 80076c8:	459a      	cmp	sl, r3
 80076ca:	d1a4      	bne.n	8007616 <_dtoa_r+0xa66>
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	3301      	adds	r3, #1
 80076d0:	9304      	str	r3, [sp, #16]
 80076d2:	2331      	movs	r3, #49	@ 0x31
 80076d4:	f88a 3000 	strb.w	r3, [sl]
 80076d8:	e5b5      	b.n	8007246 <_dtoa_r+0x696>
 80076da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800773c <_dtoa_r+0xb8c>
 80076e0:	b11b      	cbz	r3, 80076ea <_dtoa_r+0xb3a>
 80076e2:	f10a 0308 	add.w	r3, sl, #8
 80076e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	4650      	mov	r0, sl
 80076ec:	b017      	add	sp, #92	@ 0x5c
 80076ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	f77f ae3d 	ble.w	8007374 <_dtoa_r+0x7c4>
 80076fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80076fe:	2001      	movs	r0, #1
 8007700:	e65b      	b.n	80073ba <_dtoa_r+0x80a>
 8007702:	9b08      	ldr	r3, [sp, #32]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f77f aed6 	ble.w	80074b6 <_dtoa_r+0x906>
 800770a:	4656      	mov	r6, sl
 800770c:	4621      	mov	r1, r4
 800770e:	4648      	mov	r0, r9
 8007710:	f7ff f9c3 	bl	8006a9a <quorem>
 8007714:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007718:	9b08      	ldr	r3, [sp, #32]
 800771a:	f806 8b01 	strb.w	r8, [r6], #1
 800771e:	eba6 020a 	sub.w	r2, r6, sl
 8007722:	4293      	cmp	r3, r2
 8007724:	ddb3      	ble.n	800768e <_dtoa_r+0xade>
 8007726:	4649      	mov	r1, r9
 8007728:	2300      	movs	r3, #0
 800772a:	220a      	movs	r2, #10
 800772c:	4658      	mov	r0, fp
 800772e:	f000 fb1f 	bl	8007d70 <__multadd>
 8007732:	4681      	mov	r9, r0
 8007734:	e7ea      	b.n	800770c <_dtoa_r+0xb5c>
 8007736:	bf00      	nop
 8007738:	08008fda 	.word	0x08008fda
 800773c:	08008f5e 	.word	0x08008f5e

08007740 <__ssputs_r>:
 8007740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	461f      	mov	r7, r3
 8007746:	688e      	ldr	r6, [r1, #8]
 8007748:	4682      	mov	sl, r0
 800774a:	42be      	cmp	r6, r7
 800774c:	460c      	mov	r4, r1
 800774e:	4690      	mov	r8, r2
 8007750:	680b      	ldr	r3, [r1, #0]
 8007752:	d82d      	bhi.n	80077b0 <__ssputs_r+0x70>
 8007754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007758:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800775c:	d026      	beq.n	80077ac <__ssputs_r+0x6c>
 800775e:	6965      	ldr	r5, [r4, #20]
 8007760:	6909      	ldr	r1, [r1, #16]
 8007762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007766:	eba3 0901 	sub.w	r9, r3, r1
 800776a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800776e:	1c7b      	adds	r3, r7, #1
 8007770:	444b      	add	r3, r9
 8007772:	106d      	asrs	r5, r5, #1
 8007774:	429d      	cmp	r5, r3
 8007776:	bf38      	it	cc
 8007778:	461d      	movcc	r5, r3
 800777a:	0553      	lsls	r3, r2, #21
 800777c:	d527      	bpl.n	80077ce <__ssputs_r+0x8e>
 800777e:	4629      	mov	r1, r5
 8007780:	f000 f960 	bl	8007a44 <_malloc_r>
 8007784:	4606      	mov	r6, r0
 8007786:	b360      	cbz	r0, 80077e2 <__ssputs_r+0xa2>
 8007788:	464a      	mov	r2, r9
 800778a:	6921      	ldr	r1, [r4, #16]
 800778c:	f000 fef0 	bl	8008570 <memcpy>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	6126      	str	r6, [r4, #16]
 800779e:	444e      	add	r6, r9
 80077a0:	6026      	str	r6, [r4, #0]
 80077a2:	463e      	mov	r6, r7
 80077a4:	6165      	str	r5, [r4, #20]
 80077a6:	eba5 0509 	sub.w	r5, r5, r9
 80077aa:	60a5      	str	r5, [r4, #8]
 80077ac:	42be      	cmp	r6, r7
 80077ae:	d900      	bls.n	80077b2 <__ssputs_r+0x72>
 80077b0:	463e      	mov	r6, r7
 80077b2:	4632      	mov	r2, r6
 80077b4:	4641      	mov	r1, r8
 80077b6:	6820      	ldr	r0, [r4, #0]
 80077b8:	f000 fe69 	bl	800848e <memmove>
 80077bc:	2000      	movs	r0, #0
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	1b9b      	subs	r3, r3, r6
 80077c2:	60a3      	str	r3, [r4, #8]
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	4433      	add	r3, r6
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ce:	462a      	mov	r2, r5
 80077d0:	f000 fe2f 	bl	8008432 <_realloc_r>
 80077d4:	4606      	mov	r6, r0
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d1e0      	bne.n	800779c <__ssputs_r+0x5c>
 80077da:	4650      	mov	r0, sl
 80077dc:	6921      	ldr	r1, [r4, #16]
 80077de:	f000 ff07 	bl	80085f0 <_free_r>
 80077e2:	230c      	movs	r3, #12
 80077e4:	f8ca 3000 	str.w	r3, [sl]
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	e7e9      	b.n	80077ca <__ssputs_r+0x8a>
	...

080077f8 <_svfiprintf_r>:
 80077f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	4698      	mov	r8, r3
 80077fe:	898b      	ldrh	r3, [r1, #12]
 8007800:	4607      	mov	r7, r0
 8007802:	061b      	lsls	r3, r3, #24
 8007804:	460d      	mov	r5, r1
 8007806:	4614      	mov	r4, r2
 8007808:	b09d      	sub	sp, #116	@ 0x74
 800780a:	d510      	bpl.n	800782e <_svfiprintf_r+0x36>
 800780c:	690b      	ldr	r3, [r1, #16]
 800780e:	b973      	cbnz	r3, 800782e <_svfiprintf_r+0x36>
 8007810:	2140      	movs	r1, #64	@ 0x40
 8007812:	f000 f917 	bl	8007a44 <_malloc_r>
 8007816:	6028      	str	r0, [r5, #0]
 8007818:	6128      	str	r0, [r5, #16]
 800781a:	b930      	cbnz	r0, 800782a <_svfiprintf_r+0x32>
 800781c:	230c      	movs	r3, #12
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007824:	b01d      	add	sp, #116	@ 0x74
 8007826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800782a:	2340      	movs	r3, #64	@ 0x40
 800782c:	616b      	str	r3, [r5, #20]
 800782e:	2300      	movs	r3, #0
 8007830:	9309      	str	r3, [sp, #36]	@ 0x24
 8007832:	2320      	movs	r3, #32
 8007834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007838:	2330      	movs	r3, #48	@ 0x30
 800783a:	f04f 0901 	mov.w	r9, #1
 800783e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007842:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80079dc <_svfiprintf_r+0x1e4>
 8007846:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800784a:	4623      	mov	r3, r4
 800784c:	469a      	mov	sl, r3
 800784e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007852:	b10a      	cbz	r2, 8007858 <_svfiprintf_r+0x60>
 8007854:	2a25      	cmp	r2, #37	@ 0x25
 8007856:	d1f9      	bne.n	800784c <_svfiprintf_r+0x54>
 8007858:	ebba 0b04 	subs.w	fp, sl, r4
 800785c:	d00b      	beq.n	8007876 <_svfiprintf_r+0x7e>
 800785e:	465b      	mov	r3, fp
 8007860:	4622      	mov	r2, r4
 8007862:	4629      	mov	r1, r5
 8007864:	4638      	mov	r0, r7
 8007866:	f7ff ff6b 	bl	8007740 <__ssputs_r>
 800786a:	3001      	adds	r0, #1
 800786c:	f000 80a7 	beq.w	80079be <_svfiprintf_r+0x1c6>
 8007870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007872:	445a      	add	r2, fp
 8007874:	9209      	str	r2, [sp, #36]	@ 0x24
 8007876:	f89a 3000 	ldrb.w	r3, [sl]
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 809f 	beq.w	80079be <_svfiprintf_r+0x1c6>
 8007880:	2300      	movs	r3, #0
 8007882:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800788a:	f10a 0a01 	add.w	sl, sl, #1
 800788e:	9304      	str	r3, [sp, #16]
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007896:	931a      	str	r3, [sp, #104]	@ 0x68
 8007898:	4654      	mov	r4, sl
 800789a:	2205      	movs	r2, #5
 800789c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a0:	484e      	ldr	r0, [pc, #312]	@ (80079dc <_svfiprintf_r+0x1e4>)
 80078a2:	f7ff f8ec 	bl	8006a7e <memchr>
 80078a6:	9a04      	ldr	r2, [sp, #16]
 80078a8:	b9d8      	cbnz	r0, 80078e2 <_svfiprintf_r+0xea>
 80078aa:	06d0      	lsls	r0, r2, #27
 80078ac:	bf44      	itt	mi
 80078ae:	2320      	movmi	r3, #32
 80078b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078b4:	0711      	lsls	r1, r2, #28
 80078b6:	bf44      	itt	mi
 80078b8:	232b      	movmi	r3, #43	@ 0x2b
 80078ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078be:	f89a 3000 	ldrb.w	r3, [sl]
 80078c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80078c4:	d015      	beq.n	80078f2 <_svfiprintf_r+0xfa>
 80078c6:	4654      	mov	r4, sl
 80078c8:	2000      	movs	r0, #0
 80078ca:	f04f 0c0a 	mov.w	ip, #10
 80078ce:	9a07      	ldr	r2, [sp, #28]
 80078d0:	4621      	mov	r1, r4
 80078d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078d6:	3b30      	subs	r3, #48	@ 0x30
 80078d8:	2b09      	cmp	r3, #9
 80078da:	d94b      	bls.n	8007974 <_svfiprintf_r+0x17c>
 80078dc:	b1b0      	cbz	r0, 800790c <_svfiprintf_r+0x114>
 80078de:	9207      	str	r2, [sp, #28]
 80078e0:	e014      	b.n	800790c <_svfiprintf_r+0x114>
 80078e2:	eba0 0308 	sub.w	r3, r0, r8
 80078e6:	fa09 f303 	lsl.w	r3, r9, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	46a2      	mov	sl, r4
 80078ee:	9304      	str	r3, [sp, #16]
 80078f0:	e7d2      	b.n	8007898 <_svfiprintf_r+0xa0>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	1d19      	adds	r1, r3, #4
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	9103      	str	r1, [sp, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bfbb      	ittet	lt
 80078fe:	425b      	neglt	r3, r3
 8007900:	f042 0202 	orrlt.w	r2, r2, #2
 8007904:	9307      	strge	r3, [sp, #28]
 8007906:	9307      	strlt	r3, [sp, #28]
 8007908:	bfb8      	it	lt
 800790a:	9204      	strlt	r2, [sp, #16]
 800790c:	7823      	ldrb	r3, [r4, #0]
 800790e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007910:	d10a      	bne.n	8007928 <_svfiprintf_r+0x130>
 8007912:	7863      	ldrb	r3, [r4, #1]
 8007914:	2b2a      	cmp	r3, #42	@ 0x2a
 8007916:	d132      	bne.n	800797e <_svfiprintf_r+0x186>
 8007918:	9b03      	ldr	r3, [sp, #12]
 800791a:	3402      	adds	r4, #2
 800791c:	1d1a      	adds	r2, r3, #4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	9203      	str	r2, [sp, #12]
 8007922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80079e0 <_svfiprintf_r+0x1e8>
 800792c:	2203      	movs	r2, #3
 800792e:	4650      	mov	r0, sl
 8007930:	7821      	ldrb	r1, [r4, #0]
 8007932:	f7ff f8a4 	bl	8006a7e <memchr>
 8007936:	b138      	cbz	r0, 8007948 <_svfiprintf_r+0x150>
 8007938:	2240      	movs	r2, #64	@ 0x40
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	eba0 000a 	sub.w	r0, r0, sl
 8007940:	4082      	lsls	r2, r0
 8007942:	4313      	orrs	r3, r2
 8007944:	3401      	adds	r4, #1
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794c:	2206      	movs	r2, #6
 800794e:	4825      	ldr	r0, [pc, #148]	@ (80079e4 <_svfiprintf_r+0x1ec>)
 8007950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007954:	f7ff f893 	bl	8006a7e <memchr>
 8007958:	2800      	cmp	r0, #0
 800795a:	d036      	beq.n	80079ca <_svfiprintf_r+0x1d2>
 800795c:	4b22      	ldr	r3, [pc, #136]	@ (80079e8 <_svfiprintf_r+0x1f0>)
 800795e:	bb1b      	cbnz	r3, 80079a8 <_svfiprintf_r+0x1b0>
 8007960:	9b03      	ldr	r3, [sp, #12]
 8007962:	3307      	adds	r3, #7
 8007964:	f023 0307 	bic.w	r3, r3, #7
 8007968:	3308      	adds	r3, #8
 800796a:	9303      	str	r3, [sp, #12]
 800796c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800796e:	4433      	add	r3, r6
 8007970:	9309      	str	r3, [sp, #36]	@ 0x24
 8007972:	e76a      	b.n	800784a <_svfiprintf_r+0x52>
 8007974:	460c      	mov	r4, r1
 8007976:	2001      	movs	r0, #1
 8007978:	fb0c 3202 	mla	r2, ip, r2, r3
 800797c:	e7a8      	b.n	80078d0 <_svfiprintf_r+0xd8>
 800797e:	2300      	movs	r3, #0
 8007980:	f04f 0c0a 	mov.w	ip, #10
 8007984:	4619      	mov	r1, r3
 8007986:	3401      	adds	r4, #1
 8007988:	9305      	str	r3, [sp, #20]
 800798a:	4620      	mov	r0, r4
 800798c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007990:	3a30      	subs	r2, #48	@ 0x30
 8007992:	2a09      	cmp	r2, #9
 8007994:	d903      	bls.n	800799e <_svfiprintf_r+0x1a6>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0c6      	beq.n	8007928 <_svfiprintf_r+0x130>
 800799a:	9105      	str	r1, [sp, #20]
 800799c:	e7c4      	b.n	8007928 <_svfiprintf_r+0x130>
 800799e:	4604      	mov	r4, r0
 80079a0:	2301      	movs	r3, #1
 80079a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80079a6:	e7f0      	b.n	800798a <_svfiprintf_r+0x192>
 80079a8:	ab03      	add	r3, sp, #12
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4638      	mov	r0, r7
 80079b0:	4b0e      	ldr	r3, [pc, #56]	@ (80079ec <_svfiprintf_r+0x1f4>)
 80079b2:	a904      	add	r1, sp, #16
 80079b4:	f7fe fb90 	bl	80060d8 <_printf_float>
 80079b8:	1c42      	adds	r2, r0, #1
 80079ba:	4606      	mov	r6, r0
 80079bc:	d1d6      	bne.n	800796c <_svfiprintf_r+0x174>
 80079be:	89ab      	ldrh	r3, [r5, #12]
 80079c0:	065b      	lsls	r3, r3, #25
 80079c2:	f53f af2d 	bmi.w	8007820 <_svfiprintf_r+0x28>
 80079c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079c8:	e72c      	b.n	8007824 <_svfiprintf_r+0x2c>
 80079ca:	ab03      	add	r3, sp, #12
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	462a      	mov	r2, r5
 80079d0:	4638      	mov	r0, r7
 80079d2:	4b06      	ldr	r3, [pc, #24]	@ (80079ec <_svfiprintf_r+0x1f4>)
 80079d4:	a904      	add	r1, sp, #16
 80079d6:	f7fe fe1d 	bl	8006614 <_printf_i>
 80079da:	e7ed      	b.n	80079b8 <_svfiprintf_r+0x1c0>
 80079dc:	08008feb 	.word	0x08008feb
 80079e0:	08008ff1 	.word	0x08008ff1
 80079e4:	08008ff5 	.word	0x08008ff5
 80079e8:	080060d9 	.word	0x080060d9
 80079ec:	08007741 	.word	0x08007741

080079f0 <malloc>:
 80079f0:	4b02      	ldr	r3, [pc, #8]	@ (80079fc <malloc+0xc>)
 80079f2:	4601      	mov	r1, r0
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f000 b825 	b.w	8007a44 <_malloc_r>
 80079fa:	bf00      	nop
 80079fc:	2000002c 	.word	0x2000002c

08007a00 <sbrk_aligned>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	4e0f      	ldr	r6, [pc, #60]	@ (8007a40 <sbrk_aligned+0x40>)
 8007a04:	460c      	mov	r4, r1
 8007a06:	6831      	ldr	r1, [r6, #0]
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b911      	cbnz	r1, 8007a12 <sbrk_aligned+0x12>
 8007a0c:	f000 fd8e 	bl	800852c <_sbrk_r>
 8007a10:	6030      	str	r0, [r6, #0]
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 fd89 	bl	800852c <_sbrk_r>
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	d103      	bne.n	8007a26 <sbrk_aligned+0x26>
 8007a1e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a22:	4620      	mov	r0, r4
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	1cc4      	adds	r4, r0, #3
 8007a28:	f024 0403 	bic.w	r4, r4, #3
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d0f8      	beq.n	8007a22 <sbrk_aligned+0x22>
 8007a30:	1a21      	subs	r1, r4, r0
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 fd7a 	bl	800852c <_sbrk_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d1f2      	bne.n	8007a22 <sbrk_aligned+0x22>
 8007a3c:	e7ef      	b.n	8007a1e <sbrk_aligned+0x1e>
 8007a3e:	bf00      	nop
 8007a40:	200005a4 	.word	0x200005a4

08007a44 <_malloc_r>:
 8007a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	1ccd      	adds	r5, r1, #3
 8007a4a:	f025 0503 	bic.w	r5, r5, #3
 8007a4e:	3508      	adds	r5, #8
 8007a50:	2d0c      	cmp	r5, #12
 8007a52:	bf38      	it	cc
 8007a54:	250c      	movcc	r5, #12
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	4606      	mov	r6, r0
 8007a5a:	db01      	blt.n	8007a60 <_malloc_r+0x1c>
 8007a5c:	42a9      	cmp	r1, r5
 8007a5e:	d904      	bls.n	8007a6a <_malloc_r+0x26>
 8007a60:	230c      	movs	r3, #12
 8007a62:	6033      	str	r3, [r6, #0]
 8007a64:	2000      	movs	r0, #0
 8007a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b40 <_malloc_r+0xfc>
 8007a6e:	f000 f911 	bl	8007c94 <__malloc_lock>
 8007a72:	f8d8 3000 	ldr.w	r3, [r8]
 8007a76:	461c      	mov	r4, r3
 8007a78:	bb44      	cbnz	r4, 8007acc <_malloc_r+0x88>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	f7ff ffbf 	bl	8007a00 <sbrk_aligned>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	4604      	mov	r4, r0
 8007a86:	d158      	bne.n	8007b3a <_malloc_r+0xf6>
 8007a88:	f8d8 4000 	ldr.w	r4, [r8]
 8007a8c:	4627      	mov	r7, r4
 8007a8e:	2f00      	cmp	r7, #0
 8007a90:	d143      	bne.n	8007b1a <_malloc_r+0xd6>
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	d04b      	beq.n	8007b2e <_malloc_r+0xea>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	4639      	mov	r1, r7
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	eb04 0903 	add.w	r9, r4, r3
 8007aa0:	f000 fd44 	bl	800852c <_sbrk_r>
 8007aa4:	4581      	cmp	r9, r0
 8007aa6:	d142      	bne.n	8007b2e <_malloc_r+0xea>
 8007aa8:	6821      	ldr	r1, [r4, #0]
 8007aaa:	4630      	mov	r0, r6
 8007aac:	1a6d      	subs	r5, r5, r1
 8007aae:	4629      	mov	r1, r5
 8007ab0:	f7ff ffa6 	bl	8007a00 <sbrk_aligned>
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d03a      	beq.n	8007b2e <_malloc_r+0xea>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	442b      	add	r3, r5
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	bb62      	cbnz	r2, 8007b20 <_malloc_r+0xdc>
 8007ac6:	f8c8 7000 	str.w	r7, [r8]
 8007aca:	e00f      	b.n	8007aec <_malloc_r+0xa8>
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	1b52      	subs	r2, r2, r5
 8007ad0:	d420      	bmi.n	8007b14 <_malloc_r+0xd0>
 8007ad2:	2a0b      	cmp	r2, #11
 8007ad4:	d917      	bls.n	8007b06 <_malloc_r+0xc2>
 8007ad6:	1961      	adds	r1, r4, r5
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	6025      	str	r5, [r4, #0]
 8007adc:	bf18      	it	ne
 8007ade:	6059      	strne	r1, [r3, #4]
 8007ae0:	6863      	ldr	r3, [r4, #4]
 8007ae2:	bf08      	it	eq
 8007ae4:	f8c8 1000 	streq.w	r1, [r8]
 8007ae8:	5162      	str	r2, [r4, r5]
 8007aea:	604b      	str	r3, [r1, #4]
 8007aec:	4630      	mov	r0, r6
 8007aee:	f000 f8d7 	bl	8007ca0 <__malloc_unlock>
 8007af2:	f104 000b 	add.w	r0, r4, #11
 8007af6:	1d23      	adds	r3, r4, #4
 8007af8:	f020 0007 	bic.w	r0, r0, #7
 8007afc:	1ac2      	subs	r2, r0, r3
 8007afe:	bf1c      	itt	ne
 8007b00:	1a1b      	subne	r3, r3, r0
 8007b02:	50a3      	strne	r3, [r4, r2]
 8007b04:	e7af      	b.n	8007a66 <_malloc_r+0x22>
 8007b06:	6862      	ldr	r2, [r4, #4]
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	bf0c      	ite	eq
 8007b0c:	f8c8 2000 	streq.w	r2, [r8]
 8007b10:	605a      	strne	r2, [r3, #4]
 8007b12:	e7eb      	b.n	8007aec <_malloc_r+0xa8>
 8007b14:	4623      	mov	r3, r4
 8007b16:	6864      	ldr	r4, [r4, #4]
 8007b18:	e7ae      	b.n	8007a78 <_malloc_r+0x34>
 8007b1a:	463c      	mov	r4, r7
 8007b1c:	687f      	ldr	r7, [r7, #4]
 8007b1e:	e7b6      	b.n	8007a8e <_malloc_r+0x4a>
 8007b20:	461a      	mov	r2, r3
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d1fb      	bne.n	8007b20 <_malloc_r+0xdc>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	6053      	str	r3, [r2, #4]
 8007b2c:	e7de      	b.n	8007aec <_malloc_r+0xa8>
 8007b2e:	230c      	movs	r3, #12
 8007b30:	4630      	mov	r0, r6
 8007b32:	6033      	str	r3, [r6, #0]
 8007b34:	f000 f8b4 	bl	8007ca0 <__malloc_unlock>
 8007b38:	e794      	b.n	8007a64 <_malloc_r+0x20>
 8007b3a:	6005      	str	r5, [r0, #0]
 8007b3c:	e7d6      	b.n	8007aec <_malloc_r+0xa8>
 8007b3e:	bf00      	nop
 8007b40:	200005a8 	.word	0x200005a8

08007b44 <__sflush_r>:
 8007b44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	0716      	lsls	r6, r2, #28
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	460c      	mov	r4, r1
 8007b50:	d454      	bmi.n	8007bfc <__sflush_r+0xb8>
 8007b52:	684b      	ldr	r3, [r1, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dc02      	bgt.n	8007b5e <__sflush_r+0x1a>
 8007b58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd48      	ble.n	8007bf0 <__sflush_r+0xac>
 8007b5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b60:	2e00      	cmp	r6, #0
 8007b62:	d045      	beq.n	8007bf0 <__sflush_r+0xac>
 8007b64:	2300      	movs	r3, #0
 8007b66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b6a:	682f      	ldr	r7, [r5, #0]
 8007b6c:	6a21      	ldr	r1, [r4, #32]
 8007b6e:	602b      	str	r3, [r5, #0]
 8007b70:	d030      	beq.n	8007bd4 <__sflush_r+0x90>
 8007b72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	0759      	lsls	r1, r3, #29
 8007b78:	d505      	bpl.n	8007b86 <__sflush_r+0x42>
 8007b7a:	6863      	ldr	r3, [r4, #4]
 8007b7c:	1ad2      	subs	r2, r2, r3
 8007b7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b80:	b10b      	cbz	r3, 8007b86 <__sflush_r+0x42>
 8007b82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b84:	1ad2      	subs	r2, r2, r3
 8007b86:	2300      	movs	r3, #0
 8007b88:	4628      	mov	r0, r5
 8007b8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b8c:	6a21      	ldr	r1, [r4, #32]
 8007b8e:	47b0      	blx	r6
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	d106      	bne.n	8007ba4 <__sflush_r+0x60>
 8007b96:	6829      	ldr	r1, [r5, #0]
 8007b98:	291d      	cmp	r1, #29
 8007b9a:	d82b      	bhi.n	8007bf4 <__sflush_r+0xb0>
 8007b9c:	4a28      	ldr	r2, [pc, #160]	@ (8007c40 <__sflush_r+0xfc>)
 8007b9e:	410a      	asrs	r2, r1
 8007ba0:	07d6      	lsls	r6, r2, #31
 8007ba2:	d427      	bmi.n	8007bf4 <__sflush_r+0xb0>
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	6062      	str	r2, [r4, #4]
 8007ba8:	6922      	ldr	r2, [r4, #16]
 8007baa:	04d9      	lsls	r1, r3, #19
 8007bac:	6022      	str	r2, [r4, #0]
 8007bae:	d504      	bpl.n	8007bba <__sflush_r+0x76>
 8007bb0:	1c42      	adds	r2, r0, #1
 8007bb2:	d101      	bne.n	8007bb8 <__sflush_r+0x74>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b903      	cbnz	r3, 8007bba <__sflush_r+0x76>
 8007bb8:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bbc:	602f      	str	r7, [r5, #0]
 8007bbe:	b1b9      	cbz	r1, 8007bf0 <__sflush_r+0xac>
 8007bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	d002      	beq.n	8007bce <__sflush_r+0x8a>
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 fd11 	bl	80085f0 <_free_r>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bd2:	e00d      	b.n	8007bf0 <__sflush_r+0xac>
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b0      	blx	r6
 8007bda:	4602      	mov	r2, r0
 8007bdc:	1c50      	adds	r0, r2, #1
 8007bde:	d1c9      	bne.n	8007b74 <__sflush_r+0x30>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0c6      	beq.n	8007b74 <__sflush_r+0x30>
 8007be6:	2b1d      	cmp	r3, #29
 8007be8:	d001      	beq.n	8007bee <__sflush_r+0xaa>
 8007bea:	2b16      	cmp	r3, #22
 8007bec:	d11d      	bne.n	8007c2a <__sflush_r+0xe6>
 8007bee:	602f      	str	r7, [r5, #0]
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e021      	b.n	8007c38 <__sflush_r+0xf4>
 8007bf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bf8:	b21b      	sxth	r3, r3
 8007bfa:	e01a      	b.n	8007c32 <__sflush_r+0xee>
 8007bfc:	690f      	ldr	r7, [r1, #16]
 8007bfe:	2f00      	cmp	r7, #0
 8007c00:	d0f6      	beq.n	8007bf0 <__sflush_r+0xac>
 8007c02:	0793      	lsls	r3, r2, #30
 8007c04:	bf18      	it	ne
 8007c06:	2300      	movne	r3, #0
 8007c08:	680e      	ldr	r6, [r1, #0]
 8007c0a:	bf08      	it	eq
 8007c0c:	694b      	ldreq	r3, [r1, #20]
 8007c0e:	1bf6      	subs	r6, r6, r7
 8007c10:	600f      	str	r7, [r1, #0]
 8007c12:	608b      	str	r3, [r1, #8]
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	ddeb      	ble.n	8007bf0 <__sflush_r+0xac>
 8007c18:	4633      	mov	r3, r6
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	6a21      	ldr	r1, [r4, #32]
 8007c20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007c24:	47e0      	blx	ip
 8007c26:	2800      	cmp	r0, #0
 8007c28:	dc07      	bgt.n	8007c3a <__sflush_r+0xf6>
 8007c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c3a:	4407      	add	r7, r0
 8007c3c:	1a36      	subs	r6, r6, r0
 8007c3e:	e7e9      	b.n	8007c14 <__sflush_r+0xd0>
 8007c40:	dfbffffe 	.word	0xdfbffffe

08007c44 <_fflush_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	690b      	ldr	r3, [r1, #16]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b913      	cbnz	r3, 8007c54 <_fflush_r+0x10>
 8007c4e:	2500      	movs	r5, #0
 8007c50:	4628      	mov	r0, r5
 8007c52:	bd38      	pop	{r3, r4, r5, pc}
 8007c54:	b118      	cbz	r0, 8007c5e <_fflush_r+0x1a>
 8007c56:	6a03      	ldr	r3, [r0, #32]
 8007c58:	b90b      	cbnz	r3, 8007c5e <_fflush_r+0x1a>
 8007c5a:	f7fe fea7 	bl	80069ac <__sinit>
 8007c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0f3      	beq.n	8007c4e <_fflush_r+0xa>
 8007c66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c68:	07d0      	lsls	r0, r2, #31
 8007c6a:	d404      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c6c:	0599      	lsls	r1, r3, #22
 8007c6e:	d402      	bmi.n	8007c76 <_fflush_r+0x32>
 8007c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c72:	f7fe ff02 	bl	8006a7a <__retarget_lock_acquire_recursive>
 8007c76:	4628      	mov	r0, r5
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f7ff ff63 	bl	8007b44 <__sflush_r>
 8007c7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c80:	4605      	mov	r5, r0
 8007c82:	07da      	lsls	r2, r3, #31
 8007c84:	d4e4      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	059b      	lsls	r3, r3, #22
 8007c8a:	d4e1      	bmi.n	8007c50 <_fflush_r+0xc>
 8007c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c8e:	f7fe fef5 	bl	8006a7c <__retarget_lock_release_recursive>
 8007c92:	e7dd      	b.n	8007c50 <_fflush_r+0xc>

08007c94 <__malloc_lock>:
 8007c94:	4801      	ldr	r0, [pc, #4]	@ (8007c9c <__malloc_lock+0x8>)
 8007c96:	f7fe bef0 	b.w	8006a7a <__retarget_lock_acquire_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	200005a0 	.word	0x200005a0

08007ca0 <__malloc_unlock>:
 8007ca0:	4801      	ldr	r0, [pc, #4]	@ (8007ca8 <__malloc_unlock+0x8>)
 8007ca2:	f7fe beeb 	b.w	8006a7c <__retarget_lock_release_recursive>
 8007ca6:	bf00      	nop
 8007ca8:	200005a0 	.word	0x200005a0

08007cac <_Balloc>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	69c6      	ldr	r6, [r0, #28]
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	b976      	cbnz	r6, 8007cd4 <_Balloc+0x28>
 8007cb6:	2010      	movs	r0, #16
 8007cb8:	f7ff fe9a 	bl	80079f0 <malloc>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	61e0      	str	r0, [r4, #28]
 8007cc0:	b920      	cbnz	r0, 8007ccc <_Balloc+0x20>
 8007cc2:	216b      	movs	r1, #107	@ 0x6b
 8007cc4:	4b17      	ldr	r3, [pc, #92]	@ (8007d24 <_Balloc+0x78>)
 8007cc6:	4818      	ldr	r0, [pc, #96]	@ (8007d28 <_Balloc+0x7c>)
 8007cc8:	f000 fc60 	bl	800858c <__assert_func>
 8007ccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd0:	6006      	str	r6, [r0, #0]
 8007cd2:	60c6      	str	r6, [r0, #12]
 8007cd4:	69e6      	ldr	r6, [r4, #28]
 8007cd6:	68f3      	ldr	r3, [r6, #12]
 8007cd8:	b183      	cbz	r3, 8007cfc <_Balloc+0x50>
 8007cda:	69e3      	ldr	r3, [r4, #28]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ce2:	b9b8      	cbnz	r0, 8007d14 <_Balloc+0x68>
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	fa01 f605 	lsl.w	r6, r1, r5
 8007cea:	1d72      	adds	r2, r6, #5
 8007cec:	4620      	mov	r0, r4
 8007cee:	0092      	lsls	r2, r2, #2
 8007cf0:	f000 fc6a 	bl	80085c8 <_calloc_r>
 8007cf4:	b160      	cbz	r0, 8007d10 <_Balloc+0x64>
 8007cf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cfa:	e00e      	b.n	8007d1a <_Balloc+0x6e>
 8007cfc:	2221      	movs	r2, #33	@ 0x21
 8007cfe:	2104      	movs	r1, #4
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 fc61 	bl	80085c8 <_calloc_r>
 8007d06:	69e3      	ldr	r3, [r4, #28]
 8007d08:	60f0      	str	r0, [r6, #12]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e4      	bne.n	8007cda <_Balloc+0x2e>
 8007d10:	2000      	movs	r0, #0
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	6802      	ldr	r2, [r0, #0]
 8007d16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d20:	e7f7      	b.n	8007d12 <_Balloc+0x66>
 8007d22:	bf00      	nop
 8007d24:	08008f6b 	.word	0x08008f6b
 8007d28:	08008ffc 	.word	0x08008ffc

08007d2c <_Bfree>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	69c6      	ldr	r6, [r0, #28]
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	b976      	cbnz	r6, 8007d54 <_Bfree+0x28>
 8007d36:	2010      	movs	r0, #16
 8007d38:	f7ff fe5a 	bl	80079f0 <malloc>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	61e8      	str	r0, [r5, #28]
 8007d40:	b920      	cbnz	r0, 8007d4c <_Bfree+0x20>
 8007d42:	218f      	movs	r1, #143	@ 0x8f
 8007d44:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <_Bfree+0x3c>)
 8007d46:	4809      	ldr	r0, [pc, #36]	@ (8007d6c <_Bfree+0x40>)
 8007d48:	f000 fc20 	bl	800858c <__assert_func>
 8007d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d50:	6006      	str	r6, [r0, #0]
 8007d52:	60c6      	str	r6, [r0, #12]
 8007d54:	b13c      	cbz	r4, 8007d66 <_Bfree+0x3a>
 8007d56:	69eb      	ldr	r3, [r5, #28]
 8007d58:	6862      	ldr	r2, [r4, #4]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d60:	6021      	str	r1, [r4, #0]
 8007d62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	08008f6b 	.word	0x08008f6b
 8007d6c:	08008ffc 	.word	0x08008ffc

08007d70 <__multadd>:
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d74:	4607      	mov	r7, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	461e      	mov	r6, r3
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	690d      	ldr	r5, [r1, #16]
 8007d7e:	f101 0c14 	add.w	ip, r1, #20
 8007d82:	f8dc 3000 	ldr.w	r3, [ip]
 8007d86:	3001      	adds	r0, #1
 8007d88:	b299      	uxth	r1, r3
 8007d8a:	fb02 6101 	mla	r1, r2, r1, r6
 8007d8e:	0c1e      	lsrs	r6, r3, #16
 8007d90:	0c0b      	lsrs	r3, r1, #16
 8007d92:	fb02 3306 	mla	r3, r2, r6, r3
 8007d96:	b289      	uxth	r1, r1
 8007d98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d9c:	4285      	cmp	r5, r0
 8007d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007da2:	f84c 1b04 	str.w	r1, [ip], #4
 8007da6:	dcec      	bgt.n	8007d82 <__multadd+0x12>
 8007da8:	b30e      	cbz	r6, 8007dee <__multadd+0x7e>
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	dc19      	bgt.n	8007de4 <__multadd+0x74>
 8007db0:	6861      	ldr	r1, [r4, #4]
 8007db2:	4638      	mov	r0, r7
 8007db4:	3101      	adds	r1, #1
 8007db6:	f7ff ff79 	bl	8007cac <_Balloc>
 8007dba:	4680      	mov	r8, r0
 8007dbc:	b928      	cbnz	r0, 8007dca <__multadd+0x5a>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	21ba      	movs	r1, #186	@ 0xba
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <__multadd+0x84>)
 8007dc4:	480c      	ldr	r0, [pc, #48]	@ (8007df8 <__multadd+0x88>)
 8007dc6:	f000 fbe1 	bl	800858c <__assert_func>
 8007dca:	6922      	ldr	r2, [r4, #16]
 8007dcc:	f104 010c 	add.w	r1, r4, #12
 8007dd0:	3202      	adds	r2, #2
 8007dd2:	0092      	lsls	r2, r2, #2
 8007dd4:	300c      	adds	r0, #12
 8007dd6:	f000 fbcb 	bl	8008570 <memcpy>
 8007dda:	4621      	mov	r1, r4
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f7ff ffa5 	bl	8007d2c <_Bfree>
 8007de2:	4644      	mov	r4, r8
 8007de4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007de8:	3501      	adds	r5, #1
 8007dea:	615e      	str	r6, [r3, #20]
 8007dec:	6125      	str	r5, [r4, #16]
 8007dee:	4620      	mov	r0, r4
 8007df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007df4:	08008fda 	.word	0x08008fda
 8007df8:	08008ffc 	.word	0x08008ffc

08007dfc <__hi0bits>:
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e02:	bf3a      	itte	cc
 8007e04:	0403      	lslcc	r3, r0, #16
 8007e06:	2010      	movcc	r0, #16
 8007e08:	2000      	movcs	r0, #0
 8007e0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e0e:	bf3c      	itt	cc
 8007e10:	021b      	lslcc	r3, r3, #8
 8007e12:	3008      	addcc	r0, #8
 8007e14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e18:	bf3c      	itt	cc
 8007e1a:	011b      	lslcc	r3, r3, #4
 8007e1c:	3004      	addcc	r0, #4
 8007e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e22:	bf3c      	itt	cc
 8007e24:	009b      	lslcc	r3, r3, #2
 8007e26:	3002      	addcc	r0, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	db05      	blt.n	8007e38 <__hi0bits+0x3c>
 8007e2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e30:	f100 0001 	add.w	r0, r0, #1
 8007e34:	bf08      	it	eq
 8007e36:	2020      	moveq	r0, #32
 8007e38:	4770      	bx	lr

08007e3a <__lo0bits>:
 8007e3a:	6803      	ldr	r3, [r0, #0]
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	f013 0007 	ands.w	r0, r3, #7
 8007e42:	d00b      	beq.n	8007e5c <__lo0bits+0x22>
 8007e44:	07d9      	lsls	r1, r3, #31
 8007e46:	d421      	bmi.n	8007e8c <__lo0bits+0x52>
 8007e48:	0798      	lsls	r0, r3, #30
 8007e4a:	bf49      	itett	mi
 8007e4c:	085b      	lsrmi	r3, r3, #1
 8007e4e:	089b      	lsrpl	r3, r3, #2
 8007e50:	2001      	movmi	r0, #1
 8007e52:	6013      	strmi	r3, [r2, #0]
 8007e54:	bf5c      	itt	pl
 8007e56:	2002      	movpl	r0, #2
 8007e58:	6013      	strpl	r3, [r2, #0]
 8007e5a:	4770      	bx	lr
 8007e5c:	b299      	uxth	r1, r3
 8007e5e:	b909      	cbnz	r1, 8007e64 <__lo0bits+0x2a>
 8007e60:	2010      	movs	r0, #16
 8007e62:	0c1b      	lsrs	r3, r3, #16
 8007e64:	b2d9      	uxtb	r1, r3
 8007e66:	b909      	cbnz	r1, 8007e6c <__lo0bits+0x32>
 8007e68:	3008      	adds	r0, #8
 8007e6a:	0a1b      	lsrs	r3, r3, #8
 8007e6c:	0719      	lsls	r1, r3, #28
 8007e6e:	bf04      	itt	eq
 8007e70:	091b      	lsreq	r3, r3, #4
 8007e72:	3004      	addeq	r0, #4
 8007e74:	0799      	lsls	r1, r3, #30
 8007e76:	bf04      	itt	eq
 8007e78:	089b      	lsreq	r3, r3, #2
 8007e7a:	3002      	addeq	r0, #2
 8007e7c:	07d9      	lsls	r1, r3, #31
 8007e7e:	d403      	bmi.n	8007e88 <__lo0bits+0x4e>
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	f100 0001 	add.w	r0, r0, #1
 8007e86:	d003      	beq.n	8007e90 <__lo0bits+0x56>
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	4770      	bx	lr
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	4770      	bx	lr
 8007e90:	2020      	movs	r0, #32
 8007e92:	4770      	bx	lr

08007e94 <__i2b>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	460c      	mov	r4, r1
 8007e98:	2101      	movs	r1, #1
 8007e9a:	f7ff ff07 	bl	8007cac <_Balloc>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	b928      	cbnz	r0, 8007eae <__i2b+0x1a>
 8007ea2:	f240 1145 	movw	r1, #325	@ 0x145
 8007ea6:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <__i2b+0x24>)
 8007ea8:	4804      	ldr	r0, [pc, #16]	@ (8007ebc <__i2b+0x28>)
 8007eaa:	f000 fb6f 	bl	800858c <__assert_func>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	6144      	str	r4, [r0, #20]
 8007eb2:	6103      	str	r3, [r0, #16]
 8007eb4:	bd10      	pop	{r4, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08008fda 	.word	0x08008fda
 8007ebc:	08008ffc 	.word	0x08008ffc

08007ec0 <__multiply>:
 8007ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	690a      	ldr	r2, [r1, #16]
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	460f      	mov	r7, r1
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	bfa2      	ittt	ge
 8007ed0:	4623      	movge	r3, r4
 8007ed2:	460c      	movge	r4, r1
 8007ed4:	461f      	movge	r7, r3
 8007ed6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007eda:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ede:	68a3      	ldr	r3, [r4, #8]
 8007ee0:	6861      	ldr	r1, [r4, #4]
 8007ee2:	eb0a 0609 	add.w	r6, sl, r9
 8007ee6:	42b3      	cmp	r3, r6
 8007ee8:	b085      	sub	sp, #20
 8007eea:	bfb8      	it	lt
 8007eec:	3101      	addlt	r1, #1
 8007eee:	f7ff fedd 	bl	8007cac <_Balloc>
 8007ef2:	b930      	cbnz	r0, 8007f02 <__multiply+0x42>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007efa:	4b43      	ldr	r3, [pc, #268]	@ (8008008 <__multiply+0x148>)
 8007efc:	4843      	ldr	r0, [pc, #268]	@ (800800c <__multiply+0x14c>)
 8007efe:	f000 fb45 	bl	800858c <__assert_func>
 8007f02:	f100 0514 	add.w	r5, r0, #20
 8007f06:	462b      	mov	r3, r5
 8007f08:	2200      	movs	r2, #0
 8007f0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f0e:	4543      	cmp	r3, r8
 8007f10:	d321      	bcc.n	8007f56 <__multiply+0x96>
 8007f12:	f107 0114 	add.w	r1, r7, #20
 8007f16:	f104 0214 	add.w	r2, r4, #20
 8007f1a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f1e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f22:	9302      	str	r3, [sp, #8]
 8007f24:	1b13      	subs	r3, r2, r4
 8007f26:	3b15      	subs	r3, #21
 8007f28:	f023 0303 	bic.w	r3, r3, #3
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	f104 0715 	add.w	r7, r4, #21
 8007f32:	42ba      	cmp	r2, r7
 8007f34:	bf38      	it	cc
 8007f36:	2304      	movcc	r3, #4
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	9b02      	ldr	r3, [sp, #8]
 8007f3c:	9103      	str	r1, [sp, #12]
 8007f3e:	428b      	cmp	r3, r1
 8007f40:	d80c      	bhi.n	8007f5c <__multiply+0x9c>
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	dd03      	ble.n	8007f4e <__multiply+0x8e>
 8007f46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d05a      	beq.n	8008004 <__multiply+0x144>
 8007f4e:	6106      	str	r6, [r0, #16]
 8007f50:	b005      	add	sp, #20
 8007f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f56:	f843 2b04 	str.w	r2, [r3], #4
 8007f5a:	e7d8      	b.n	8007f0e <__multiply+0x4e>
 8007f5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f60:	f1ba 0f00 	cmp.w	sl, #0
 8007f64:	d023      	beq.n	8007fae <__multiply+0xee>
 8007f66:	46a9      	mov	r9, r5
 8007f68:	f04f 0c00 	mov.w	ip, #0
 8007f6c:	f104 0e14 	add.w	lr, r4, #20
 8007f70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f74:	f8d9 3000 	ldr.w	r3, [r9]
 8007f78:	fa1f fb87 	uxth.w	fp, r7
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f82:	4463      	add	r3, ip
 8007f84:	f8d9 c000 	ldr.w	ip, [r9]
 8007f88:	0c3f      	lsrs	r7, r7, #16
 8007f8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f8e:	fb0a c707 	mla	r7, sl, r7, ip
 8007f92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f9c:	4572      	cmp	r2, lr
 8007f9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fa2:	f849 3b04 	str.w	r3, [r9], #4
 8007fa6:	d8e3      	bhi.n	8007f70 <__multiply+0xb0>
 8007fa8:	9b01      	ldr	r3, [sp, #4]
 8007faa:	f845 c003 	str.w	ip, [r5, r3]
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	3104      	adds	r1, #4
 8007fb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fb6:	f1b9 0f00 	cmp.w	r9, #0
 8007fba:	d021      	beq.n	8008000 <__multiply+0x140>
 8007fbc:	46ae      	mov	lr, r5
 8007fbe:	f04f 0a00 	mov.w	sl, #0
 8007fc2:	682b      	ldr	r3, [r5, #0]
 8007fc4:	f104 0c14 	add.w	ip, r4, #20
 8007fc8:	f8bc b000 	ldrh.w	fp, [ip]
 8007fcc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	fb09 770b 	mla	r7, r9, fp, r7
 8007fd6:	4457      	add	r7, sl
 8007fd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fdc:	f84e 3b04 	str.w	r3, [lr], #4
 8007fe0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fe4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fe8:	f8be 3000 	ldrh.w	r3, [lr]
 8007fec:	4562      	cmp	r2, ip
 8007fee:	fb09 330a 	mla	r3, r9, sl, r3
 8007ff2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ffa:	d8e5      	bhi.n	8007fc8 <__multiply+0x108>
 8007ffc:	9f01      	ldr	r7, [sp, #4]
 8007ffe:	51eb      	str	r3, [r5, r7]
 8008000:	3504      	adds	r5, #4
 8008002:	e79a      	b.n	8007f3a <__multiply+0x7a>
 8008004:	3e01      	subs	r6, #1
 8008006:	e79c      	b.n	8007f42 <__multiply+0x82>
 8008008:	08008fda 	.word	0x08008fda
 800800c:	08008ffc 	.word	0x08008ffc

08008010 <__pow5mult>:
 8008010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008014:	4615      	mov	r5, r2
 8008016:	f012 0203 	ands.w	r2, r2, #3
 800801a:	4607      	mov	r7, r0
 800801c:	460e      	mov	r6, r1
 800801e:	d007      	beq.n	8008030 <__pow5mult+0x20>
 8008020:	4c25      	ldr	r4, [pc, #148]	@ (80080b8 <__pow5mult+0xa8>)
 8008022:	3a01      	subs	r2, #1
 8008024:	2300      	movs	r3, #0
 8008026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800802a:	f7ff fea1 	bl	8007d70 <__multadd>
 800802e:	4606      	mov	r6, r0
 8008030:	10ad      	asrs	r5, r5, #2
 8008032:	d03d      	beq.n	80080b0 <__pow5mult+0xa0>
 8008034:	69fc      	ldr	r4, [r7, #28]
 8008036:	b97c      	cbnz	r4, 8008058 <__pow5mult+0x48>
 8008038:	2010      	movs	r0, #16
 800803a:	f7ff fcd9 	bl	80079f0 <malloc>
 800803e:	4602      	mov	r2, r0
 8008040:	61f8      	str	r0, [r7, #28]
 8008042:	b928      	cbnz	r0, 8008050 <__pow5mult+0x40>
 8008044:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008048:	4b1c      	ldr	r3, [pc, #112]	@ (80080bc <__pow5mult+0xac>)
 800804a:	481d      	ldr	r0, [pc, #116]	@ (80080c0 <__pow5mult+0xb0>)
 800804c:	f000 fa9e 	bl	800858c <__assert_func>
 8008050:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008054:	6004      	str	r4, [r0, #0]
 8008056:	60c4      	str	r4, [r0, #12]
 8008058:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800805c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008060:	b94c      	cbnz	r4, 8008076 <__pow5mult+0x66>
 8008062:	f240 2171 	movw	r1, #625	@ 0x271
 8008066:	4638      	mov	r0, r7
 8008068:	f7ff ff14 	bl	8007e94 <__i2b>
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	f8c8 0008 	str.w	r0, [r8, #8]
 8008074:	6003      	str	r3, [r0, #0]
 8008076:	f04f 0900 	mov.w	r9, #0
 800807a:	07eb      	lsls	r3, r5, #31
 800807c:	d50a      	bpl.n	8008094 <__pow5mult+0x84>
 800807e:	4631      	mov	r1, r6
 8008080:	4622      	mov	r2, r4
 8008082:	4638      	mov	r0, r7
 8008084:	f7ff ff1c 	bl	8007ec0 <__multiply>
 8008088:	4680      	mov	r8, r0
 800808a:	4631      	mov	r1, r6
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff fe4d 	bl	8007d2c <_Bfree>
 8008092:	4646      	mov	r6, r8
 8008094:	106d      	asrs	r5, r5, #1
 8008096:	d00b      	beq.n	80080b0 <__pow5mult+0xa0>
 8008098:	6820      	ldr	r0, [r4, #0]
 800809a:	b938      	cbnz	r0, 80080ac <__pow5mult+0x9c>
 800809c:	4622      	mov	r2, r4
 800809e:	4621      	mov	r1, r4
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ff0d 	bl	8007ec0 <__multiply>
 80080a6:	6020      	str	r0, [r4, #0]
 80080a8:	f8c0 9000 	str.w	r9, [r0]
 80080ac:	4604      	mov	r4, r0
 80080ae:	e7e4      	b.n	800807a <__pow5mult+0x6a>
 80080b0:	4630      	mov	r0, r6
 80080b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b6:	bf00      	nop
 80080b8:	08009058 	.word	0x08009058
 80080bc:	08008f6b 	.word	0x08008f6b
 80080c0:	08008ffc 	.word	0x08008ffc

080080c4 <__lshift>:
 80080c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	460c      	mov	r4, r1
 80080ca:	4607      	mov	r7, r0
 80080cc:	4691      	mov	r9, r2
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	6849      	ldr	r1, [r1, #4]
 80080d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080d6:	68a3      	ldr	r3, [r4, #8]
 80080d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080dc:	f108 0601 	add.w	r6, r8, #1
 80080e0:	42b3      	cmp	r3, r6
 80080e2:	db0b      	blt.n	80080fc <__lshift+0x38>
 80080e4:	4638      	mov	r0, r7
 80080e6:	f7ff fde1 	bl	8007cac <_Balloc>
 80080ea:	4605      	mov	r5, r0
 80080ec:	b948      	cbnz	r0, 8008102 <__lshift+0x3e>
 80080ee:	4602      	mov	r2, r0
 80080f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080f4:	4b27      	ldr	r3, [pc, #156]	@ (8008194 <__lshift+0xd0>)
 80080f6:	4828      	ldr	r0, [pc, #160]	@ (8008198 <__lshift+0xd4>)
 80080f8:	f000 fa48 	bl	800858c <__assert_func>
 80080fc:	3101      	adds	r1, #1
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	e7ee      	b.n	80080e0 <__lshift+0x1c>
 8008102:	2300      	movs	r3, #0
 8008104:	f100 0114 	add.w	r1, r0, #20
 8008108:	f100 0210 	add.w	r2, r0, #16
 800810c:	4618      	mov	r0, r3
 800810e:	4553      	cmp	r3, sl
 8008110:	db33      	blt.n	800817a <__lshift+0xb6>
 8008112:	6920      	ldr	r0, [r4, #16]
 8008114:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008118:	f104 0314 	add.w	r3, r4, #20
 800811c:	f019 091f 	ands.w	r9, r9, #31
 8008120:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008124:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008128:	d02b      	beq.n	8008182 <__lshift+0xbe>
 800812a:	468a      	mov	sl, r1
 800812c:	2200      	movs	r2, #0
 800812e:	f1c9 0e20 	rsb	lr, r9, #32
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	fa00 f009 	lsl.w	r0, r0, r9
 8008138:	4310      	orrs	r0, r2
 800813a:	f84a 0b04 	str.w	r0, [sl], #4
 800813e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008142:	459c      	cmp	ip, r3
 8008144:	fa22 f20e 	lsr.w	r2, r2, lr
 8008148:	d8f3      	bhi.n	8008132 <__lshift+0x6e>
 800814a:	ebac 0304 	sub.w	r3, ip, r4
 800814e:	3b15      	subs	r3, #21
 8008150:	f023 0303 	bic.w	r3, r3, #3
 8008154:	3304      	adds	r3, #4
 8008156:	f104 0015 	add.w	r0, r4, #21
 800815a:	4584      	cmp	ip, r0
 800815c:	bf38      	it	cc
 800815e:	2304      	movcc	r3, #4
 8008160:	50ca      	str	r2, [r1, r3]
 8008162:	b10a      	cbz	r2, 8008168 <__lshift+0xa4>
 8008164:	f108 0602 	add.w	r6, r8, #2
 8008168:	3e01      	subs	r6, #1
 800816a:	4638      	mov	r0, r7
 800816c:	4621      	mov	r1, r4
 800816e:	612e      	str	r6, [r5, #16]
 8008170:	f7ff fddc 	bl	8007d2c <_Bfree>
 8008174:	4628      	mov	r0, r5
 8008176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817a:	f842 0f04 	str.w	r0, [r2, #4]!
 800817e:	3301      	adds	r3, #1
 8008180:	e7c5      	b.n	800810e <__lshift+0x4a>
 8008182:	3904      	subs	r1, #4
 8008184:	f853 2b04 	ldr.w	r2, [r3], #4
 8008188:	459c      	cmp	ip, r3
 800818a:	f841 2f04 	str.w	r2, [r1, #4]!
 800818e:	d8f9      	bhi.n	8008184 <__lshift+0xc0>
 8008190:	e7ea      	b.n	8008168 <__lshift+0xa4>
 8008192:	bf00      	nop
 8008194:	08008fda 	.word	0x08008fda
 8008198:	08008ffc 	.word	0x08008ffc

0800819c <__mcmp>:
 800819c:	4603      	mov	r3, r0
 800819e:	690a      	ldr	r2, [r1, #16]
 80081a0:	6900      	ldr	r0, [r0, #16]
 80081a2:	b530      	push	{r4, r5, lr}
 80081a4:	1a80      	subs	r0, r0, r2
 80081a6:	d10e      	bne.n	80081c6 <__mcmp+0x2a>
 80081a8:	3314      	adds	r3, #20
 80081aa:	3114      	adds	r1, #20
 80081ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081bc:	4295      	cmp	r5, r2
 80081be:	d003      	beq.n	80081c8 <__mcmp+0x2c>
 80081c0:	d205      	bcs.n	80081ce <__mcmp+0x32>
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081c6:	bd30      	pop	{r4, r5, pc}
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d3f3      	bcc.n	80081b4 <__mcmp+0x18>
 80081cc:	e7fb      	b.n	80081c6 <__mcmp+0x2a>
 80081ce:	2001      	movs	r0, #1
 80081d0:	e7f9      	b.n	80081c6 <__mcmp+0x2a>
	...

080081d4 <__mdiff>:
 80081d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d8:	4689      	mov	r9, r1
 80081da:	4606      	mov	r6, r0
 80081dc:	4611      	mov	r1, r2
 80081de:	4648      	mov	r0, r9
 80081e0:	4614      	mov	r4, r2
 80081e2:	f7ff ffdb 	bl	800819c <__mcmp>
 80081e6:	1e05      	subs	r5, r0, #0
 80081e8:	d112      	bne.n	8008210 <__mdiff+0x3c>
 80081ea:	4629      	mov	r1, r5
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff fd5d 	bl	8007cac <_Balloc>
 80081f2:	4602      	mov	r2, r0
 80081f4:	b928      	cbnz	r0, 8008202 <__mdiff+0x2e>
 80081f6:	f240 2137 	movw	r1, #567	@ 0x237
 80081fa:	4b3e      	ldr	r3, [pc, #248]	@ (80082f4 <__mdiff+0x120>)
 80081fc:	483e      	ldr	r0, [pc, #248]	@ (80082f8 <__mdiff+0x124>)
 80081fe:	f000 f9c5 	bl	800858c <__assert_func>
 8008202:	2301      	movs	r3, #1
 8008204:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008208:	4610      	mov	r0, r2
 800820a:	b003      	add	sp, #12
 800820c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008210:	bfbc      	itt	lt
 8008212:	464b      	movlt	r3, r9
 8008214:	46a1      	movlt	r9, r4
 8008216:	4630      	mov	r0, r6
 8008218:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800821c:	bfba      	itte	lt
 800821e:	461c      	movlt	r4, r3
 8008220:	2501      	movlt	r5, #1
 8008222:	2500      	movge	r5, #0
 8008224:	f7ff fd42 	bl	8007cac <_Balloc>
 8008228:	4602      	mov	r2, r0
 800822a:	b918      	cbnz	r0, 8008234 <__mdiff+0x60>
 800822c:	f240 2145 	movw	r1, #581	@ 0x245
 8008230:	4b30      	ldr	r3, [pc, #192]	@ (80082f4 <__mdiff+0x120>)
 8008232:	e7e3      	b.n	80081fc <__mdiff+0x28>
 8008234:	f100 0b14 	add.w	fp, r0, #20
 8008238:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800823c:	f109 0310 	add.w	r3, r9, #16
 8008240:	60c5      	str	r5, [r0, #12]
 8008242:	f04f 0c00 	mov.w	ip, #0
 8008246:	f109 0514 	add.w	r5, r9, #20
 800824a:	46d9      	mov	r9, fp
 800824c:	6926      	ldr	r6, [r4, #16]
 800824e:	f104 0e14 	add.w	lr, r4, #20
 8008252:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008256:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	9b01      	ldr	r3, [sp, #4]
 800825e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008262:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008266:	b281      	uxth	r1, r0
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	fa1f f38a 	uxth.w	r3, sl
 800826e:	1a5b      	subs	r3, r3, r1
 8008270:	0c00      	lsrs	r0, r0, #16
 8008272:	4463      	add	r3, ip
 8008274:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008278:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800827c:	b29b      	uxth	r3, r3
 800827e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008282:	4576      	cmp	r6, lr
 8008284:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008288:	f849 3b04 	str.w	r3, [r9], #4
 800828c:	d8e6      	bhi.n	800825c <__mdiff+0x88>
 800828e:	1b33      	subs	r3, r6, r4
 8008290:	3b15      	subs	r3, #21
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	3415      	adds	r4, #21
 8008298:	3304      	adds	r3, #4
 800829a:	42a6      	cmp	r6, r4
 800829c:	bf38      	it	cc
 800829e:	2304      	movcc	r3, #4
 80082a0:	441d      	add	r5, r3
 80082a2:	445b      	add	r3, fp
 80082a4:	461e      	mov	r6, r3
 80082a6:	462c      	mov	r4, r5
 80082a8:	4544      	cmp	r4, r8
 80082aa:	d30e      	bcc.n	80082ca <__mdiff+0xf6>
 80082ac:	f108 0103 	add.w	r1, r8, #3
 80082b0:	1b49      	subs	r1, r1, r5
 80082b2:	f021 0103 	bic.w	r1, r1, #3
 80082b6:	3d03      	subs	r5, #3
 80082b8:	45a8      	cmp	r8, r5
 80082ba:	bf38      	it	cc
 80082bc:	2100      	movcc	r1, #0
 80082be:	440b      	add	r3, r1
 80082c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082c4:	b199      	cbz	r1, 80082ee <__mdiff+0x11a>
 80082c6:	6117      	str	r7, [r2, #16]
 80082c8:	e79e      	b.n	8008208 <__mdiff+0x34>
 80082ca:	46e6      	mov	lr, ip
 80082cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80082d0:	fa1f fc81 	uxth.w	ip, r1
 80082d4:	44f4      	add	ip, lr
 80082d6:	0c08      	lsrs	r0, r1, #16
 80082d8:	4471      	add	r1, lr
 80082da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082de:	b289      	uxth	r1, r1
 80082e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082e8:	f846 1b04 	str.w	r1, [r6], #4
 80082ec:	e7dc      	b.n	80082a8 <__mdiff+0xd4>
 80082ee:	3f01      	subs	r7, #1
 80082f0:	e7e6      	b.n	80082c0 <__mdiff+0xec>
 80082f2:	bf00      	nop
 80082f4:	08008fda 	.word	0x08008fda
 80082f8:	08008ffc 	.word	0x08008ffc

080082fc <__d2b>:
 80082fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008300:	2101      	movs	r1, #1
 8008302:	4690      	mov	r8, r2
 8008304:	4699      	mov	r9, r3
 8008306:	9e08      	ldr	r6, [sp, #32]
 8008308:	f7ff fcd0 	bl	8007cac <_Balloc>
 800830c:	4604      	mov	r4, r0
 800830e:	b930      	cbnz	r0, 800831e <__d2b+0x22>
 8008310:	4602      	mov	r2, r0
 8008312:	f240 310f 	movw	r1, #783	@ 0x30f
 8008316:	4b23      	ldr	r3, [pc, #140]	@ (80083a4 <__d2b+0xa8>)
 8008318:	4823      	ldr	r0, [pc, #140]	@ (80083a8 <__d2b+0xac>)
 800831a:	f000 f937 	bl	800858c <__assert_func>
 800831e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008326:	b10d      	cbz	r5, 800832c <__d2b+0x30>
 8008328:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f1b8 0300 	subs.w	r3, r8, #0
 8008332:	d024      	beq.n	800837e <__d2b+0x82>
 8008334:	4668      	mov	r0, sp
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	f7ff fd7f 	bl	8007e3a <__lo0bits>
 800833c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008340:	b1d8      	cbz	r0, 800837a <__d2b+0x7e>
 8008342:	f1c0 0320 	rsb	r3, r0, #32
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	430b      	orrs	r3, r1
 800834c:	40c2      	lsrs	r2, r0
 800834e:	6163      	str	r3, [r4, #20]
 8008350:	9201      	str	r2, [sp, #4]
 8008352:	9b01      	ldr	r3, [sp, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	bf0c      	ite	eq
 8008358:	2201      	moveq	r2, #1
 800835a:	2202      	movne	r2, #2
 800835c:	61a3      	str	r3, [r4, #24]
 800835e:	6122      	str	r2, [r4, #16]
 8008360:	b1ad      	cbz	r5, 800838e <__d2b+0x92>
 8008362:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008366:	4405      	add	r5, r0
 8008368:	6035      	str	r5, [r6, #0]
 800836a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800836e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008370:	6018      	str	r0, [r3, #0]
 8008372:	4620      	mov	r0, r4
 8008374:	b002      	add	sp, #8
 8008376:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800837a:	6161      	str	r1, [r4, #20]
 800837c:	e7e9      	b.n	8008352 <__d2b+0x56>
 800837e:	a801      	add	r0, sp, #4
 8008380:	f7ff fd5b 	bl	8007e3a <__lo0bits>
 8008384:	9b01      	ldr	r3, [sp, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	6163      	str	r3, [r4, #20]
 800838a:	3020      	adds	r0, #32
 800838c:	e7e7      	b.n	800835e <__d2b+0x62>
 800838e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008396:	6030      	str	r0, [r6, #0]
 8008398:	6918      	ldr	r0, [r3, #16]
 800839a:	f7ff fd2f 	bl	8007dfc <__hi0bits>
 800839e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083a2:	e7e4      	b.n	800836e <__d2b+0x72>
 80083a4:	08008fda 	.word	0x08008fda
 80083a8:	08008ffc 	.word	0x08008ffc

080083ac <__sread>:
 80083ac:	b510      	push	{r4, lr}
 80083ae:	460c      	mov	r4, r1
 80083b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b4:	f000 f8a8 	bl	8008508 <_read_r>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	bfab      	itete	ge
 80083bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083be:	89a3      	ldrhlt	r3, [r4, #12]
 80083c0:	181b      	addge	r3, r3, r0
 80083c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083c6:	bfac      	ite	ge
 80083c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083ca:	81a3      	strhlt	r3, [r4, #12]
 80083cc:	bd10      	pop	{r4, pc}

080083ce <__swrite>:
 80083ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	461f      	mov	r7, r3
 80083d4:	898b      	ldrh	r3, [r1, #12]
 80083d6:	4605      	mov	r5, r0
 80083d8:	05db      	lsls	r3, r3, #23
 80083da:	460c      	mov	r4, r1
 80083dc:	4616      	mov	r6, r2
 80083de:	d505      	bpl.n	80083ec <__swrite+0x1e>
 80083e0:	2302      	movs	r3, #2
 80083e2:	2200      	movs	r2, #0
 80083e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e8:	f000 f87c 	bl	80084e4 <_lseek_r>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	4632      	mov	r2, r6
 80083f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	4628      	mov	r0, r5
 80083f8:	463b      	mov	r3, r7
 80083fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008402:	f000 b8a3 	b.w	800854c <_write_r>

08008406 <__sseek>:
 8008406:	b510      	push	{r4, lr}
 8008408:	460c      	mov	r4, r1
 800840a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840e:	f000 f869 	bl	80084e4 <_lseek_r>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	bf15      	itete	ne
 8008418:	6560      	strne	r0, [r4, #84]	@ 0x54
 800841a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800841e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008422:	81a3      	strheq	r3, [r4, #12]
 8008424:	bf18      	it	ne
 8008426:	81a3      	strhne	r3, [r4, #12]
 8008428:	bd10      	pop	{r4, pc}

0800842a <__sclose>:
 800842a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842e:	f000 b849 	b.w	80084c4 <_close_r>

08008432 <_realloc_r>:
 8008432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008436:	4680      	mov	r8, r0
 8008438:	4615      	mov	r5, r2
 800843a:	460c      	mov	r4, r1
 800843c:	b921      	cbnz	r1, 8008448 <_realloc_r+0x16>
 800843e:	4611      	mov	r1, r2
 8008440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008444:	f7ff bafe 	b.w	8007a44 <_malloc_r>
 8008448:	b92a      	cbnz	r2, 8008456 <_realloc_r+0x24>
 800844a:	f000 f8d1 	bl	80085f0 <_free_r>
 800844e:	2400      	movs	r4, #0
 8008450:	4620      	mov	r0, r4
 8008452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008456:	f000 f925 	bl	80086a4 <_malloc_usable_size_r>
 800845a:	4285      	cmp	r5, r0
 800845c:	4606      	mov	r6, r0
 800845e:	d802      	bhi.n	8008466 <_realloc_r+0x34>
 8008460:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008464:	d8f4      	bhi.n	8008450 <_realloc_r+0x1e>
 8008466:	4629      	mov	r1, r5
 8008468:	4640      	mov	r0, r8
 800846a:	f7ff faeb 	bl	8007a44 <_malloc_r>
 800846e:	4607      	mov	r7, r0
 8008470:	2800      	cmp	r0, #0
 8008472:	d0ec      	beq.n	800844e <_realloc_r+0x1c>
 8008474:	42b5      	cmp	r5, r6
 8008476:	462a      	mov	r2, r5
 8008478:	4621      	mov	r1, r4
 800847a:	bf28      	it	cs
 800847c:	4632      	movcs	r2, r6
 800847e:	f000 f877 	bl	8008570 <memcpy>
 8008482:	4621      	mov	r1, r4
 8008484:	4640      	mov	r0, r8
 8008486:	f000 f8b3 	bl	80085f0 <_free_r>
 800848a:	463c      	mov	r4, r7
 800848c:	e7e0      	b.n	8008450 <_realloc_r+0x1e>

0800848e <memmove>:
 800848e:	4288      	cmp	r0, r1
 8008490:	b510      	push	{r4, lr}
 8008492:	eb01 0402 	add.w	r4, r1, r2
 8008496:	d902      	bls.n	800849e <memmove+0x10>
 8008498:	4284      	cmp	r4, r0
 800849a:	4623      	mov	r3, r4
 800849c:	d807      	bhi.n	80084ae <memmove+0x20>
 800849e:	1e43      	subs	r3, r0, #1
 80084a0:	42a1      	cmp	r1, r4
 80084a2:	d008      	beq.n	80084b6 <memmove+0x28>
 80084a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ac:	e7f8      	b.n	80084a0 <memmove+0x12>
 80084ae:	4601      	mov	r1, r0
 80084b0:	4402      	add	r2, r0
 80084b2:	428a      	cmp	r2, r1
 80084b4:	d100      	bne.n	80084b8 <memmove+0x2a>
 80084b6:	bd10      	pop	{r4, pc}
 80084b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084c0:	e7f7      	b.n	80084b2 <memmove+0x24>
	...

080084c4 <_close_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	2300      	movs	r3, #0
 80084c8:	4d05      	ldr	r5, [pc, #20]	@ (80084e0 <_close_r+0x1c>)
 80084ca:	4604      	mov	r4, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	602b      	str	r3, [r5, #0]
 80084d0:	f000 fbb2 	bl	8008c38 <_close>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_close_r+0x1a>
 80084d8:	682b      	ldr	r3, [r5, #0]
 80084da:	b103      	cbz	r3, 80084de <_close_r+0x1a>
 80084dc:	6023      	str	r3, [r4, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	200005ac 	.word	0x200005ac

080084e4 <_lseek_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	2200      	movs	r2, #0
 80084ee:	4d05      	ldr	r5, [pc, #20]	@ (8008504 <_lseek_r+0x20>)
 80084f0:	602a      	str	r2, [r5, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f000 fbc8 	bl	8008c88 <_lseek>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_lseek_r+0x1e>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_lseek_r+0x1e>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	200005ac 	.word	0x200005ac

08008508 <_read_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	2200      	movs	r2, #0
 8008512:	4d05      	ldr	r5, [pc, #20]	@ (8008528 <_read_r+0x20>)
 8008514:	602a      	str	r2, [r5, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	f000 fbbe 	bl	8008c98 <_read>
 800851c:	1c43      	adds	r3, r0, #1
 800851e:	d102      	bne.n	8008526 <_read_r+0x1e>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	b103      	cbz	r3, 8008526 <_read_r+0x1e>
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	bd38      	pop	{r3, r4, r5, pc}
 8008528:	200005ac 	.word	0x200005ac

0800852c <_sbrk_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	2300      	movs	r3, #0
 8008530:	4d05      	ldr	r5, [pc, #20]	@ (8008548 <_sbrk_r+0x1c>)
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	f000 fbb6 	bl	8008ca8 <_sbrk>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_sbrk_r+0x1a>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_sbrk_r+0x1a>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	200005ac 	.word	0x200005ac

0800854c <_write_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	2200      	movs	r2, #0
 8008556:	4d05      	ldr	r5, [pc, #20]	@ (800856c <_write_r+0x20>)
 8008558:	602a      	str	r2, [r5, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	f000 fbb2 	bl	8008cc4 <_write>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_write_r+0x1e>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	b103      	cbz	r3, 800856a <_write_r+0x1e>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	200005ac 	.word	0x200005ac

08008570 <memcpy>:
 8008570:	440a      	add	r2, r1
 8008572:	4291      	cmp	r1, r2
 8008574:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008578:	d100      	bne.n	800857c <memcpy+0xc>
 800857a:	4770      	bx	lr
 800857c:	b510      	push	{r4, lr}
 800857e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008582:	4291      	cmp	r1, r2
 8008584:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008588:	d1f9      	bne.n	800857e <memcpy+0xe>
 800858a:	bd10      	pop	{r4, pc}

0800858c <__assert_func>:
 800858c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800858e:	4614      	mov	r4, r2
 8008590:	461a      	mov	r2, r3
 8008592:	4b09      	ldr	r3, [pc, #36]	@ (80085b8 <__assert_func+0x2c>)
 8008594:	4605      	mov	r5, r0
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68d8      	ldr	r0, [r3, #12]
 800859a:	b954      	cbnz	r4, 80085b2 <__assert_func+0x26>
 800859c:	4b07      	ldr	r3, [pc, #28]	@ (80085bc <__assert_func+0x30>)
 800859e:	461c      	mov	r4, r3
 80085a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085a4:	9100      	str	r1, [sp, #0]
 80085a6:	462b      	mov	r3, r5
 80085a8:	4905      	ldr	r1, [pc, #20]	@ (80085c0 <__assert_func+0x34>)
 80085aa:	f000 f883 	bl	80086b4 <fiprintf>
 80085ae:	f000 f8a0 	bl	80086f2 <abort>
 80085b2:	4b04      	ldr	r3, [pc, #16]	@ (80085c4 <__assert_func+0x38>)
 80085b4:	e7f4      	b.n	80085a0 <__assert_func+0x14>
 80085b6:	bf00      	nop
 80085b8:	2000002c 	.word	0x2000002c
 80085bc:	0800929e 	.word	0x0800929e
 80085c0:	08009270 	.word	0x08009270
 80085c4:	08009263 	.word	0x08009263

080085c8 <_calloc_r>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	fba1 5402 	umull	r5, r4, r1, r2
 80085ce:	b93c      	cbnz	r4, 80085e0 <_calloc_r+0x18>
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7ff fa37 	bl	8007a44 <_malloc_r>
 80085d6:	4606      	mov	r6, r0
 80085d8:	b928      	cbnz	r0, 80085e6 <_calloc_r+0x1e>
 80085da:	2600      	movs	r6, #0
 80085dc:	4630      	mov	r0, r6
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	220c      	movs	r2, #12
 80085e2:	6002      	str	r2, [r0, #0]
 80085e4:	e7f9      	b.n	80085da <_calloc_r+0x12>
 80085e6:	462a      	mov	r2, r5
 80085e8:	4621      	mov	r1, r4
 80085ea:	f7fe fa15 	bl	8006a18 <memset>
 80085ee:	e7f5      	b.n	80085dc <_calloc_r+0x14>

080085f0 <_free_r>:
 80085f0:	b538      	push	{r3, r4, r5, lr}
 80085f2:	4605      	mov	r5, r0
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d040      	beq.n	800867a <_free_r+0x8a>
 80085f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085fc:	1f0c      	subs	r4, r1, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfb8      	it	lt
 8008602:	18e4      	addlt	r4, r4, r3
 8008604:	f7ff fb46 	bl	8007c94 <__malloc_lock>
 8008608:	4a1c      	ldr	r2, [pc, #112]	@ (800867c <_free_r+0x8c>)
 800860a:	6813      	ldr	r3, [r2, #0]
 800860c:	b933      	cbnz	r3, 800861c <_free_r+0x2c>
 800860e:	6063      	str	r3, [r4, #4]
 8008610:	6014      	str	r4, [r2, #0]
 8008612:	4628      	mov	r0, r5
 8008614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008618:	f7ff bb42 	b.w	8007ca0 <__malloc_unlock>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d908      	bls.n	8008632 <_free_r+0x42>
 8008620:	6820      	ldr	r0, [r4, #0]
 8008622:	1821      	adds	r1, r4, r0
 8008624:	428b      	cmp	r3, r1
 8008626:	bf01      	itttt	eq
 8008628:	6819      	ldreq	r1, [r3, #0]
 800862a:	685b      	ldreq	r3, [r3, #4]
 800862c:	1809      	addeq	r1, r1, r0
 800862e:	6021      	streq	r1, [r4, #0]
 8008630:	e7ed      	b.n	800860e <_free_r+0x1e>
 8008632:	461a      	mov	r2, r3
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b10b      	cbz	r3, 800863c <_free_r+0x4c>
 8008638:	42a3      	cmp	r3, r4
 800863a:	d9fa      	bls.n	8008632 <_free_r+0x42>
 800863c:	6811      	ldr	r1, [r2, #0]
 800863e:	1850      	adds	r0, r2, r1
 8008640:	42a0      	cmp	r0, r4
 8008642:	d10b      	bne.n	800865c <_free_r+0x6c>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	4401      	add	r1, r0
 8008648:	1850      	adds	r0, r2, r1
 800864a:	4283      	cmp	r3, r0
 800864c:	6011      	str	r1, [r2, #0]
 800864e:	d1e0      	bne.n	8008612 <_free_r+0x22>
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	4408      	add	r0, r1
 8008656:	6010      	str	r0, [r2, #0]
 8008658:	6053      	str	r3, [r2, #4]
 800865a:	e7da      	b.n	8008612 <_free_r+0x22>
 800865c:	d902      	bls.n	8008664 <_free_r+0x74>
 800865e:	230c      	movs	r3, #12
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	e7d6      	b.n	8008612 <_free_r+0x22>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	1821      	adds	r1, r4, r0
 8008668:	428b      	cmp	r3, r1
 800866a:	bf01      	itttt	eq
 800866c:	6819      	ldreq	r1, [r3, #0]
 800866e:	685b      	ldreq	r3, [r3, #4]
 8008670:	1809      	addeq	r1, r1, r0
 8008672:	6021      	streq	r1, [r4, #0]
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	6054      	str	r4, [r2, #4]
 8008678:	e7cb      	b.n	8008612 <_free_r+0x22>
 800867a:	bd38      	pop	{r3, r4, r5, pc}
 800867c:	200005a8 	.word	0x200005a8

08008680 <__ascii_mbtowc>:
 8008680:	b082      	sub	sp, #8
 8008682:	b901      	cbnz	r1, 8008686 <__ascii_mbtowc+0x6>
 8008684:	a901      	add	r1, sp, #4
 8008686:	b142      	cbz	r2, 800869a <__ascii_mbtowc+0x1a>
 8008688:	b14b      	cbz	r3, 800869e <__ascii_mbtowc+0x1e>
 800868a:	7813      	ldrb	r3, [r2, #0]
 800868c:	600b      	str	r3, [r1, #0]
 800868e:	7812      	ldrb	r2, [r2, #0]
 8008690:	1e10      	subs	r0, r2, #0
 8008692:	bf18      	it	ne
 8008694:	2001      	movne	r0, #1
 8008696:	b002      	add	sp, #8
 8008698:	4770      	bx	lr
 800869a:	4610      	mov	r0, r2
 800869c:	e7fb      	b.n	8008696 <__ascii_mbtowc+0x16>
 800869e:	f06f 0001 	mvn.w	r0, #1
 80086a2:	e7f8      	b.n	8008696 <__ascii_mbtowc+0x16>

080086a4 <_malloc_usable_size_r>:
 80086a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a8:	1f18      	subs	r0, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfbc      	itt	lt
 80086ae:	580b      	ldrlt	r3, [r1, r0]
 80086b0:	18c0      	addlt	r0, r0, r3
 80086b2:	4770      	bx	lr

080086b4 <fiprintf>:
 80086b4:	b40e      	push	{r1, r2, r3}
 80086b6:	b503      	push	{r0, r1, lr}
 80086b8:	4601      	mov	r1, r0
 80086ba:	ab03      	add	r3, sp, #12
 80086bc:	4805      	ldr	r0, [pc, #20]	@ (80086d4 <fiprintf+0x20>)
 80086be:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c2:	6800      	ldr	r0, [r0, #0]
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f000 f843 	bl	8008750 <_vfiprintf_r>
 80086ca:	b002      	add	sp, #8
 80086cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086d0:	b003      	add	sp, #12
 80086d2:	4770      	bx	lr
 80086d4:	2000002c 	.word	0x2000002c

080086d8 <__ascii_wctomb>:
 80086d8:	4603      	mov	r3, r0
 80086da:	4608      	mov	r0, r1
 80086dc:	b141      	cbz	r1, 80086f0 <__ascii_wctomb+0x18>
 80086de:	2aff      	cmp	r2, #255	@ 0xff
 80086e0:	d904      	bls.n	80086ec <__ascii_wctomb+0x14>
 80086e2:	228a      	movs	r2, #138	@ 0x8a
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	4770      	bx	lr
 80086ec:	2001      	movs	r0, #1
 80086ee:	700a      	strb	r2, [r1, #0]
 80086f0:	4770      	bx	lr

080086f2 <abort>:
 80086f2:	2006      	movs	r0, #6
 80086f4:	b508      	push	{r3, lr}
 80086f6:	f000 fa83 	bl	8008c00 <raise>
 80086fa:	2001      	movs	r0, #1
 80086fc:	f000 faea 	bl	8008cd4 <_exit>

08008700 <__sfputc_r>:
 8008700:	6893      	ldr	r3, [r2, #8]
 8008702:	b410      	push	{r4}
 8008704:	3b01      	subs	r3, #1
 8008706:	2b00      	cmp	r3, #0
 8008708:	6093      	str	r3, [r2, #8]
 800870a:	da07      	bge.n	800871c <__sfputc_r+0x1c>
 800870c:	6994      	ldr	r4, [r2, #24]
 800870e:	42a3      	cmp	r3, r4
 8008710:	db01      	blt.n	8008716 <__sfputc_r+0x16>
 8008712:	290a      	cmp	r1, #10
 8008714:	d102      	bne.n	800871c <__sfputc_r+0x1c>
 8008716:	bc10      	pop	{r4}
 8008718:	f000 b932 	b.w	8008980 <__swbuf_r>
 800871c:	6813      	ldr	r3, [r2, #0]
 800871e:	1c58      	adds	r0, r3, #1
 8008720:	6010      	str	r0, [r2, #0]
 8008722:	7019      	strb	r1, [r3, #0]
 8008724:	4608      	mov	r0, r1
 8008726:	bc10      	pop	{r4}
 8008728:	4770      	bx	lr

0800872a <__sfputs_r>:
 800872a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	4614      	mov	r4, r2
 8008732:	18d5      	adds	r5, r2, r3
 8008734:	42ac      	cmp	r4, r5
 8008736:	d101      	bne.n	800873c <__sfputs_r+0x12>
 8008738:	2000      	movs	r0, #0
 800873a:	e007      	b.n	800874c <__sfputs_r+0x22>
 800873c:	463a      	mov	r2, r7
 800873e:	4630      	mov	r0, r6
 8008740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008744:	f7ff ffdc 	bl	8008700 <__sfputc_r>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d1f3      	bne.n	8008734 <__sfputs_r+0xa>
 800874c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008750 <_vfiprintf_r>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	460d      	mov	r5, r1
 8008756:	4614      	mov	r4, r2
 8008758:	4698      	mov	r8, r3
 800875a:	4606      	mov	r6, r0
 800875c:	b09d      	sub	sp, #116	@ 0x74
 800875e:	b118      	cbz	r0, 8008768 <_vfiprintf_r+0x18>
 8008760:	6a03      	ldr	r3, [r0, #32]
 8008762:	b90b      	cbnz	r3, 8008768 <_vfiprintf_r+0x18>
 8008764:	f7fe f922 	bl	80069ac <__sinit>
 8008768:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800876a:	07d9      	lsls	r1, r3, #31
 800876c:	d405      	bmi.n	800877a <_vfiprintf_r+0x2a>
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	059a      	lsls	r2, r3, #22
 8008772:	d402      	bmi.n	800877a <_vfiprintf_r+0x2a>
 8008774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008776:	f7fe f980 	bl	8006a7a <__retarget_lock_acquire_recursive>
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	071b      	lsls	r3, r3, #28
 800877e:	d501      	bpl.n	8008784 <_vfiprintf_r+0x34>
 8008780:	692b      	ldr	r3, [r5, #16]
 8008782:	b99b      	cbnz	r3, 80087ac <_vfiprintf_r+0x5c>
 8008784:	4629      	mov	r1, r5
 8008786:	4630      	mov	r0, r6
 8008788:	f000 f938 	bl	80089fc <__swsetup_r>
 800878c:	b170      	cbz	r0, 80087ac <_vfiprintf_r+0x5c>
 800878e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008790:	07dc      	lsls	r4, r3, #31
 8008792:	d504      	bpl.n	800879e <_vfiprintf_r+0x4e>
 8008794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008798:	b01d      	add	sp, #116	@ 0x74
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	0598      	lsls	r0, r3, #22
 80087a2:	d4f7      	bmi.n	8008794 <_vfiprintf_r+0x44>
 80087a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087a6:	f7fe f969 	bl	8006a7c <__retarget_lock_release_recursive>
 80087aa:	e7f3      	b.n	8008794 <_vfiprintf_r+0x44>
 80087ac:	2300      	movs	r3, #0
 80087ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b0:	2320      	movs	r3, #32
 80087b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087b6:	2330      	movs	r3, #48	@ 0x30
 80087b8:	f04f 0901 	mov.w	r9, #1
 80087bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800896c <_vfiprintf_r+0x21c>
 80087c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087c8:	4623      	mov	r3, r4
 80087ca:	469a      	mov	sl, r3
 80087cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d0:	b10a      	cbz	r2, 80087d6 <_vfiprintf_r+0x86>
 80087d2:	2a25      	cmp	r2, #37	@ 0x25
 80087d4:	d1f9      	bne.n	80087ca <_vfiprintf_r+0x7a>
 80087d6:	ebba 0b04 	subs.w	fp, sl, r4
 80087da:	d00b      	beq.n	80087f4 <_vfiprintf_r+0xa4>
 80087dc:	465b      	mov	r3, fp
 80087de:	4622      	mov	r2, r4
 80087e0:	4629      	mov	r1, r5
 80087e2:	4630      	mov	r0, r6
 80087e4:	f7ff ffa1 	bl	800872a <__sfputs_r>
 80087e8:	3001      	adds	r0, #1
 80087ea:	f000 80a7 	beq.w	800893c <_vfiprintf_r+0x1ec>
 80087ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f0:	445a      	add	r2, fp
 80087f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80087f4:	f89a 3000 	ldrb.w	r3, [sl]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 809f 	beq.w	800893c <_vfiprintf_r+0x1ec>
 80087fe:	2300      	movs	r3, #0
 8008800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008808:	f10a 0a01 	add.w	sl, sl, #1
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	9307      	str	r3, [sp, #28]
 8008810:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008814:	931a      	str	r3, [sp, #104]	@ 0x68
 8008816:	4654      	mov	r4, sl
 8008818:	2205      	movs	r2, #5
 800881a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881e:	4853      	ldr	r0, [pc, #332]	@ (800896c <_vfiprintf_r+0x21c>)
 8008820:	f7fe f92d 	bl	8006a7e <memchr>
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	b9d8      	cbnz	r0, 8008860 <_vfiprintf_r+0x110>
 8008828:	06d1      	lsls	r1, r2, #27
 800882a:	bf44      	itt	mi
 800882c:	2320      	movmi	r3, #32
 800882e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008832:	0713      	lsls	r3, r2, #28
 8008834:	bf44      	itt	mi
 8008836:	232b      	movmi	r3, #43	@ 0x2b
 8008838:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800883c:	f89a 3000 	ldrb.w	r3, [sl]
 8008840:	2b2a      	cmp	r3, #42	@ 0x2a
 8008842:	d015      	beq.n	8008870 <_vfiprintf_r+0x120>
 8008844:	4654      	mov	r4, sl
 8008846:	2000      	movs	r0, #0
 8008848:	f04f 0c0a 	mov.w	ip, #10
 800884c:	9a07      	ldr	r2, [sp, #28]
 800884e:	4621      	mov	r1, r4
 8008850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008854:	3b30      	subs	r3, #48	@ 0x30
 8008856:	2b09      	cmp	r3, #9
 8008858:	d94b      	bls.n	80088f2 <_vfiprintf_r+0x1a2>
 800885a:	b1b0      	cbz	r0, 800888a <_vfiprintf_r+0x13a>
 800885c:	9207      	str	r2, [sp, #28]
 800885e:	e014      	b.n	800888a <_vfiprintf_r+0x13a>
 8008860:	eba0 0308 	sub.w	r3, r0, r8
 8008864:	fa09 f303 	lsl.w	r3, r9, r3
 8008868:	4313      	orrs	r3, r2
 800886a:	46a2      	mov	sl, r4
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	e7d2      	b.n	8008816 <_vfiprintf_r+0xc6>
 8008870:	9b03      	ldr	r3, [sp, #12]
 8008872:	1d19      	adds	r1, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	9103      	str	r1, [sp, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	bfbb      	ittet	lt
 800887c:	425b      	neglt	r3, r3
 800887e:	f042 0202 	orrlt.w	r2, r2, #2
 8008882:	9307      	strge	r3, [sp, #28]
 8008884:	9307      	strlt	r3, [sp, #28]
 8008886:	bfb8      	it	lt
 8008888:	9204      	strlt	r2, [sp, #16]
 800888a:	7823      	ldrb	r3, [r4, #0]
 800888c:	2b2e      	cmp	r3, #46	@ 0x2e
 800888e:	d10a      	bne.n	80088a6 <_vfiprintf_r+0x156>
 8008890:	7863      	ldrb	r3, [r4, #1]
 8008892:	2b2a      	cmp	r3, #42	@ 0x2a
 8008894:	d132      	bne.n	80088fc <_vfiprintf_r+0x1ac>
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	3402      	adds	r4, #2
 800889a:	1d1a      	adds	r2, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9203      	str	r2, [sp, #12]
 80088a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008970 <_vfiprintf_r+0x220>
 80088aa:	2203      	movs	r2, #3
 80088ac:	4650      	mov	r0, sl
 80088ae:	7821      	ldrb	r1, [r4, #0]
 80088b0:	f7fe f8e5 	bl	8006a7e <memchr>
 80088b4:	b138      	cbz	r0, 80088c6 <_vfiprintf_r+0x176>
 80088b6:	2240      	movs	r2, #64	@ 0x40
 80088b8:	9b04      	ldr	r3, [sp, #16]
 80088ba:	eba0 000a 	sub.w	r0, r0, sl
 80088be:	4082      	lsls	r2, r0
 80088c0:	4313      	orrs	r3, r2
 80088c2:	3401      	adds	r4, #1
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ca:	2206      	movs	r2, #6
 80088cc:	4829      	ldr	r0, [pc, #164]	@ (8008974 <_vfiprintf_r+0x224>)
 80088ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088d2:	f7fe f8d4 	bl	8006a7e <memchr>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d03f      	beq.n	800895a <_vfiprintf_r+0x20a>
 80088da:	4b27      	ldr	r3, [pc, #156]	@ (8008978 <_vfiprintf_r+0x228>)
 80088dc:	bb1b      	cbnz	r3, 8008926 <_vfiprintf_r+0x1d6>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	3307      	adds	r3, #7
 80088e2:	f023 0307 	bic.w	r3, r3, #7
 80088e6:	3308      	adds	r3, #8
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ec:	443b      	add	r3, r7
 80088ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f0:	e76a      	b.n	80087c8 <_vfiprintf_r+0x78>
 80088f2:	460c      	mov	r4, r1
 80088f4:	2001      	movs	r0, #1
 80088f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088fa:	e7a8      	b.n	800884e <_vfiprintf_r+0xfe>
 80088fc:	2300      	movs	r3, #0
 80088fe:	f04f 0c0a 	mov.w	ip, #10
 8008902:	4619      	mov	r1, r3
 8008904:	3401      	adds	r4, #1
 8008906:	9305      	str	r3, [sp, #20]
 8008908:	4620      	mov	r0, r4
 800890a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800890e:	3a30      	subs	r2, #48	@ 0x30
 8008910:	2a09      	cmp	r2, #9
 8008912:	d903      	bls.n	800891c <_vfiprintf_r+0x1cc>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0c6      	beq.n	80088a6 <_vfiprintf_r+0x156>
 8008918:	9105      	str	r1, [sp, #20]
 800891a:	e7c4      	b.n	80088a6 <_vfiprintf_r+0x156>
 800891c:	4604      	mov	r4, r0
 800891e:	2301      	movs	r3, #1
 8008920:	fb0c 2101 	mla	r1, ip, r1, r2
 8008924:	e7f0      	b.n	8008908 <_vfiprintf_r+0x1b8>
 8008926:	ab03      	add	r3, sp, #12
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	462a      	mov	r2, r5
 800892c:	4630      	mov	r0, r6
 800892e:	4b13      	ldr	r3, [pc, #76]	@ (800897c <_vfiprintf_r+0x22c>)
 8008930:	a904      	add	r1, sp, #16
 8008932:	f7fd fbd1 	bl	80060d8 <_printf_float>
 8008936:	4607      	mov	r7, r0
 8008938:	1c78      	adds	r0, r7, #1
 800893a:	d1d6      	bne.n	80088ea <_vfiprintf_r+0x19a>
 800893c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800893e:	07d9      	lsls	r1, r3, #31
 8008940:	d405      	bmi.n	800894e <_vfiprintf_r+0x1fe>
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	059a      	lsls	r2, r3, #22
 8008946:	d402      	bmi.n	800894e <_vfiprintf_r+0x1fe>
 8008948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800894a:	f7fe f897 	bl	8006a7c <__retarget_lock_release_recursive>
 800894e:	89ab      	ldrh	r3, [r5, #12]
 8008950:	065b      	lsls	r3, r3, #25
 8008952:	f53f af1f 	bmi.w	8008794 <_vfiprintf_r+0x44>
 8008956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008958:	e71e      	b.n	8008798 <_vfiprintf_r+0x48>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4630      	mov	r0, r6
 8008962:	4b06      	ldr	r3, [pc, #24]	@ (800897c <_vfiprintf_r+0x22c>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	f7fd fe55 	bl	8006614 <_printf_i>
 800896a:	e7e4      	b.n	8008936 <_vfiprintf_r+0x1e6>
 800896c:	08008feb 	.word	0x08008feb
 8008970:	08008ff1 	.word	0x08008ff1
 8008974:	08008ff5 	.word	0x08008ff5
 8008978:	080060d9 	.word	0x080060d9
 800897c:	0800872b 	.word	0x0800872b

08008980 <__swbuf_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	460e      	mov	r6, r1
 8008984:	4614      	mov	r4, r2
 8008986:	4605      	mov	r5, r0
 8008988:	b118      	cbz	r0, 8008992 <__swbuf_r+0x12>
 800898a:	6a03      	ldr	r3, [r0, #32]
 800898c:	b90b      	cbnz	r3, 8008992 <__swbuf_r+0x12>
 800898e:	f7fe f80d 	bl	80069ac <__sinit>
 8008992:	69a3      	ldr	r3, [r4, #24]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	071a      	lsls	r2, r3, #28
 800899a:	d501      	bpl.n	80089a0 <__swbuf_r+0x20>
 800899c:	6923      	ldr	r3, [r4, #16]
 800899e:	b943      	cbnz	r3, 80089b2 <__swbuf_r+0x32>
 80089a0:	4621      	mov	r1, r4
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 f82a 	bl	80089fc <__swsetup_r>
 80089a8:	b118      	cbz	r0, 80089b2 <__swbuf_r+0x32>
 80089aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80089ae:	4638      	mov	r0, r7
 80089b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	6922      	ldr	r2, [r4, #16]
 80089b6:	b2f6      	uxtb	r6, r6
 80089b8:	1a98      	subs	r0, r3, r2
 80089ba:	6963      	ldr	r3, [r4, #20]
 80089bc:	4637      	mov	r7, r6
 80089be:	4283      	cmp	r3, r0
 80089c0:	dc05      	bgt.n	80089ce <__swbuf_r+0x4e>
 80089c2:	4621      	mov	r1, r4
 80089c4:	4628      	mov	r0, r5
 80089c6:	f7ff f93d 	bl	8007c44 <_fflush_r>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d1ed      	bne.n	80089aa <__swbuf_r+0x2a>
 80089ce:	68a3      	ldr	r3, [r4, #8]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	1c5a      	adds	r2, r3, #1
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	701e      	strb	r6, [r3, #0]
 80089dc:	6962      	ldr	r2, [r4, #20]
 80089de:	1c43      	adds	r3, r0, #1
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d004      	beq.n	80089ee <__swbuf_r+0x6e>
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	d5e1      	bpl.n	80089ae <__swbuf_r+0x2e>
 80089ea:	2e0a      	cmp	r6, #10
 80089ec:	d1df      	bne.n	80089ae <__swbuf_r+0x2e>
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f7ff f927 	bl	8007c44 <_fflush_r>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d0d9      	beq.n	80089ae <__swbuf_r+0x2e>
 80089fa:	e7d6      	b.n	80089aa <__swbuf_r+0x2a>

080089fc <__swsetup_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4b29      	ldr	r3, [pc, #164]	@ (8008aa4 <__swsetup_r+0xa8>)
 8008a00:	4605      	mov	r5, r0
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	460c      	mov	r4, r1
 8008a06:	b118      	cbz	r0, 8008a10 <__swsetup_r+0x14>
 8008a08:	6a03      	ldr	r3, [r0, #32]
 8008a0a:	b90b      	cbnz	r3, 8008a10 <__swsetup_r+0x14>
 8008a0c:	f7fd ffce 	bl	80069ac <__sinit>
 8008a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a14:	0719      	lsls	r1, r3, #28
 8008a16:	d422      	bmi.n	8008a5e <__swsetup_r+0x62>
 8008a18:	06da      	lsls	r2, r3, #27
 8008a1a:	d407      	bmi.n	8008a2c <__swsetup_r+0x30>
 8008a1c:	2209      	movs	r2, #9
 8008a1e:	602a      	str	r2, [r5, #0]
 8008a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	e033      	b.n	8008a94 <__swsetup_r+0x98>
 8008a2c:	0758      	lsls	r0, r3, #29
 8008a2e:	d512      	bpl.n	8008a56 <__swsetup_r+0x5a>
 8008a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a32:	b141      	cbz	r1, 8008a46 <__swsetup_r+0x4a>
 8008a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	d002      	beq.n	8008a42 <__swsetup_r+0x46>
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f7ff fdd7 	bl	80085f0 <_free_r>
 8008a42:	2300      	movs	r3, #0
 8008a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	89a3      	ldrh	r3, [r4, #12]
 8008a58:	f043 0308 	orr.w	r3, r3, #8
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	b94b      	cbnz	r3, 8008a76 <__swsetup_r+0x7a>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a6c:	d003      	beq.n	8008a76 <__swsetup_r+0x7a>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f000 f83e 	bl	8008af2 <__smakebuf_r>
 8008a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7a:	f013 0201 	ands.w	r2, r3, #1
 8008a7e:	d00a      	beq.n	8008a96 <__swsetup_r+0x9a>
 8008a80:	2200      	movs	r2, #0
 8008a82:	60a2      	str	r2, [r4, #8]
 8008a84:	6962      	ldr	r2, [r4, #20]
 8008a86:	4252      	negs	r2, r2
 8008a88:	61a2      	str	r2, [r4, #24]
 8008a8a:	6922      	ldr	r2, [r4, #16]
 8008a8c:	b942      	cbnz	r2, 8008aa0 <__swsetup_r+0xa4>
 8008a8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a92:	d1c5      	bne.n	8008a20 <__swsetup_r+0x24>
 8008a94:	bd38      	pop	{r3, r4, r5, pc}
 8008a96:	0799      	lsls	r1, r3, #30
 8008a98:	bf58      	it	pl
 8008a9a:	6962      	ldrpl	r2, [r4, #20]
 8008a9c:	60a2      	str	r2, [r4, #8]
 8008a9e:	e7f4      	b.n	8008a8a <__swsetup_r+0x8e>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e7f7      	b.n	8008a94 <__swsetup_r+0x98>
 8008aa4:	2000002c 	.word	0x2000002c

08008aa8 <__swhatbuf_r>:
 8008aa8:	b570      	push	{r4, r5, r6, lr}
 8008aaa:	460c      	mov	r4, r1
 8008aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab0:	4615      	mov	r5, r2
 8008ab2:	2900      	cmp	r1, #0
 8008ab4:	461e      	mov	r6, r3
 8008ab6:	b096      	sub	sp, #88	@ 0x58
 8008ab8:	da0c      	bge.n	8008ad4 <__swhatbuf_r+0x2c>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	2100      	movs	r1, #0
 8008abe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ac2:	bf14      	ite	ne
 8008ac4:	2340      	movne	r3, #64	@ 0x40
 8008ac6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008aca:	2000      	movs	r0, #0
 8008acc:	6031      	str	r1, [r6, #0]
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	b016      	add	sp, #88	@ 0x58
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	466a      	mov	r2, sp
 8008ad6:	f000 f849 	bl	8008b6c <_fstat_r>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	dbed      	blt.n	8008aba <__swhatbuf_r+0x12>
 8008ade:	9901      	ldr	r1, [sp, #4]
 8008ae0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ae4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ae8:	4259      	negs	r1, r3
 8008aea:	4159      	adcs	r1, r3
 8008aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008af0:	e7eb      	b.n	8008aca <__swhatbuf_r+0x22>

08008af2 <__smakebuf_r>:
 8008af2:	898b      	ldrh	r3, [r1, #12]
 8008af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008af6:	079d      	lsls	r5, r3, #30
 8008af8:	4606      	mov	r6, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	d507      	bpl.n	8008b0e <__smakebuf_r+0x1c>
 8008afe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	2301      	movs	r3, #1
 8008b08:	6163      	str	r3, [r4, #20]
 8008b0a:	b003      	add	sp, #12
 8008b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b0e:	466a      	mov	r2, sp
 8008b10:	ab01      	add	r3, sp, #4
 8008b12:	f7ff ffc9 	bl	8008aa8 <__swhatbuf_r>
 8008b16:	9f00      	ldr	r7, [sp, #0]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7fe ff91 	bl	8007a44 <_malloc_r>
 8008b22:	b948      	cbnz	r0, 8008b38 <__smakebuf_r+0x46>
 8008b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b28:	059a      	lsls	r2, r3, #22
 8008b2a:	d4ee      	bmi.n	8008b0a <__smakebuf_r+0x18>
 8008b2c:	f023 0303 	bic.w	r3, r3, #3
 8008b30:	f043 0302 	orr.w	r3, r3, #2
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	e7e2      	b.n	8008afe <__smakebuf_r+0xc>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	9b01      	ldr	r3, [sp, #4]
 8008b46:	6020      	str	r0, [r4, #0]
 8008b48:	b15b      	cbz	r3, 8008b62 <__smakebuf_r+0x70>
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b50:	f000 f81e 	bl	8008b90 <_isatty_r>
 8008b54:	b128      	cbz	r0, 8008b62 <__smakebuf_r+0x70>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	f023 0303 	bic.w	r3, r3, #3
 8008b5c:	f043 0301 	orr.w	r3, r3, #1
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	431d      	orrs	r5, r3
 8008b66:	81a5      	strh	r5, [r4, #12]
 8008b68:	e7cf      	b.n	8008b0a <__smakebuf_r+0x18>
	...

08008b6c <_fstat_r>:
 8008b6c:	b538      	push	{r3, r4, r5, lr}
 8008b6e:	2300      	movs	r3, #0
 8008b70:	4d06      	ldr	r5, [pc, #24]	@ (8008b8c <_fstat_r+0x20>)
 8008b72:	4604      	mov	r4, r0
 8008b74:	4608      	mov	r0, r1
 8008b76:	4611      	mov	r1, r2
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	f000 f865 	bl	8008c48 <_fstat>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d102      	bne.n	8008b88 <_fstat_r+0x1c>
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	b103      	cbz	r3, 8008b88 <_fstat_r+0x1c>
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200005ac 	.word	0x200005ac

08008b90 <_isatty_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	2300      	movs	r3, #0
 8008b94:	4d05      	ldr	r5, [pc, #20]	@ (8008bac <_isatty_r+0x1c>)
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f000 f864 	bl	8008c68 <_isatty>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_isatty_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_isatty_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	200005ac 	.word	0x200005ac

08008bb0 <_raise_r>:
 8008bb0:	291f      	cmp	r1, #31
 8008bb2:	b538      	push	{r3, r4, r5, lr}
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	d904      	bls.n	8008bc4 <_raise_r+0x14>
 8008bba:	2316      	movs	r3, #22
 8008bbc:	6003      	str	r3, [r0, #0]
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bc6:	b112      	cbz	r2, 8008bce <_raise_r+0x1e>
 8008bc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bcc:	b94b      	cbnz	r3, 8008be2 <_raise_r+0x32>
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f000 f830 	bl	8008c34 <_getpid_r>
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	4628      	mov	r0, r5
 8008bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bde:	f000 b817 	b.w	8008c10 <_kill_r>
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d00a      	beq.n	8008bfc <_raise_r+0x4c>
 8008be6:	1c59      	adds	r1, r3, #1
 8008be8:	d103      	bne.n	8008bf2 <_raise_r+0x42>
 8008bea:	2316      	movs	r3, #22
 8008bec:	6003      	str	r3, [r0, #0]
 8008bee:	2001      	movs	r0, #1
 8008bf0:	e7e7      	b.n	8008bc2 <_raise_r+0x12>
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bfa:	4798      	blx	r3
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e7e0      	b.n	8008bc2 <_raise_r+0x12>

08008c00 <raise>:
 8008c00:	4b02      	ldr	r3, [pc, #8]	@ (8008c0c <raise+0xc>)
 8008c02:	4601      	mov	r1, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f7ff bfd3 	b.w	8008bb0 <_raise_r>
 8008c0a:	bf00      	nop
 8008c0c:	2000002c 	.word	0x2000002c

08008c10 <_kill_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	2300      	movs	r3, #0
 8008c14:	4d06      	ldr	r5, [pc, #24]	@ (8008c30 <_kill_r+0x20>)
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	602b      	str	r3, [r5, #0]
 8008c1e:	f000 f82b 	bl	8008c78 <_kill>
 8008c22:	1c43      	adds	r3, r0, #1
 8008c24:	d102      	bne.n	8008c2c <_kill_r+0x1c>
 8008c26:	682b      	ldr	r3, [r5, #0]
 8008c28:	b103      	cbz	r3, 8008c2c <_kill_r+0x1c>
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	bd38      	pop	{r3, r4, r5, pc}
 8008c2e:	bf00      	nop
 8008c30:	200005ac 	.word	0x200005ac

08008c34 <_getpid_r>:
 8008c34:	f000 b810 	b.w	8008c58 <_getpid>

08008c38 <_close>:
 8008c38:	2258      	movs	r2, #88	@ 0x58
 8008c3a:	4b02      	ldr	r3, [pc, #8]	@ (8008c44 <_close+0xc>)
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	4770      	bx	lr
 8008c44:	200005ac 	.word	0x200005ac

08008c48 <_fstat>:
 8008c48:	2258      	movs	r2, #88	@ 0x58
 8008c4a:	4b02      	ldr	r3, [pc, #8]	@ (8008c54 <_fstat+0xc>)
 8008c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	4770      	bx	lr
 8008c54:	200005ac 	.word	0x200005ac

08008c58 <_getpid>:
 8008c58:	2258      	movs	r2, #88	@ 0x58
 8008c5a:	4b02      	ldr	r3, [pc, #8]	@ (8008c64 <_getpid+0xc>)
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	4770      	bx	lr
 8008c64:	200005ac 	.word	0x200005ac

08008c68 <_isatty>:
 8008c68:	2258      	movs	r2, #88	@ 0x58
 8008c6a:	4b02      	ldr	r3, [pc, #8]	@ (8008c74 <_isatty+0xc>)
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	200005ac 	.word	0x200005ac

08008c78 <_kill>:
 8008c78:	2258      	movs	r2, #88	@ 0x58
 8008c7a:	4b02      	ldr	r3, [pc, #8]	@ (8008c84 <_kill+0xc>)
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	4770      	bx	lr
 8008c84:	200005ac 	.word	0x200005ac

08008c88 <_lseek>:
 8008c88:	2258      	movs	r2, #88	@ 0x58
 8008c8a:	4b02      	ldr	r3, [pc, #8]	@ (8008c94 <_lseek+0xc>)
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	4770      	bx	lr
 8008c94:	200005ac 	.word	0x200005ac

08008c98 <_read>:
 8008c98:	2258      	movs	r2, #88	@ 0x58
 8008c9a:	4b02      	ldr	r3, [pc, #8]	@ (8008ca4 <_read+0xc>)
 8008c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	4770      	bx	lr
 8008ca4:	200005ac 	.word	0x200005ac

08008ca8 <_sbrk>:
 8008ca8:	4a04      	ldr	r2, [pc, #16]	@ (8008cbc <_sbrk+0x14>)
 8008caa:	4603      	mov	r3, r0
 8008cac:	6811      	ldr	r1, [r2, #0]
 8008cae:	b909      	cbnz	r1, 8008cb4 <_sbrk+0xc>
 8008cb0:	4903      	ldr	r1, [pc, #12]	@ (8008cc0 <_sbrk+0x18>)
 8008cb2:	6011      	str	r1, [r2, #0]
 8008cb4:	6810      	ldr	r0, [r2, #0]
 8008cb6:	4403      	add	r3, r0
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	4770      	bx	lr
 8008cbc:	200005b0 	.word	0x200005b0
 8008cc0:	200005b8 	.word	0x200005b8

08008cc4 <_write>:
 8008cc4:	2258      	movs	r2, #88	@ 0x58
 8008cc6:	4b02      	ldr	r3, [pc, #8]	@ (8008cd0 <_write+0xc>)
 8008cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	4770      	bx	lr
 8008cd0:	200005ac 	.word	0x200005ac

08008cd4 <_exit>:
 8008cd4:	e7fe      	b.n	8008cd4 <_exit>
	...

08008cd8 <_init>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	bf00      	nop
 8008cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cde:	bc08      	pop	{r3}
 8008ce0:	469e      	mov	lr, r3
 8008ce2:	4770      	bx	lr

08008ce4 <_fini>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	bf00      	nop
 8008ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cea:	bc08      	pop	{r3}
 8008cec:	469e      	mov	lr, r3
 8008cee:	4770      	bx	lr
