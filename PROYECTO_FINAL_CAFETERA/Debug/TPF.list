
TPF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e838  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  0800e948  0800e948  0000f948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f674  0800f674  00011270  2**0
                  CONTENTS
  4 .ARM          00000008  0800f674  0800f674  00010674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f67c  0800f67c  00011270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f67c  0800f67c  0001067c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f680  0800f680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  0800f684  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000270  0800f8f4  00011270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  0800f8f4  00011828  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001581a  00000000  00000000  00011299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b53  00000000  00000000  00026ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0002a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fea  00000000  00000000  0002ba00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac8a  00000000  00000000  0002c9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a979  00000000  00000000  00047674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000939de  00000000  00000000  00061fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f59cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006940  00000000  00000000  000f5a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ab  00000000  00000000  000fc350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000270 	.word	0x20000270
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e930 	.word	0x0800e930

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000274 	.word	0x20000274
 800014c:	0800e930 	.word	0x0800e930

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

#if (1 == LOGGER_CONFIG_USE_SEMIHOSTING)

initialise_monitor_handles();
 8000f88:	f00d fc4e 	bl	800e828 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 fe1c 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f817 	bl	8000fc2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 fa48 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f98:	f000 fa28 	bl	80013ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f9c:	f000 f9fc 	bl	8001398 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fa0:	f000 f8c6 	bl	8001130 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000fa4:	f000 f868 	bl	8001078 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000fa8:	f000 f8f0 	bl	800118c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000fac:	f000 f9ca 	bl	8001344 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000fb0:	f000 f91a 	bl	80011e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fb4:	f000 f96e 	bl	8001294 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000fb8:	f006 fc86 	bl	80078c8 <app_init>
  /* USER CODE BEGIN WHILE */
  while (1)

  {
    /* USER CODE END WHILE */
	  app_update();
 8000fbc:	f006 fdf0 	bl	8007ba0 <app_update>
 8000fc0:	e7fc      	b.n	8000fbc <main+0x38>

08000fc2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b094      	sub	sp, #80	@ 0x50
 8000fc6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fcc:	2228      	movs	r2, #40	@ 0x28
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00b f94e 	bl	800c272 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800100c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800100e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001018:	4618      	mov	r0, r3
 800101a:	f004 ff1f 	bl	8005e5c <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001024:	f000 faaa 	bl	800157c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001038:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f005 f98b 	bl	8006360 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001050:	f000 fa94 	bl	800157c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001054:	2302      	movs	r3, #2
 8001056:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800105c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4618      	mov	r0, r3
 8001062:	f005 fb0b 	bl	800667c <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800106c:	f000 fa86 	bl	800157c <Error_Handler>
  }
}
 8001070:	bf00      	nop
 8001072:	3750      	adds	r7, #80	@ 0x50
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001088:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <MX_ADC1_Init+0xb0>)
 800108a:	4a28      	ldr	r2, [pc, #160]	@ (800112c <MX_ADC1_Init+0xb4>)
 800108c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <MX_ADC1_Init+0xb0>)
 8001090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001094:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <MX_ADC1_Init+0xb0>)
 8001098:	2201      	movs	r2, #1
 800109a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_ADC1_Init+0xb0>)
 800109e:	2200      	movs	r2, #0
 80010a0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <MX_ADC1_Init+0xb0>)
 80010a4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_ADC1_Init+0xb0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_ADC1_Init+0xb0>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b6:	481c      	ldr	r0, [pc, #112]	@ (8001128 <MX_ADC1_Init+0xb0>)
 80010b8:	f000 fe0c 	bl	8001cd4 <HAL_ADC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010c2:	f000 fa5b 	bl	800157c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ca:	2301      	movs	r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010ce:	2307      	movs	r3, #7
 80010d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4814      	ldr	r0, [pc, #80]	@ (8001128 <MX_ADC1_Init+0xb0>)
 80010d8:	f001 f896 	bl	8002208 <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f000 fa4b 	bl	800157c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	480d      	ldr	r0, [pc, #52]	@ (8001128 <MX_ADC1_Init+0xb0>)
 80010f4:	f001 f888 	bl	8002208 <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010fe:	f000 fa3d 	bl	800157c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001102:	2301      	movs	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001106:	2303      	movs	r3, #3
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4806      	ldr	r0, [pc, #24]	@ (8001128 <MX_ADC1_Init+0xb0>)
 8001110:	f001 f87a 	bl	8002208 <HAL_ADC_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800111a:	f000 fa2f 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000028c 	.word	0x2000028c
 800112c:	40012400 	.word	0x40012400

08001130 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001136:	4a13      	ldr	r2, [pc, #76]	@ (8001184 <MX_I2C1_Init+0x54>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x50>)
 800113c:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_I2C1_Init+0x58>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <MX_I2C1_Init+0x50>)
 800114e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001152:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <MX_I2C1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	@ (8001180 <MX_I2C1_Init+0x50>)
 800116e:	f001 ffa9 	bl	80030c4 <HAL_I2C_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001178:	f000 fa00 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000300 	.word	0x20000300
 8001184:	40005400 	.word	0x40005400
 8001188:	00061a80 	.word	0x00061a80

0800118c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_I2C2_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <MX_I2C2_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_I2C2_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	@ (80011e4 <MX_I2C2_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_I2C2_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011c8:	4804      	ldr	r0, [pc, #16]	@ (80011dc <MX_I2C2_Init+0x50>)
 80011ca:	f001 ff7b 	bl	80030c4 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011d4:	f000 f9d2 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000354 	.word	0x20000354
 80011e0:	40005800 	.word	0x40005800
 80011e4:	00061a80 	.word	0x00061a80

080011e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011f8:	463b      	mov	r3, r7
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001206:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <MX_TIM1_Init+0xa8>)
 8001208:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <MX_TIM1_Init+0xa4>)
 800120c:	2248      	movs	r2, #72	@ 0x48
 800120e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800121c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_TIM1_Init+0xa4>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001230:	4816      	ldr	r0, [pc, #88]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001232:	f005 fb28 	bl	8006886 <HAL_TIM_IC_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 f99e 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	480f      	ldr	r0, [pc, #60]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001250:	f006 f9ec 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800125a:	f000 f98f 	bl	800157c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001262:	2301      	movs	r3, #1
 8001264:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_TIM1_Init+0xa4>)
 8001276:	f005 fdad 	bl	8006dd4 <HAL_TIM_IC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001280:	f000 f97c 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200003a8 	.word	0x200003a8
 8001290:	40012c00 	.word	0x40012c00

08001294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	615a      	str	r2, [r3, #20]
 80012b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b6:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012de:	4818      	ldr	r0, [pc, #96]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012e0:	f005 fa82 	bl	80067e8 <HAL_TIM_OC_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012ea:	f000 f947 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	4619      	mov	r1, r3
 80012fc:	4810      	ldr	r0, [pc, #64]	@ (8001340 <MX_TIM2_Init+0xac>)
 80012fe:	f006 f995 	bl	800762c <HAL_TIMEx_MasterConfigSynchronization>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001308:	f000 f938 	bl	800157c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	4619      	mov	r1, r3
 8001322:	4807      	ldr	r0, [pc, #28]	@ (8001340 <MX_TIM2_Init+0xac>)
 8001324:	f005 fcfa 	bl	8006d1c <HAL_TIM_OC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800132e:	f000 f925 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <MX_TIM2_Init+0xac>)
 8001334:	f000 fae2 	bl	80018fc <HAL_TIM_MspPostInit>

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	@ 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003f0 	.word	0x200003f0

08001344 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <MX_USART1_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	@ (8001390 <MX_USART1_UART_Init+0x4c>)
 800137c:	f006 f9c6 	bl	800770c <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f8f9 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000438 	.word	0x20000438
 8001394:	40013800 	.word	0x40013800

08001398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <MX_USART2_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013be:	220c      	movs	r2, #12
 80013c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013d0:	f006 f99c 	bl	800770c <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f000 f8cf 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000480 	.word	0x20000480
 80013e8:	40004400 	.word	0x40004400

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_DMA_Init+0x38>)
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <MX_DMA_Init+0x38>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6153      	str	r3, [r2, #20]
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_DMA_Init+0x38>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	200b      	movs	r0, #11
 8001410:	f001 f9d3 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001414:	200b      	movs	r0, #11
 8001416:	f001 f9ec 	bl	80027f2 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b4a      	ldr	r3, [pc, #296]	@ (8001568 <MX_GPIO_Init+0x140>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a49      	ldr	r2, [pc, #292]	@ (8001568 <MX_GPIO_Init+0x140>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <MX_GPIO_Init+0x140>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001454:	4b44      	ldr	r3, [pc, #272]	@ (8001568 <MX_GPIO_Init+0x140>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a43      	ldr	r2, [pc, #268]	@ (8001568 <MX_GPIO_Init+0x140>)
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b41      	ldr	r3, [pc, #260]	@ (8001568 <MX_GPIO_Init+0x140>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0320 	and.w	r3, r3, #32
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146c:	4b3e      	ldr	r3, [pc, #248]	@ (8001568 <MX_GPIO_Init+0x140>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a3d      	ldr	r2, [pc, #244]	@ (8001568 <MX_GPIO_Init+0x140>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <MX_GPIO_Init+0x140>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b38      	ldr	r3, [pc, #224]	@ (8001568 <MX_GPIO_Init+0x140>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a37      	ldr	r2, [pc, #220]	@ (8001568 <MX_GPIO_Init+0x140>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b35      	ldr	r3, [pc, #212]	@ (8001568 <MX_GPIO_Init+0x140>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LEDGREEN_Pin|LED4_Pin
 800149c:	2200      	movs	r2, #0
 800149e:	f24e 0106 	movw	r1, #57350	@ 0xe006
 80014a2:	4832      	ldr	r0, [pc, #200]	@ (800156c <MX_GPIO_Init+0x144>)
 80014a4:	f001 fdd3 	bl	800304e <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	4830      	ldr	r0, [pc, #192]	@ (8001570 <MX_GPIO_Init+0x148>)
 80014ae:	f001 fdce 	bl	800304e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001574 <MX_GPIO_Init+0x14c>)
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	482a      	ldr	r0, [pc, #168]	@ (8001570 <MX_GPIO_Init+0x148>)
 80014c8:	f001 fc26 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON2_Pin */
  GPIO_InitStruct.Pin = BOTON2_Pin;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON2_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4619      	mov	r1, r3
 80014de:	4824      	ldr	r0, [pc, #144]	@ (8001570 <MX_GPIO_Init+0x148>)
 80014e0:	f001 fc1a 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON3_Pin */
  GPIO_InitStruct.Pin = BOTON3_Pin;
 80014e4:	2310      	movs	r3, #16
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON3_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	4820      	ldr	r0, [pc, #128]	@ (8001578 <MX_GPIO_Init+0x150>)
 80014f8:	f001 fc0e 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTON1_Pin */
  GPIO_InitStruct.Pin = BOTON1_Pin;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOTON1_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	4817      	ldr	r0, [pc, #92]	@ (800156c <MX_GPIO_Init+0x144>)
 8001510:	f001 fc02 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LEDGREEN_Pin LED4_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LEDGREEN_Pin|LED4_Pin
 8001514:	f24e 0306 	movw	r3, #57350	@ 0xe006
 8001518:	613b      	str	r3, [r7, #16]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	480f      	ldr	r0, [pc, #60]	@ (800156c <MX_GPIO_Init+0x144>)
 800152e:	f001 fbf3 	bl	8002d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2302      	movs	r3, #2
 8001540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4619      	mov	r1, r3
 8001548:	4809      	ldr	r0, [pc, #36]	@ (8001570 <MX_GPIO_Init+0x148>)
 800154a:	f001 fbe5 	bl	8002d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2028      	movs	r0, #40	@ 0x28
 8001554:	f001 f931 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001558:	2028      	movs	r0, #40	@ 0x28
 800155a:	f001 f94a 	bl	80027f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155e:	bf00      	nop
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	40010c00 	.word	0x40010c00
 8001570:	40011000 	.word	0x40011000
 8001574:	10110000 	.word	0x10110000
 8001578:	40010800 	.word	0x40010800

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <Error_Handler+0x8>

08001588 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <HAL_MspInit+0x5c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6193      	str	r3, [r2, #24]
 800159a:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_MspInit+0x5c>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <HAL_MspInit+0x5c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	61d3      	str	r3, [r2, #28]
 80015b2:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <HAL_MspInit+0x5c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_MspInit+0x60>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <HAL_MspInit+0x60>)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000

080015ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a37      	ldr	r2, [pc, #220]	@ (80016e4 <HAL_ADC_MspInit+0xf8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d167      	bne.n	80016dc <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800160c:	4b36      	ldr	r3, [pc, #216]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	4a35      	ldr	r2, [pc, #212]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001616:	6193      	str	r3, [r2, #24]
 8001618:	4b33      	ldr	r3, [pc, #204]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	4b30      	ldr	r3, [pc, #192]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a2f      	ldr	r2, [pc, #188]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a29      	ldr	r2, [pc, #164]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <HAL_ADC_MspInit+0xfc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001658:	2303      	movs	r3, #3
 800165a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4619      	mov	r1, r3
 8001662:	4822      	ldr	r0, [pc, #136]	@ (80016ec <HAL_ADC_MspInit+0x100>)
 8001664:	f001 fb58 	bl	8002d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001668:	2303      	movs	r3, #3
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166c:	2303      	movs	r3, #3
 800166e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	4619      	mov	r1, r3
 8001676:	481e      	ldr	r0, [pc, #120]	@ (80016f0 <HAL_ADC_MspInit+0x104>)
 8001678:	f001 fb4e 	bl	8002d18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 800167e:	4a1e      	ldr	r2, [pc, #120]	@ (80016f8 <HAL_ADC_MspInit+0x10c>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 8001690:	2280      	movs	r2, #128	@ 0x80
 8001692:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 8001696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800169a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 800169e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 80016a6:	2220      	movs	r2, #32
 80016a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016aa:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016b0:	4810      	ldr	r0, [pc, #64]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 80016b2:	f001 f8bf 	bl	8002834 <HAL_DMA_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80016bc:	f7ff ff5e 	bl	800157c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 80016c4:	621a      	str	r2, [r3, #32]
 80016c6:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_ADC_MspInit+0x108>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	2012      	movs	r0, #18
 80016d2:	f001 f872 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016d6:	2012      	movs	r0, #18
 80016d8:	f001 f88b 	bl	80027f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	@ 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40012400 	.word	0x40012400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40011000 	.word	0x40011000
 80016f0:	40010800 	.word	0x40010800
 80016f4:	200002bc 	.word	0x200002bc
 80016f8:	40020008 	.word	0x40020008

080016fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	@ 0x30
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a42      	ldr	r2, [pc, #264]	@ (8001820 <HAL_I2C_MspInit+0x124>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d143      	bne.n	80017a4 <HAL_I2C_MspInit+0xa8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171c:	4b41      	ldr	r3, [pc, #260]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a40      	ldr	r2, [pc, #256]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	61bb      	str	r3, [r7, #24]
 8001732:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001734:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800173a:	2312      	movs	r3, #18
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4837      	ldr	r0, [pc, #220]	@ (8001828 <HAL_I2C_MspInit+0x12c>)
 800174a:	f001 fae5 	bl	8002d18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800174e:	4b37      	ldr	r3, [pc, #220]	@ (800182c <HAL_I2C_MspInit+0x130>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001756:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800175c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001764:	4a31      	ldr	r2, [pc, #196]	@ (800182c <HAL_I2C_MspInit+0x130>)
 8001766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001768:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a2d      	ldr	r2, [pc, #180]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 8001770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	201f      	movs	r0, #31
 8001788:	f001 f817 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800178c:	201f      	movs	r0, #31
 800178e:	f001 f830 	bl	80027f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2020      	movs	r0, #32
 8001798:	f001 f80f 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800179c:	2020      	movs	r0, #32
 800179e:	f001 f828 	bl	80027f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017a2:	e039      	b.n	8001818 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <HAL_I2C_MspInit+0x134>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d134      	bne.n	8001818 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6193      	str	r3, [r2, #24]
 80017ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017cc:	2312      	movs	r3, #18
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4813      	ldr	r0, [pc, #76]	@ (8001828 <HAL_I2C_MspInit+0x12c>)
 80017dc:	f001 fa9c 	bl	8002d18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 80017e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017ea:	61d3      	str	r3, [r2, #28]
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_I2C_MspInit+0x128>)
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2021      	movs	r0, #33	@ 0x21
 80017fe:	f000 ffdc 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001802:	2021      	movs	r0, #33	@ 0x21
 8001804:	f000 fff5 	bl	80027f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2022      	movs	r0, #34	@ 0x22
 800180e:	f000 ffd4 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001812:	2022      	movs	r0, #34	@ 0x22
 8001814:	f000 ffed 	bl	80027f2 <HAL_NVIC_EnableIRQ>
}
 8001818:	bf00      	nop
 800181a:	3730      	adds	r7, #48	@ 0x30
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40005400 	.word	0x40005400
 8001824:	40021000 	.word	0x40021000
 8001828:	40010c00 	.word	0x40010c00
 800182c:	40010000 	.word	0x40010000
 8001830:	40005800 	.word	0x40005800

08001834 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1a      	ldr	r2, [pc, #104]	@ (80018b8 <HAL_TIM_IC_MspInit+0x84>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d12c      	bne.n	80018ae <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_TIM_IC_MspInit+0x88>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <HAL_TIM_IC_MspInit+0x88>)
 800185a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <HAL_TIM_IC_MspInit+0x88>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <HAL_TIM_IC_MspInit+0x88>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <HAL_TIM_IC_MspInit+0x88>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <HAL_TIM_IC_MspInit+0x88>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	4619      	mov	r1, r3
 8001898:	4809      	ldr	r0, [pc, #36]	@ (80018c0 <HAL_TIM_IC_MspInit+0x8c>)
 800189a:	f001 fa3d 	bl	8002d18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	201b      	movs	r0, #27
 80018a4:	f000 ff89 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018a8:	201b      	movs	r0, #27
 80018aa:	f000 ffa2 	bl	80027f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40012c00 	.word	0x40012c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800

080018c4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d4:	d10b      	bne.n	80018ee <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <HAL_TIM_OC_MspInit+0x34>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a07      	ldr	r2, [pc, #28]	@ (80018f8 <HAL_TIM_OC_MspInit+0x34>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_TIM_OC_MspInit+0x34>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191a:	d12a      	bne.n	8001972 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_TIM_MspPostInit+0x80>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a16      	ldr	r2, [pc, #88]	@ (800197c <HAL_TIM_MspPostInit+0x80>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <HAL_TIM_MspPostInit+0x80>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4619      	mov	r1, r3
 8001948:	480d      	ldr	r0, [pc, #52]	@ (8001980 <HAL_TIM_MspPostInit+0x84>)
 800194a:	f001 f9e5 	bl	8002d18 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_TIM_MspPostInit+0x88>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61fb      	str	r3, [r7, #28]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800195a:	61fb      	str	r3, [r7, #28]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196a:	61fb      	str	r3, [r7, #28]
 800196c:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <HAL_TIM_MspPostInit+0x88>)
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	40010800 	.word	0x40010800
 8001984:	40010000 	.word	0x40010000

08001988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a31      	ldr	r2, [pc, #196]	@ (8001a68 <HAL_UART_MspInit+0xe0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d132      	bne.n	8001a0e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019a8:	4b30      	ldr	r3, [pc, #192]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a2f      	ldr	r2, [pc, #188]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a29      	ldr	r2, [pc, #164]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b27      	ldr	r3, [pc, #156]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e2:	2303      	movs	r3, #3
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	4619      	mov	r1, r3
 80019ec:	4820      	ldr	r0, [pc, #128]	@ (8001a70 <HAL_UART_MspInit+0xe8>)
 80019ee:	f001 f993 	bl	8002d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0318 	add.w	r3, r7, #24
 8001a04:	4619      	mov	r1, r3
 8001a06:	481a      	ldr	r0, [pc, #104]	@ (8001a70 <HAL_UART_MspInit+0xe8>)
 8001a08:	f001 f986 	bl	8002d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a0c:	e028      	b.n	8001a60 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a18      	ldr	r2, [pc, #96]	@ (8001a74 <HAL_UART_MspInit+0xec>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d123      	bne.n	8001a60 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a18:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	4a13      	ldr	r2, [pc, #76]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a22:	61d3      	str	r3, [r2, #28]
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_UART_MspInit+0xe4>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2302      	movs	r3, #2
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0318 	add.w	r3, r7, #24
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <HAL_UART_MspInit+0xe8>)
 8001a5c:	f001 f95c 	bl	8002d18 <HAL_GPIO_Init>
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	@ 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010800 	.word	0x40010800
 8001a74:	40004400 	.word	0x40004400

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <NMI_Handler+0x4>

08001a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <HardFault_Handler+0x4>

08001a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <MemManage_Handler+0x4>

08001a90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <UsageFault_Handler+0x4>

08001aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac8:	f000 f8c4 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	  HAL_SYSTICK_IRQHandler();
 8001acc:	f000 feab 	bl	8002826 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <DMA1_Channel1_IRQHandler+0x10>)
 8001ada:	f000 ffdd 	bl	8002a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002bc 	.word	0x200002bc

08001ae8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <ADC1_2_IRQHandler+0x10>)
 8001aee:	f000 faa7 	bl	8002040 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000028c 	.word	0x2000028c

08001afc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <TIM1_CC_IRQHandler+0x10>)
 8001b02:	f005 f81b 	bl	8006b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200003a8 	.word	0x200003a8

08001b10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b14:	4802      	ldr	r0, [pc, #8]	@ (8001b20 <I2C1_EV_IRQHandler+0x10>)
 8001b16:	f002 f899 	bl	8003c4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000300 	.word	0x20000300

08001b24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b28:	4802      	ldr	r0, [pc, #8]	@ (8001b34 <I2C1_ER_IRQHandler+0x10>)
 8001b2a:	f002 f9e2 	bl	8003ef2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000300 	.word	0x20000300

08001b38 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <I2C2_EV_IRQHandler+0x10>)
 8001b3e:	f002 f885 	bl	8003c4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000354 	.word	0x20000354

08001b4c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001b50:	4802      	ldr	r0, [pc, #8]	@ (8001b5c <I2C2_ER_IRQHandler+0x10>)
 8001b52:	f002 f9ce 	bl	8003ef2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000354 	.word	0x20000354

08001b60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b64:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b68:	f001 fa8a 	bl	8003080 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b7c:	f7ff fff8 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b82:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b84:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b98:	4c09      	ldr	r4, [pc, #36]	@ (8001bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f00a fb71 	bl	800c28c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001baa:	f7ff f9eb 	bl	8000f84 <main>
  bx lr
 8001bae:	4770      	bx	lr
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8001bb8:	0800f684 	.word	0x0800f684
  ldr r2, =_sbss
 8001bbc:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001bc0:	20000828 	.word	0x20000828

08001bc4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <CAN1_RX1_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_Init+0x28>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_Init+0x28>)
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 fde3 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fcd0 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fdfb 	bl	800280e <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c30:	f000 fdc3 	bl	80027ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x1c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a03      	ldr	r2, [pc, #12]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000008 	.word	0x20000008
 8001c74:	200004c8 	.word	0x200004c8

08001c78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	@ (8001c88 <HAL_GetTick+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	200004c8 	.word	0x200004c8

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffe0 	bl	8001c78 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0be      	b.n	8001e74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fc6a 	bl	80015ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fbc7 	bl	80024ac <ADC_ConversionStop_Disable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 8099 	bne.w	8001e62 <HAL_ADC_Init+0x18e>
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8095 	bne.w	8001e62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d40:	f023 0302 	bic.w	r3, r3, #2
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7b1b      	ldrb	r3, [r3, #12]
 8001d5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d6c:	d003      	beq.n	8001d76 <HAL_ADC_Init+0xa2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_ADC_Init+0xa8>
 8001d76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d7a:	e000      	b.n	8001d7e <HAL_ADC_Init+0xaa>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7d1b      	ldrb	r3, [r3, #20]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d119      	bne.n	8001dc0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7b1b      	ldrb	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	035a      	lsls	r2, r3, #13
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e00b      	b.n	8001dc0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dac:	f043 0220 	orr.w	r2, r3, #32
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <HAL_ADC_Init+0x1a8>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001df0:	d003      	beq.n	8001dfa <HAL_ADC_Init+0x126>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d104      	bne.n	8001e04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	051b      	lsls	r3, r3, #20
 8001e02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <HAL_ADC_Init+0x1ac>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d10b      	bne.n	8001e40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e3e:	e018      	b.n	8001e72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	f023 0312 	bic.w	r3, r3, #18
 8001e48:	f043 0210 	orr.w	r2, r3, #16
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e60:	e007      	b.n	8001e72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e80:	ff1f0efe 	.word	0xff1f0efe

08001e84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a64      	ldr	r2, [pc, #400]	@ (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Start_DMA+0x24>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a63      	ldr	r2, [pc, #396]	@ (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x32>
 8001ea8:	4b60      	ldr	r3, [pc, #384]	@ (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 80b3 	bne.w	800201c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_Start_DMA+0x40>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e0ae      	b.n	8002022 <HAL_ADC_Start_DMA+0x19e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fa93 	bl	80023f8 <ADC_Enable>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 809a 	bne.w	8002012 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a4e      	ldr	r2, [pc, #312]	@ (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_Start_DMA+0x84>
 8001efc:	4b4b      	ldr	r3, [pc, #300]	@ (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d115      	bne.n	8001f34 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d026      	beq.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f2a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f32:	e01d      	b.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a39      	ldr	r2, [pc, #228]	@ (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_ADC_Start_DMA+0xd0>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a38      	ldr	r2, [pc, #224]	@ (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10d      	bne.n	8001f70 <HAL_ADC_Start_DMA+0xec>
 8001f54:	4b35      	ldr	r3, [pc, #212]	@ (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f68:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	f023 0206 	bic.w	r2, r3, #6
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	@ (8002034 <HAL_ADC_Start_DMA+0x1b0>)
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	@ (8002038 <HAL_ADC_Start_DMA+0x1b4>)
 8001fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a23      	ldr	r2, [pc, #140]	@ (800203c <HAL_ADC_Start_DMA+0x1b8>)
 8001fae:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fc8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a18      	ldr	r0, [r3, #32]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	334c      	adds	r3, #76	@ 0x4c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f000 fc85 	bl	80028e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001fe8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001fec:	d108      	bne.n	8002000 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ffc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ffe:	e00f      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800200e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002010:	e006      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800201a:	e001      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40012400 	.word	0x40012400
 8002030:	40012800 	.word	0x40012800
 8002034:	0800252f 	.word	0x0800252f
 8002038:	080025ab 	.word	0x080025ab
 800203c:	080025c7 	.word	0x080025c7

08002040 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d03e      	beq.n	80020e0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d039      	beq.n	80020e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800208e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002092:	d11d      	bne.n	80020d0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002098:	2b00      	cmp	r3, #0
 800209a:	d119      	bne.n	80020d0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0220 	bic.w	r2, r2, #32
 80020aa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f874 	bl	80021be <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f06f 0212 	mvn.w	r2, #18
 80020de:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d04d      	beq.n	8002186 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d048      	beq.n	8002186 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002104:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002116:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800211a:	d012      	beq.n	8002142 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002126:	2b00      	cmp	r3, #0
 8002128:	d125      	bne.n	8002176 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002134:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002138:	d11d      	bne.n	8002176 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800213e:	2b00      	cmp	r3, #0
 8002140:	d119      	bne.n	8002176 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002150:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002156:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa3f 	bl	80025fa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 020c 	mvn.w	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	d012      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00d      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f81b 	bl	80021e2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0201 	mvn.w	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
	...

08002208 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x20>
 8002224:	2302      	movs	r3, #2
 8002226:	e0dc      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x1da>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b06      	cmp	r3, #6
 8002236:	d81c      	bhi.n	8002272 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b05      	subs	r3, #5
 800224a:	221f      	movs	r2, #31
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	4019      	ands	r1, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6818      	ldr	r0, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b05      	subs	r3, #5
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002270:	e03c      	b.n	80022ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d81c      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	3b23      	subs	r3, #35	@ 0x23
 800228c:	221f      	movs	r2, #31
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	4019      	ands	r1, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b23      	subs	r3, #35	@ 0x23
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b2:	e01b      	b.n	80022ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	3b41      	subs	r3, #65	@ 0x41
 80022c6:	221f      	movs	r2, #31
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	4019      	ands	r1, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	3b41      	subs	r3, #65	@ 0x41
 80022e0:	fa00 f203 	lsl.w	r2, r0, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d91c      	bls.n	800232e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68d9      	ldr	r1, [r3, #12]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	3b1e      	subs	r3, #30
 8002306:	2207      	movs	r2, #7
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	4019      	ands	r1, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6898      	ldr	r0, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	3b1e      	subs	r3, #30
 8002320:	fa00 f203 	lsl.w	r2, r0, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	e019      	b.n	8002362 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6919      	ldr	r1, [r3, #16]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	2207      	movs	r2, #7
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	4019      	ands	r1, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	6898      	ldr	r0, [r3, #8]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b10      	cmp	r3, #16
 8002368:	d003      	beq.n	8002372 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800236e:	2b11      	cmp	r3, #17
 8002370:	d132      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <HAL_ADC_ConfigChannel+0x1e4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d125      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d126      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002398:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d11a      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023a2:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a13      	ldr	r2, [pc, #76]	@ (80023f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	0c9a      	lsrs	r2, r3, #18
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023b8:	e002      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3b01      	subs	r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f9      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x1b2>
 80023c6:	e007      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	40012400 	.word	0x40012400
 80023f0:	20000000 	.word	0x20000000
 80023f4:	431bde83 	.word	0x431bde83

080023f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d040      	beq.n	8002498 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0201 	orr.w	r2, r2, #1
 8002424:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002426:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <ADC_Enable+0xac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1f      	ldr	r2, [pc, #124]	@ (80024a8 <ADC_Enable+0xb0>)
 800242c:	fba2 2303 	umull	r2, r3, r2, r3
 8002430:	0c9b      	lsrs	r3, r3, #18
 8002432:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002434:	e002      	b.n	800243c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3b01      	subs	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f9      	bne.n	8002436 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002442:	f7ff fc19 	bl	8001c78 <HAL_GetTick>
 8002446:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002448:	e01f      	b.n	800248a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800244a:	f7ff fc15 	bl	8001c78 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d918      	bls.n	800248a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d011      	beq.n	800248a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e007      	b.n	800249a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d1d8      	bne.n	800244a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d12e      	bne.n	8002524 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024d6:	f7ff fbcf 	bl	8001c78 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024dc:	e01b      	b.n	8002516 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024de:	f7ff fbcb 	bl	8001c78 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d914      	bls.n	8002516 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d10d      	bne.n	8002516 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e007      	b.n	8002526 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d0dc      	beq.n	80024de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002540:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002544:	2b00      	cmp	r3, #0
 8002546:	d127      	bne.n	8002598 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800255e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002562:	d115      	bne.n	8002590 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fe14 	bl	80021be <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002596:	e004      	b.n	80025a2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fe09 	bl	80021d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fe01 	bl	80021f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800261c:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002628:	4013      	ands	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263e:	4a04      	ldr	r2, [pc, #16]	@ (8002650 <__NVIC_SetPriorityGrouping+0x44>)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	60d3      	str	r3, [r2, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002658:	4b04      	ldr	r3, [pc, #16]	@ (800266c <__NVIC_GetPriorityGrouping+0x18>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 0307 	and.w	r3, r3, #7
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	2b00      	cmp	r3, #0
 8002680:	db0b      	blt.n	800269a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	f003 021f 	and.w	r2, r3, #31
 8002688:	4906      	ldr	r1, [pc, #24]	@ (80026a4 <__NVIC_EnableIRQ+0x34>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2001      	movs	r0, #1
 8002692:	fa00 f202 	lsl.w	r2, r0, r2
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	@ (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	@ (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	@ 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	@ (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002784:	f7ff ff90 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff2d 	bl	800260c <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027cc:	f7ff ff42 	bl	8002654 <__NVIC_GetPriorityGrouping>
 80027d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6978      	ldr	r0, [r7, #20]
 80027d8:	f7ff ff90 	bl	80026fc <NVIC_EncodePriority>
 80027dc:	4602      	mov	r2, r0
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff5f 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff35 	bl	8002670 <__NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ffa2 	bl	8002760 <SysTick_Config>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800282a:	f005 fa3b 	bl	8007ca4 <HAL_SYSTICK_Callback>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e043      	b.n	80028d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	4b22      	ldr	r3, [pc, #136]	@ (80028dc <HAL_DMA_Init+0xa8>)
 8002852:	4413      	add	r3, r2
 8002854:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <HAL_DMA_Init+0xac>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	009a      	lsls	r2, r3, #2
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <HAL_DMA_Init+0xb0>)
 8002866:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800287e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002882:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800288c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002898:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	bffdfff8 	.word	0xbffdfff8
 80028e0:	cccccccd 	.word	0xcccccccd
 80028e4:	40020000 	.word	0x40020000

080028e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_DMA_Start_IT+0x20>
 8002904:	2302      	movs	r3, #2
 8002906:	e04b      	b.n	80029a0 <HAL_DMA_Start_IT+0xb8>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d13a      	bne.n	8002992 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f9bc 	bl	8002cbe <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 020e 	orr.w	r2, r2, #14
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e00f      	b.n	8002980 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0204 	bic.w	r2, r2, #4
 800296e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 020a 	orr.w	r2, r2, #10
 800297e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e005      	b.n	800299e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800299a:	2302      	movs	r3, #2
 800299c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d005      	beq.n	80029cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2204      	movs	r2, #4
 80029c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	e051      	b.n	8002a70 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020e 	bic.w	r2, r2, #14
 80029da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a22      	ldr	r2, [pc, #136]	@ (8002a7c <HAL_DMA_Abort_IT+0xd4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d029      	beq.n	8002a4a <HAL_DMA_Abort_IT+0xa2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a21      	ldr	r2, [pc, #132]	@ (8002a80 <HAL_DMA_Abort_IT+0xd8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d022      	beq.n	8002a46 <HAL_DMA_Abort_IT+0x9e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	@ (8002a84 <HAL_DMA_Abort_IT+0xdc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01a      	beq.n	8002a40 <HAL_DMA_Abort_IT+0x98>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a88 <HAL_DMA_Abort_IT+0xe0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d012      	beq.n	8002a3a <HAL_DMA_Abort_IT+0x92>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	@ (8002a8c <HAL_DMA_Abort_IT+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00a      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x8c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	@ (8002a90 <HAL_DMA_Abort_IT+0xe8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d102      	bne.n	8002a2e <HAL_DMA_Abort_IT+0x86>
 8002a28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002a2c:	e00e      	b.n	8002a4c <HAL_DMA_Abort_IT+0xa4>
 8002a2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a32:	e00b      	b.n	8002a4c <HAL_DMA_Abort_IT+0xa4>
 8002a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a38:	e008      	b.n	8002a4c <HAL_DMA_Abort_IT+0xa4>
 8002a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a3e:	e005      	b.n	8002a4c <HAL_DMA_Abort_IT+0xa4>
 8002a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a44:	e002      	b.n	8002a4c <HAL_DMA_Abort_IT+0xa4>
 8002a46:	2310      	movs	r3, #16
 8002a48:	e000      	b.n	8002a4c <HAL_DMA_Abort_IT+0xa4>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_DMA_Abort_IT+0xec>)
 8002a4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
    } 
  }
  return status;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40020008 	.word	0x40020008
 8002a80:	4002001c 	.word	0x4002001c
 8002a84:	40020030 	.word	0x40020030
 8002a88:	40020044 	.word	0x40020044
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	4002006c 	.word	0x4002006c
 8002a94:	40020000 	.word	0x40020000

08002a98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d04f      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xc8>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04a      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d107      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0204 	bic.w	r2, r2, #4
 8002ae6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a66      	ldr	r2, [pc, #408]	@ (8002c88 <HAL_DMA_IRQHandler+0x1f0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d029      	beq.n	8002b46 <HAL_DMA_IRQHandler+0xae>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_DMA_IRQHandler+0x1f4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xaa>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a63      	ldr	r2, [pc, #396]	@ (8002c90 <HAL_DMA_IRQHandler+0x1f8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xa4>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a62      	ldr	r2, [pc, #392]	@ (8002c94 <HAL_DMA_IRQHandler+0x1fc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d012      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x9e>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a60      	ldr	r2, [pc, #384]	@ (8002c98 <HAL_DMA_IRQHandler+0x200>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x98>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c9c <HAL_DMA_IRQHandler+0x204>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d102      	bne.n	8002b2a <HAL_DMA_IRQHandler+0x92>
 8002b24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b28:	e00e      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b2a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b2e:	e00b      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b30:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b34:	e008      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b36:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b3a:	e005      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b40:	e002      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b42:	2340      	movs	r3, #64	@ 0x40
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0xb0>
 8002b46:	2304      	movs	r3, #4
 8002b48:	4a55      	ldr	r2, [pc, #340]	@ (8002ca0 <HAL_DMA_IRQHandler+0x208>)
 8002b4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8094 	beq.w	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b5e:	e08e      	b.n	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	2202      	movs	r2, #2
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d056      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x186>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d051      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10b      	bne.n	8002ba0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 020a 	bic.w	r2, r2, #10
 8002b96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a38      	ldr	r2, [pc, #224]	@ (8002c88 <HAL_DMA_IRQHandler+0x1f0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d029      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x166>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a37      	ldr	r2, [pc, #220]	@ (8002c8c <HAL_DMA_IRQHandler+0x1f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x162>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a35      	ldr	r2, [pc, #212]	@ (8002c90 <HAL_DMA_IRQHandler+0x1f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x15c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a34      	ldr	r2, [pc, #208]	@ (8002c94 <HAL_DMA_IRQHandler+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d012      	beq.n	8002bee <HAL_DMA_IRQHandler+0x156>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a32      	ldr	r2, [pc, #200]	@ (8002c98 <HAL_DMA_IRQHandler+0x200>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00a      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x150>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a31      	ldr	r2, [pc, #196]	@ (8002c9c <HAL_DMA_IRQHandler+0x204>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d102      	bne.n	8002be2 <HAL_DMA_IRQHandler+0x14a>
 8002bdc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002be0:	e00e      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002be2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002be6:	e00b      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002be8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bec:	e008      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bf2:	e005      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bf8:	e002      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e000      	b.n	8002c00 <HAL_DMA_IRQHandler+0x168>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	4a27      	ldr	r2, [pc, #156]	@ (8002ca0 <HAL_DMA_IRQHandler+0x208>)
 8002c02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d034      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c1c:	e02f      	b.n	8002c7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	2208      	movs	r2, #8
 8002c24:	409a      	lsls	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x1e8>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020e 	bic.w	r2, r2, #14
 8002c46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	2101      	movs	r1, #1
 8002c52:	fa01 f202 	lsl.w	r2, r1, r2
 8002c56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
    }
  }
  return;
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
}
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40020008 	.word	0x40020008
 8002c8c:	4002001c 	.word	0x4002001c
 8002c90:	40020030 	.word	0x40020030
 8002c94:	40020044 	.word	0x40020044
 8002c98:	40020058 	.word	0x40020058
 8002c9c:	4002006c 	.word	0x4002006c
 8002ca0:	40020000 	.word	0x40020000

08002ca4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cb2:	b2db      	uxtb	r3, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d108      	bne.n	8002cfe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cfc:	e007      	b.n	8002d0e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b08b      	sub	sp, #44	@ 0x2c
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d22:	2300      	movs	r3, #0
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2a:	e169      	b.n	8003000 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 8158 	bne.w	8002ffa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4a9a      	ldr	r2, [pc, #616]	@ (8002fb8 <HAL_GPIO_Init+0x2a0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d05e      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d54:	4a98      	ldr	r2, [pc, #608]	@ (8002fb8 <HAL_GPIO_Init+0x2a0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d875      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d5a:	4a98      	ldr	r2, [pc, #608]	@ (8002fbc <HAL_GPIO_Init+0x2a4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d058      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d60:	4a96      	ldr	r2, [pc, #600]	@ (8002fbc <HAL_GPIO_Init+0x2a4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d86f      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d66:	4a96      	ldr	r2, [pc, #600]	@ (8002fc0 <HAL_GPIO_Init+0x2a8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d052      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d6c:	4a94      	ldr	r2, [pc, #592]	@ (8002fc0 <HAL_GPIO_Init+0x2a8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d869      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d72:	4a94      	ldr	r2, [pc, #592]	@ (8002fc4 <HAL_GPIO_Init+0x2ac>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04c      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d78:	4a92      	ldr	r2, [pc, #584]	@ (8002fc4 <HAL_GPIO_Init+0x2ac>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d863      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d7e:	4a92      	ldr	r2, [pc, #584]	@ (8002fc8 <HAL_GPIO_Init+0x2b0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d046      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
 8002d84:	4a90      	ldr	r2, [pc, #576]	@ (8002fc8 <HAL_GPIO_Init+0x2b0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d85d      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d8a:	2b12      	cmp	r3, #18
 8002d8c:	d82a      	bhi.n	8002de4 <HAL_GPIO_Init+0xcc>
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d859      	bhi.n	8002e46 <HAL_GPIO_Init+0x12e>
 8002d92:	a201      	add	r2, pc, #4	@ (adr r2, 8002d98 <HAL_GPIO_Init+0x80>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002e13 	.word	0x08002e13
 8002d9c:	08002ded 	.word	0x08002ded
 8002da0:	08002dff 	.word	0x08002dff
 8002da4:	08002e41 	.word	0x08002e41
 8002da8:	08002e47 	.word	0x08002e47
 8002dac:	08002e47 	.word	0x08002e47
 8002db0:	08002e47 	.word	0x08002e47
 8002db4:	08002e47 	.word	0x08002e47
 8002db8:	08002e47 	.word	0x08002e47
 8002dbc:	08002e47 	.word	0x08002e47
 8002dc0:	08002e47 	.word	0x08002e47
 8002dc4:	08002e47 	.word	0x08002e47
 8002dc8:	08002e47 	.word	0x08002e47
 8002dcc:	08002e47 	.word	0x08002e47
 8002dd0:	08002e47 	.word	0x08002e47
 8002dd4:	08002e47 	.word	0x08002e47
 8002dd8:	08002e47 	.word	0x08002e47
 8002ddc:	08002df5 	.word	0x08002df5
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	4a79      	ldr	r2, [pc, #484]	@ (8002fcc <HAL_GPIO_Init+0x2b4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dea:	e02c      	b.n	8002e46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	623b      	str	r3, [r7, #32]
          break;
 8002df2:	e029      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	623b      	str	r3, [r7, #32]
          break;
 8002dfc:	e024      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	3308      	adds	r3, #8
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e01f      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	330c      	adds	r3, #12
 8002e0e:	623b      	str	r3, [r7, #32]
          break;
 8002e10:	e01a      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	623b      	str	r3, [r7, #32]
          break;
 8002e1e:	e013      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	611a      	str	r2, [r3, #16]
          break;
 8002e32:	e009      	b.n	8002e48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e34:	2308      	movs	r3, #8
 8002e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	615a      	str	r2, [r3, #20]
          break;
 8002e3e:	e003      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
          break;
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x130>
          break;
 8002e46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2bff      	cmp	r3, #255	@ 0xff
 8002e4c:	d801      	bhi.n	8002e52 <HAL_GPIO_Init+0x13a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e001      	b.n	8002e56 <HAL_GPIO_Init+0x13e>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2bff      	cmp	r3, #255	@ 0xff
 8002e5c:	d802      	bhi.n	8002e64 <HAL_GPIO_Init+0x14c>
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	e002      	b.n	8002e6a <HAL_GPIO_Init+0x152>
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	3b08      	subs	r3, #8
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	210f      	movs	r1, #15
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	6a39      	ldr	r1, [r7, #32]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80b1 	beq.w	8002ffa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e98:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6193      	str	r3, [r2, #24]
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <HAL_GPIO_Init+0x2b8>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002eb0:	4a48      	ldr	r2, [pc, #288]	@ (8002fd4 <HAL_GPIO_Init+0x2bc>)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a40      	ldr	r2, [pc, #256]	@ (8002fd8 <HAL_GPIO_Init+0x2c0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_GPIO_Init+0x1ec>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a3f      	ldr	r2, [pc, #252]	@ (8002fdc <HAL_GPIO_Init+0x2c4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00d      	beq.n	8002f00 <HAL_GPIO_Init+0x1e8>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fe0 <HAL_GPIO_Init+0x2c8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d007      	beq.n	8002efc <HAL_GPIO_Init+0x1e4>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe4 <HAL_GPIO_Init+0x2cc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_GPIO_Init+0x1e0>
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e006      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e004      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e002      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_GPIO_Init+0x1ee>
 8002f04:	2300      	movs	r3, #0
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	f002 0203 	and.w	r2, r2, #3
 8002f0c:	0092      	lsls	r2, r2, #2
 8002f0e:	4093      	lsls	r3, r2
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f16:	492f      	ldr	r1, [pc, #188]	@ (8002fd4 <HAL_GPIO_Init+0x2bc>)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f30:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	492c      	ldr	r1, [pc, #176]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	4928      	ldr	r1, [pc, #160]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f58:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4922      	ldr	r1, [pc, #136]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60cb      	str	r3, [r1, #12]
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f66:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	491e      	ldr	r1, [pc, #120]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f80:	4b19      	ldr	r3, [pc, #100]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	4918      	ldr	r1, [pc, #96]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f8e:	4b16      	ldr	r3, [pc, #88]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	4914      	ldr	r1, [pc, #80]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d021      	beq.n	8002fec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	490e      	ldr	r1, [pc, #56]	@ (8002fe8 <HAL_GPIO_Init+0x2d0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
 8002fb4:	e021      	b.n	8002ffa <HAL_GPIO_Init+0x2e2>
 8002fb6:	bf00      	nop
 8002fb8:	10320000 	.word	0x10320000
 8002fbc:	10310000 	.word	0x10310000
 8002fc0:	10220000 	.word	0x10220000
 8002fc4:	10210000 	.word	0x10210000
 8002fc8:	10120000 	.word	0x10120000
 8002fcc:	10110000 	.word	0x10110000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	40010c00 	.word	0x40010c00
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	40011400 	.word	0x40011400
 8002fe8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	4909      	ldr	r1, [pc, #36]	@ (800301c <HAL_GPIO_Init+0x304>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	fa22 f303 	lsr.w	r3, r2, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	f47f ae8e 	bne.w	8002d2c <HAL_GPIO_Init+0x14>
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	372c      	adds	r7, #44	@ 0x2c
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr
 800301c:	40010400 	.word	0x40010400

08003020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	887b      	ldrh	r3, [r7, #2]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e001      	b.n	8003042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	807b      	strh	r3, [r7, #2]
 800305a:	4613      	mov	r3, r2
 800305c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800305e:	787b      	ldrb	r3, [r7, #1]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800306a:	e003      	b.n	8003074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	041a      	lsls	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	611a      	str	r2, [r3, #16]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003096:	4a05      	ldr	r2, [pc, #20]	@ (80030ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800309c:	88fb      	ldrh	r3, [r7, #6]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f806 	bl	80030b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40010400 	.word	0x40010400

080030b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e12b      	b.n	800332e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fb06 	bl	80016fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	@ 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003128:	f003 fa62 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a81      	ldr	r2, [pc, #516]	@ (8003338 <HAL_I2C_Init+0x274>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d807      	bhi.n	8003148 <HAL_I2C_Init+0x84>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a80      	ldr	r2, [pc, #512]	@ (800333c <HAL_I2C_Init+0x278>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e006      	b.n	8003156 <HAL_I2C_Init+0x92>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a7d      	ldr	r2, [pc, #500]	@ (8003340 <HAL_I2C_Init+0x27c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0e7      	b.n	800332e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a78      	ldr	r2, [pc, #480]	@ (8003344 <HAL_I2C_Init+0x280>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a6a      	ldr	r2, [pc, #424]	@ (8003338 <HAL_I2C_Init+0x274>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d802      	bhi.n	8003198 <HAL_I2C_Init+0xd4>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	e009      	b.n	80031ac <HAL_I2C_Init+0xe8>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a69      	ldr	r2, [pc, #420]	@ (8003348 <HAL_I2C_Init+0x284>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	495c      	ldr	r1, [pc, #368]	@ (8003338 <HAL_I2C_Init+0x274>)
 80031c8:	428b      	cmp	r3, r1
 80031ca:	d819      	bhi.n	8003200 <HAL_I2C_Init+0x13c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e59      	subs	r1, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031e0:	400b      	ands	r3, r1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_I2C_Init+0x138>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e59      	subs	r1, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	e051      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e04f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_I2C_Init+0x168>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e58      	subs	r0, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	440b      	add	r3, r1
 8003216:	fbb0 f3f3 	udiv	r3, r0, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e012      	b.n	8003252 <HAL_I2C_Init+0x18e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	0099      	lsls	r1, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Init+0x196>
 8003256:	2301      	movs	r3, #1
 8003258:	e022      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10e      	bne.n	8003280 <HAL_I2C_Init+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1e58      	subs	r0, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	440b      	add	r3, r1
 8003270:	fbb0 f3f3 	udiv	r3, r0, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	fbb0 f3f3 	udiv	r3, r0, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	6809      	ldr	r1, [r1, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6911      	ldr	r1, [r2, #16]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	000186a0 	.word	0x000186a0
 800333c:	001e847f 	.word	0x001e847f
 8003340:	003d08ff 	.word	0x003d08ff
 8003344:	431bde83 	.word	0x431bde83
 8003348:	10624dd3 	.word	0x10624dd3

0800334c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b80      	cmp	r3, #128	@ 0x80
 8003360:	d103      	bne.n	800336a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2200      	movs	r2, #0
 8003368:	611a      	str	r2, [r3, #16]
  }
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	461a      	mov	r2, r3
 8003380:	460b      	mov	r3, r1
 8003382:	817b      	strh	r3, [r7, #10]
 8003384:	4613      	mov	r3, r2
 8003386:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7fe fc76 	bl	8001c78 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b20      	cmp	r3, #32
 8003398:	f040 80e0 	bne.w	800355c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2319      	movs	r3, #25
 80033a2:	2201      	movs	r2, #1
 80033a4:	4970      	ldr	r1, [pc, #448]	@ (8003568 <HAL_I2C_Master_Transmit+0x1f4>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f002 fad6 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0d3      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_I2C_Master_Transmit+0x50>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0cc      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d007      	beq.n	80033ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2221      	movs	r2, #33	@ 0x21
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2210      	movs	r2, #16
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	893a      	ldrh	r2, [r7, #8]
 800341a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a50      	ldr	r2, [pc, #320]	@ (800356c <HAL_I2C_Master_Transmit+0x1f8>)
 800342a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800342c:	8979      	ldrh	r1, [r7, #10]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f001 ffe8 	bl	8005408 <I2C_MasterRequestWrite>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e08d      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003458:	e066      	b.n	8003528 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f002 fb94 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06b      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11b      	bne.n	80034fc <HAL_I2C_Master_Transmit+0x188>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d017      	beq.n	80034fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	6a39      	ldr	r1, [r7, #32]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f002 fb8b 	bl	8005c1c <I2C_WaitOnBTFFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	2b04      	cmp	r3, #4
 8003512:	d107      	bne.n	8003524 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003522:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e01a      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d194      	bne.n	800345a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	00100002 	.word	0x00100002
 800356c:	ffff0000 	.word	0xffff0000

08003570 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	817b      	strh	r3, [r7, #10]
 8003582:	460b      	mov	r3, r1
 8003584:	813b      	strh	r3, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800358a:	f7fe fb75 	bl	8001c78 <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b20      	cmp	r3, #32
 800359a:	f040 80d9 	bne.w	8003750 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2319      	movs	r3, #25
 80035a4:	2201      	movs	r2, #1
 80035a6:	496d      	ldr	r1, [pc, #436]	@ (800375c <HAL_I2C_Mem_Write+0x1ec>)
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f002 f9d5 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
 80035b6:	e0cc      	b.n	8003752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Mem_Write+0x56>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e0c5      	b.n	8003752 <HAL_I2C_Mem_Write+0x1e2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d007      	beq.n	80035ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2221      	movs	r2, #33	@ 0x21
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2240      	movs	r2, #64	@ 0x40
 8003608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800361c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a4d      	ldr	r2, [pc, #308]	@ (8003760 <HAL_I2C_Mem_Write+0x1f0>)
 800362c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800362e:	88f8      	ldrh	r0, [r7, #6]
 8003630:	893a      	ldrh	r2, [r7, #8]
 8003632:	8979      	ldrh	r1, [r7, #10]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	4603      	mov	r3, r0
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 ff64 	bl	800550c <I2C_RequestMemoryWrite>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d052      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e081      	b.n	8003752 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f002 fa9a 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	2b04      	cmp	r3, #4
 8003664:	d107      	bne.n	8003676 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e06b      	b.n	8003752 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	781a      	ldrb	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d11b      	bne.n	80036f0 <HAL_I2C_Mem_Write+0x180>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d017      	beq.n	80036f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1aa      	bne.n	800364e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f002 fa8d 	bl	8005c1c <I2C_WaitOnBTFFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800371e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e016      	b.n	8003752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	00100002 	.word	0x00100002
 8003760:	ffff0000 	.word	0xffff0000

08003764 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	@ 0x30
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	4603      	mov	r3, r0
 8003774:	817b      	strh	r3, [r7, #10]
 8003776:	460b      	mov	r3, r1
 8003778:	813b      	strh	r3, [r7, #8]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003782:	f7fe fa79 	bl	8001c78 <HAL_GetTick>
 8003786:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b20      	cmp	r3, #32
 8003792:	f040 8250 	bne.w	8003c36 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2319      	movs	r3, #25
 800379c:	2201      	movs	r2, #1
 800379e:	4982      	ldr	r1, [pc, #520]	@ (80039a8 <HAL_I2C_Mem_Read+0x244>)
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f002 f8d9 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
 80037ae:	e243      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_I2C_Mem_Read+0x5a>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e23c      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d007      	beq.n	80037e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2222      	movs	r2, #34	@ 0x22
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2240      	movs	r2, #64	@ 0x40
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003814:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4a62      	ldr	r2, [pc, #392]	@ (80039ac <HAL_I2C_Mem_Read+0x248>)
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003826:	88f8      	ldrh	r0, [r7, #6]
 8003828:	893a      	ldrh	r2, [r7, #8]
 800382a:	8979      	ldrh	r1, [r7, #10]
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4603      	mov	r3, r0
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f001 fefe 	bl	8005638 <I2C_RequestMemoryRead>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1f8      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d113      	bne.n	8003876 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	61fb      	str	r3, [r7, #28]
 8003862:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e1cc      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	2b01      	cmp	r3, #1
 800387c:	d11e      	bne.n	80038bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800388e:	b672      	cpsid	i
}
 8003890:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038b8:	b662      	cpsie	i
}
 80038ba:	e035      	b.n	8003928 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d11e      	bne.n	8003902 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038d4:	b672      	cpsid	i
}
 80038d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038fe:	b662      	cpsie	i
}
 8003900:	e012      	b.n	8003928 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003910:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003928:	e172      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	2b03      	cmp	r3, #3
 8003930:	f200 811f 	bhi.w	8003b72 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003938:	2b01      	cmp	r3, #1
 800393a:	d123      	bne.n	8003984 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f002 f9e5 	bl	8005d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e173      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003982:	e145      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003988:	2b02      	cmp	r3, #2
 800398a:	d152      	bne.n	8003a32 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003992:	2200      	movs	r2, #0
 8003994:	4906      	ldr	r1, [pc, #24]	@ (80039b0 <HAL_I2C_Mem_Read+0x24c>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f001 ffde 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e148      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
 80039a6:	bf00      	nop
 80039a8:	00100002 	.word	0x00100002
 80039ac:	ffff0000 	.word	0xffff0000
 80039b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039b4:	b672      	cpsid	i
}
 80039b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039fa:	b662      	cpsie	i
}
 80039fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a30:	e0ee      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4981      	ldr	r1, [pc, #516]	@ (8003c40 <HAL_I2C_Mem_Read+0x4dc>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f001 ff8b 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0f5      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5c:	b672      	cpsid	i
}
 8003a5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a92:	4b6c      	ldr	r3, [pc, #432]	@ (8003c44 <HAL_I2C_Mem_Read+0x4e0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	08db      	lsrs	r3, r3, #3
 8003a98:	4a6b      	ldr	r2, [pc, #428]	@ (8003c48 <HAL_I2C_Mem_Read+0x4e4>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0a1a      	lsrs	r2, r3, #8
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00da      	lsls	r2, r3, #3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d118      	bne.n	8003aea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ada:	b662      	cpsie	i
}
 8003adc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e0a6      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d1d9      	bne.n	8003aac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b3a:	b662      	cpsie	i
}
 8003b3c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b70:	e04e      	b.n	8003c10 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f002 f8ca 	bl	8005d10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e058      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d124      	bne.n	8003c10 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bdc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f47f ae88 	bne.w	800392a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3728      	adds	r7, #40	@ 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	00010004 	.word	0x00010004
 8003c44:	20000000 	.word	0x20000000
 8003c48:	14f8b589 	.word	0x14f8b589

08003c4c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c6c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d003      	beq.n	8003c84 <HAL_I2C_EV_IRQHandler+0x38>
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	f040 80b1 	bne.w	8003de6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <HAL_I2C_EV_IRQHandler+0x6e>
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003ca4:	d003      	beq.n	8003cae <HAL_I2C_EV_IRQHandler+0x62>
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003cac:	d101      	bne.n	8003cb2 <HAL_I2C_EV_IRQHandler+0x66>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_I2C_EV_IRQHandler+0x68>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f000 8114 	beq.w	8003ee2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x90>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d006      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f002 f8a9 	bl	8005e26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fd74 	bl	80047c2 <I2C_Master_SB>
 8003cda:	e083      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_I2C_EV_IRQHandler+0xac>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fdeb 	bl	80048cc <I2C_Master_ADD10>
 8003cf6:	e075      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <HAL_I2C_EV_IRQHandler+0xc8>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fe06 	bl	800491e <I2C_Master_ADDR>
 8003d12:	e067      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d036      	beq.n	8003d8c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d2c:	f000 80db 	beq.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00d      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f9d4 	bl	80040fc <I2C_MasterTransmit_TXE>
 8003d54:	e046      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 80c2 	beq.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 80bc 	beq.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d6e:	7bbb      	ldrb	r3, [r7, #14]
 8003d70:	2b21      	cmp	r3, #33	@ 0x21
 8003d72:	d103      	bne.n	8003d7c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fa5d 	bl	8004234 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7a:	e0b4      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	f040 80b1 	bne.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 facb 	bl	8004320 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d8a:	e0ac      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9a:	f000 80a4 	beq.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x178>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x178>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d103      	bne.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb47 	bl	8004450 <I2C_MasterReceive_RXNE>
 8003dc2:	e00f      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 808b 	beq.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 8085 	beq.w	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fbff 	bl	80045e0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003de2:	e080      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003de4:	e07f      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d004      	beq.n	8003df8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e007      	b.n	8003e08 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d011      	beq.n	8003e36 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00c      	beq.n	8003e36 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e2c:	69b9      	ldr	r1, [r7, #24]
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 ffcc 	bl	8004dcc <I2C_Slave_ADDR>
 8003e34:	e05a      	b.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_I2C_EV_IRQHandler+0x206>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f001 f806 	bl	8004e5c <I2C_Slave_STOPF>
 8003e50:	e04c      	b.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e52:	7bbb      	ldrb	r3, [r7, #14]
 8003e54:	2b21      	cmp	r3, #33	@ 0x21
 8003e56:	d002      	beq.n	8003e5e <HAL_I2C_EV_IRQHandler+0x212>
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	2b29      	cmp	r3, #41	@ 0x29
 8003e5c:	d120      	bne.n	8003ea0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x238>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x238>
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fee9 	bl	8004c54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e82:	e032      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02d      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x29e>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d028      	beq.n	8003eea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 ff18 	bl	8004cce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e9e:	e024      	b.n	8003eea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 ff25 	bl	8004d0e <I2C_SlaveReceive_RXNE>
 8003ec4:	e012      	b.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00d      	beq.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 ff55 	bl	8004d8a <I2C_SlaveReceive_BTF>
 8003ee0:	e004      	b.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b08a      	sub	sp, #40	@ 0x28
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d015      	beq.n	8003f4c <HAL_I2C_ER_IRQHandler+0x5a>
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d010      	beq.n	8003f4c <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f3a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00d      	beq.n	8003f72 <HAL_I2C_ER_IRQHandler+0x80>
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003f70:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d03e      	beq.n	8003ffa <HAL_I2C_ER_IRQHandler+0x108>
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d039      	beq.n	8003ffa <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8003f86:	7efb      	ldrb	r3, [r7, #27]
 8003f88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003fa0:	7ebb      	ldrb	r3, [r7, #26]
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d112      	bne.n	8003fcc <HAL_I2C_ER_IRQHandler+0xda>
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <HAL_I2C_ER_IRQHandler+0xda>
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b21      	cmp	r3, #33	@ 0x21
 8003fb0:	d008      	beq.n	8003fc4 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b29      	cmp	r3, #41	@ 0x29
 8003fb6:	d005      	beq.n	8003fc4 <HAL_I2C_ER_IRQHandler+0xd2>
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	2b28      	cmp	r3, #40	@ 0x28
 8003fbc:	d106      	bne.n	8003fcc <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b21      	cmp	r3, #33	@ 0x21
 8003fc2:	d103      	bne.n	8003fcc <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f001 f879 	bl	80050bc <I2C_Slave_AF>
 8003fca:	e016      	b.n	8003ffa <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fd4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	f043 0304 	orr.w	r3, r3, #4
 8003fdc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fde:	7efb      	ldrb	r3, [r7, #27]
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d002      	beq.n	8003fea <HAL_I2C_ER_IRQHandler+0xf8>
 8003fe4:	7efb      	ldrb	r3, [r7, #27]
 8003fe6:	2b40      	cmp	r3, #64	@ 0x40
 8003fe8:	d107      	bne.n	8003ffa <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00d      	beq.n	8004020 <HAL_I2C_ER_IRQHandler+0x12e>
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800401e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f001 f8b6 	bl	80051a4 <I2C_ITError>
  }
}
 8004038:	bf00      	nop
 800403a:	3728      	adds	r7, #40	@ 0x28
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
 8004094:	4613      	mov	r3, r2
 8004096:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004112:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	d150      	bne.n	80041c4 <I2C_MasterTransmit_TXE+0xc8>
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	2b21      	cmp	r3, #33	@ 0x21
 8004126:	d14d      	bne.n	80041c4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b08      	cmp	r3, #8
 800412c:	d01d      	beq.n	800416a <I2C_MasterTransmit_TXE+0x6e>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b20      	cmp	r3, #32
 8004132:	d01a      	beq.n	800416a <I2C_MasterTransmit_TXE+0x6e>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800413a:	d016      	beq.n	800416a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800414a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2211      	movs	r2, #17
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff ff6c 	bl	8004040 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004168:	e060      	b.n	800422c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004178:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004188:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b40      	cmp	r3, #64	@ 0x40
 80041a2:	d107      	bne.n	80041b4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff81 	bl	80040b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041b2:	e03b      	b.n	800422c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff3f 	bl	8004040 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c2:	e033      	b.n	800422c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b21      	cmp	r3, #33	@ 0x21
 80041c8:	d005      	beq.n	80041d6 <I2C_MasterTransmit_TXE+0xda>
 80041ca:	7bbb      	ldrb	r3, [r7, #14]
 80041cc:	2b40      	cmp	r3, #64	@ 0x40
 80041ce:	d12d      	bne.n	800422c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
 80041d2:	2b22      	cmp	r3, #34	@ 0x22
 80041d4:	d12a      	bne.n	800422c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041f0:	e01c      	b.n	800422c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b40      	cmp	r3, #64	@ 0x40
 80041fc:	d103      	bne.n	8004206 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f88e 	bl	8004320 <I2C_MemoryTransmit_TXE_BTF>
}
 8004204:	e012      	b.n	800422c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	781a      	ldrb	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800422a:	e7ff      	b.n	800422c <I2C_MasterTransmit_TXE+0x130>
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b21      	cmp	r3, #33	@ 0x21
 800424c:	d164      	bne.n	8004318 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d012      	beq.n	800427e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800427c:	e04c      	b.n	8004318 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d01d      	beq.n	80042c0 <I2C_MasterTransmit_BTF+0x8c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b20      	cmp	r3, #32
 8004288:	d01a      	beq.n	80042c0 <I2C_MasterTransmit_BTF+0x8c>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004290:	d016      	beq.n	80042c0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042a0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2211      	movs	r2, #17
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fec1 	bl	8004040 <HAL_I2C_MasterTxCpltCallback>
}
 80042be:	e02b      	b.n	8004318 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042ce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042de:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b40      	cmp	r3, #64	@ 0x40
 80042f8:	d107      	bne.n	800430a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fed6 	bl	80040b4 <HAL_I2C_MemTxCpltCallback>
}
 8004308:	e006      	b.n	8004318 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff fe94 	bl	8004040 <HAL_I2C_MasterTxCpltCallback>
}
 8004318:	bf00      	nop
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11d      	bne.n	8004374 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10b      	bne.n	8004358 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004350:	1c9a      	adds	r2, r3, #2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004356:	e077      	b.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800435c:	b29b      	uxth	r3, r3
 800435e:	121b      	asrs	r3, r3, #8
 8004360:	b2da      	uxtb	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004372:	e069      	b.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10b      	bne.n	8004394 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004380:	b2da      	uxtb	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004392:	e059      	b.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004398:	2b02      	cmp	r3, #2
 800439a:	d152      	bne.n	8004442 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b22      	cmp	r3, #34	@ 0x22
 80043a0:	d10d      	bne.n	80043be <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043b0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043bc:	e044      	b.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d015      	beq.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b21      	cmp	r3, #33	@ 0x21
 80043cc:	d112      	bne.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043f2:	e029      	b.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d124      	bne.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	2b21      	cmp	r3, #33	@ 0x21
 8004402:	d121      	bne.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004412:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004422:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fe3a 	bl	80040b4 <HAL_I2C_MemTxCpltCallback>
}
 8004440:	e002      	b.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fe ff82 	bl	800334c <I2C_Flush_DR>
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b22      	cmp	r3, #34	@ 0x22
 8004462:	f040 80b9 	bne.w	80045d8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d921      	bls.n	80044be <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	f040 8096 	bne.w	80045d8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ba:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80044bc:	e08c      	b.n	80045d8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d07f      	beq.n	80045c6 <I2C_MasterReceive_RXNE+0x176>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d002      	beq.n	80044d2 <I2C_MasterReceive_RXNE+0x82>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d179      	bne.n	80045c6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f001 fbea 	bl	8005cac <I2C_WaitOnSTOPRequestThroughIT>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d14c      	bne.n	8004578 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d10a      	bne.n	800454e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff fdbd 	bl	80040c6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800454c:	e044      	b.n	80045d8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d002      	beq.n	8004562 <I2C_MasterReceive_RXNE+0x112>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b20      	cmp	r3, #32
 8004560:	d103      	bne.n	800456a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30
 8004568:	e002      	b.n	8004570 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2212      	movs	r2, #18
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fd6e 	bl	8004052 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004576:	e02f      	b.n	80045d8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004586:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fd8a 	bl	80040d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045c4:	e008      	b.n	80045d8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d4:	605a      	str	r2, [r3, #4]
}
 80045d6:	e7ff      	b.n	80045d8 <I2C_MasterReceive_RXNE+0x188>
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d11b      	bne.n	8004630 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004606:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800462e:	e0c4      	b.n	80047ba <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b03      	cmp	r3, #3
 8004638:	d129      	bne.n	800468e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004648:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d00a      	beq.n	8004666 <I2C_MasterReceive_BTF+0x86>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d007      	beq.n	8004666 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004664:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800468c:	e095      	b.n	80047ba <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d17d      	bne.n	8004794 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d002      	beq.n	80046a4 <I2C_MasterReceive_BTF+0xc4>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d108      	bne.n	80046b6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e016      	b.n	80046e4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d002      	beq.n	80046c2 <I2C_MasterReceive_BTF+0xe2>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d108      	bne.n	80046d4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e007      	b.n	80046e4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800473e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b40      	cmp	r3, #64	@ 0x40
 8004752:	d10a      	bne.n	800476a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff fcaf 	bl	80040c6 <HAL_I2C_MemRxCpltCallback>
}
 8004768:	e027      	b.n	80047ba <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d002      	beq.n	800477e <I2C_MasterReceive_BTF+0x19e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b20      	cmp	r3, #32
 800477c:	d103      	bne.n	8004786 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	631a      	str	r2, [r3, #48]	@ 0x30
 8004784:	e002      	b.n	800478c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2212      	movs	r2, #18
 800478a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fc60 	bl	8004052 <HAL_I2C_MasterRxCpltCallback>
}
 8004792:	e012      	b.n	80047ba <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b40      	cmp	r3, #64	@ 0x40
 80047d4:	d117      	bne.n	8004806 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80047f0:	e067      	b.n	80048c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]
}
 8004804:	e05d      	b.n	80048c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800480e:	d133      	bne.n	8004878 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b21      	cmp	r3, #33	@ 0x21
 800481a:	d109      	bne.n	8004830 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	e008      	b.n	8004842 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004834:	b2db      	uxtb	r3, r3
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <I2C_Master_SB+0x92>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d108      	bne.n	8004866 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004858:	2b00      	cmp	r3, #0
 800485a:	d032      	beq.n	80048c2 <I2C_Master_SB+0x100>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02d      	beq.n	80048c2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004874:	605a      	str	r2, [r3, #4]
}
 8004876:	e024      	b.n	80048c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10e      	bne.n	800489e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004884:	b29b      	uxth	r3, r3
 8004886:	11db      	asrs	r3, r3, #7
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f003 0306 	and.w	r3, r3, #6
 800488e:	b2db      	uxtb	r3, r3
 8004890:	f063 030f 	orn	r3, r3, #15
 8004894:	b2da      	uxtb	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	611a      	str	r2, [r3, #16]
}
 800489c:	e011      	b.n	80048c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d10d      	bne.n	80048c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	11db      	asrs	r3, r3, #7
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f003 0306 	and.w	r3, r3, #6
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f063 030e 	orn	r3, r3, #14
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d004      	beq.n	80048f2 <I2C_Master_ADD10+0x26>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d108      	bne.n	8004904 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <I2C_Master_ADD10+0x48>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004912:	605a      	str	r2, [r3, #4]
  }
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800491e:	b480      	push	{r7}
 8004920:	b091      	sub	sp, #68	@ 0x44
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800492c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b22      	cmp	r3, #34	@ 0x22
 8004946:	f040 8174 	bne.w	8004c32 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <I2C_Master_ADDR+0x54>
 8004952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d10b      	bne.n	8004972 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	633b      	str	r3, [r7, #48]	@ 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	633b      	str	r3, [r7, #48]	@ 0x30
 800496e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004970:	e16b      	b.n	8004c4a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <I2C_Master_ADDR+0x98>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004982:	d118      	bne.n	80049b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b4:	e149      	b.n	8004c4a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d113      	bne.n	80049e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e120      	b.n	8004c2a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f040 808a 	bne.w	8004b08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80049f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049fa:	d137      	bne.n	8004a6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1a:	d113      	bne.n	8004a44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	e0f2      	b.n	8004c2a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a44:	2300      	movs	r3, #0
 8004a46:	623b      	str	r3, [r7, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e0de      	b.n	8004c2a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d02e      	beq.n	8004ad0 <I2C_Master_ADDR+0x1b2>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d02b      	beq.n	8004ad0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	2b12      	cmp	r3, #18
 8004a7c:	d102      	bne.n	8004a84 <I2C_Master_ADDR+0x166>
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d125      	bne.n	8004ad0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00e      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d00b      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
 8004a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d008      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e007      	b.n	8004ab8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ab6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	e0ac      	b.n	8004c2a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ade:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e090      	b.n	8004c2a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d158      	bne.n	8004bc4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d021      	beq.n	8004b5c <I2C_Master_ADDR+0x23e>
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d01e      	beq.n	8004b5c <I2C_Master_ADDR+0x23e>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d01b      	beq.n	8004b5c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e012      	b.n	8004b82 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b90:	d14b      	bne.n	8004c2a <I2C_Master_ADDR+0x30c>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b98:	d00b      	beq.n	8004bb2 <I2C_Master_ADDR+0x294>
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d008      	beq.n	8004bb2 <I2C_Master_ADDR+0x294>
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d005      	beq.n	8004bb2 <I2C_Master_ADDR+0x294>
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d002      	beq.n	8004bb2 <I2C_Master_ADDR+0x294>
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d13b      	bne.n	8004c2a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	e032      	b.n	8004c2a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bd2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004be2:	d117      	bne.n	8004c14 <I2C_Master_ADDR+0x2f6>
 8004be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bea:	d00b      	beq.n	8004c04 <I2C_Master_ADDR+0x2e6>
 8004bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d008      	beq.n	8004c04 <I2C_Master_ADDR+0x2e6>
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d005      	beq.n	8004c04 <I2C_Master_ADDR+0x2e6>
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	2b10      	cmp	r3, #16
 8004bfc:	d002      	beq.n	8004c04 <I2C_Master_ADDR+0x2e6>
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d107      	bne.n	8004c14 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c30:	e00b      	b.n	8004c4a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
}
 8004c48:	e7ff      	b.n	8004c4a <I2C_Master_ADDR+0x32c>
 8004c4a:	bf00      	nop
 8004c4c:	3744      	adds	r7, #68	@ 0x44
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02b      	beq.n	8004cc6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d114      	bne.n	8004cc6 <I2C_SlaveTransmit_TXE+0x72>
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b29      	cmp	r3, #41	@ 0x29
 8004ca0:	d111      	bne.n	8004cc6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2221      	movs	r2, #33	@ 0x21
 8004cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2228      	movs	r2, #40	@ 0x28
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff f9cf 	bl	8004064 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d011      	beq.n	8004d04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	781a      	ldrb	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02c      	beq.n	8004d82 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d114      	bne.n	8004d82 <I2C_SlaveReceive_RXNE+0x74>
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d5c:	d111      	bne.n	8004d82 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2222      	movs	r2, #34	@ 0x22
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2228      	movs	r2, #40	@ 0x28
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff f97a 	bl	8004076 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d012      	beq.n	8004dc2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004de6:	2b28      	cmp	r3, #40	@ 0x28
 8004de8:	d125      	bne.n	8004e36 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	81bb      	strh	r3, [r7, #12]
 8004e18:	e002      	b.n	8004e20 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e28:	89ba      	ldrh	r2, [r7, #12]
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff f92a 	bl	8004088 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e34:	e00e      	b.n	8004e54 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e36:	2300      	movs	r3, #0
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eb8:	d172      	bne.n	8004fa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b22      	cmp	r3, #34	@ 0x22
 8004ebe:	d002      	beq.n	8004ec6 <I2C_Slave_STOPF+0x6a>
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ec4:	d135      	bne.n	8004f32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f043 0204 	orr.w	r2, r3, #4
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ef8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fd fed0 	bl	8002ca4 <HAL_DMA_GetState>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d049      	beq.n	8004f9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0e:	4a69      	ldr	r2, [pc, #420]	@ (80050b4 <I2C_Slave_STOPF+0x258>)
 8004f10:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd fd46 	bl	80029a8 <HAL_DMA_Abort_IT>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03d      	beq.n	8004f9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f30:	e035      	b.n	8004f9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f043 0204 	orr.w	r2, r3, #4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fd fe9a 	bl	8002ca4 <HAL_DMA_GetState>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d014      	beq.n	8004fa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80050b4 <I2C_Slave_STOPF+0x258>)
 8004f7c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fd fd10 	bl	80029a8 <HAL_DMA_Abort_IT>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
 8004f9c:	e000      	b.n	8004fa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d03e      	beq.n	8005028 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b04      	cmp	r3, #4
 8004fb6:	d112      	bne.n	8004fde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe8:	2b40      	cmp	r3, #64	@ 0x40
 8004fea:	d112      	bne.n	8005012 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	f043 0204 	orr.w	r2, r3, #4
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8b7 	bl	80051a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005036:	e039      	b.n	80050ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b2a      	cmp	r3, #42	@ 0x2a
 800503c:	d109      	bne.n	8005052 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2228      	movs	r2, #40	@ 0x28
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f7ff f812 	bl	8004076 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b28      	cmp	r3, #40	@ 0x28
 800505c:	d111      	bne.n	8005082 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a15      	ldr	r2, [pc, #84]	@ (80050b8 <I2C_Slave_STOPF+0x25c>)
 8005062:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff f811 	bl	80040a2 <HAL_I2C_ListenCpltCallback>
}
 8005080:	e014      	b.n	80050ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005086:	2b22      	cmp	r3, #34	@ 0x22
 8005088:	d002      	beq.n	8005090 <I2C_Slave_STOPF+0x234>
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b22      	cmp	r3, #34	@ 0x22
 800508e:	d10d      	bne.n	80050ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fe ffe5 	bl	8004076 <HAL_I2C_SlaveRxCpltCallback>
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	08005809 	.word	0x08005809
 80050b8:	ffff0000 	.word	0xffff0000

080050bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d002      	beq.n	80050de <I2C_Slave_AF+0x22>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d129      	bne.n	8005132 <I2C_Slave_AF+0x76>
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b28      	cmp	r3, #40	@ 0x28
 80050e2:	d126      	bne.n	8005132 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a2e      	ldr	r2, [pc, #184]	@ (80051a0 <I2C_Slave_AF+0xe4>)
 80050e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005102:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005112:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fe ffb9 	bl	80040a2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005130:	e031      	b.n	8005196 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	2b21      	cmp	r3, #33	@ 0x21
 8005136:	d129      	bne.n	800518c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <I2C_Slave_AF+0xe4>)
 800513c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2221      	movs	r2, #33	@ 0x21
 8005142:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005162:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800516c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800517c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fe f8e4 	bl	800334c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f7fe ff6d 	bl	8004064 <HAL_I2C_SlaveTxCpltCallback>
}
 800518a:	e004      	b.n	8005196 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005194:	615a      	str	r2, [r3, #20]
}
 8005196:	bf00      	nop
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	ffff0000 	.word	0xffff0000

080051a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051bc:	7bbb      	ldrb	r3, [r7, #14]
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d002      	beq.n	80051c8 <I2C_ITError+0x24>
 80051c2:	7bbb      	ldrb	r3, [r7, #14]
 80051c4:	2b40      	cmp	r3, #64	@ 0x40
 80051c6:	d10a      	bne.n	80051de <I2C_ITError+0x3a>
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b22      	cmp	r3, #34	@ 0x22
 80051cc:	d107      	bne.n	80051de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051e4:	2b28      	cmp	r3, #40	@ 0x28
 80051e6:	d107      	bne.n	80051f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2228      	movs	r2, #40	@ 0x28
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051f6:	e015      	b.n	8005224 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005206:	d00a      	beq.n	800521e <I2C_ITError+0x7a>
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	2b60      	cmp	r3, #96	@ 0x60
 800520c:	d007      	beq.n	800521e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005232:	d162      	bne.n	80052fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005242:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005248:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d020      	beq.n	8005294 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005256:	4a6a      	ldr	r2, [pc, #424]	@ (8005400 <I2C_ITError+0x25c>)
 8005258:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fba2 	bl	80029a8 <HAL_DMA_Abort_IT>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 8089 	beq.w	800537e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800528e:	4610      	mov	r0, r2
 8005290:	4798      	blx	r3
 8005292:	e074      	b.n	800537e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	4a59      	ldr	r2, [pc, #356]	@ (8005400 <I2C_ITError+0x25c>)
 800529a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fd fb81 	bl	80029a8 <HAL_DMA_Abort_IT>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d068      	beq.n	800537e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b6:	2b40      	cmp	r3, #64	@ 0x40
 80052b8:	d10b      	bne.n	80052d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052f4:	4610      	mov	r0, r2
 80052f6:	4798      	blx	r3
 80052f8:	e041      	b.n	800537e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b60      	cmp	r3, #96	@ 0x60
 8005304:	d125      	bne.n	8005352 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531e:	2b40      	cmp	r3, #64	@ 0x40
 8005320:	d10b      	bne.n	800533a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fe fecd 	bl	80040ea <HAL_I2C_AbortCpltCallback>
 8005350:	e015      	b.n	800537e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535c:	2b40      	cmp	r3, #64	@ 0x40
 800535e:	d10b      	bne.n	8005378 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fe fead 	bl	80040d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10e      	bne.n	80053ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005394:	2b00      	cmp	r3, #0
 8005396:	d109      	bne.n	80053ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d113      	bne.n	80053f8 <I2C_ITError+0x254>
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b28      	cmp	r3, #40	@ 0x28
 80053d4:	d110      	bne.n	80053f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005404 <I2C_ITError+0x260>)
 80053da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fe fe55 	bl	80040a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08005809 	.word	0x08005809
 8005404:	ffff0000 	.word	0xffff0000

08005408 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	460b      	mov	r3, r1
 8005416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d006      	beq.n	8005432 <I2C_MasterRequestWrite+0x2a>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d003      	beq.n	8005432 <I2C_MasterRequestWrite+0x2a>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005430:	d108      	bne.n	8005444 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	e00b      	b.n	800545c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005448:	2b12      	cmp	r3, #18
 800544a:	d107      	bne.n	800545c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800545a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fa75 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800547e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005482:	d103      	bne.n	800548c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e035      	b.n	80054fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005498:	d108      	bne.n	80054ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800549a:	897b      	ldrh	r3, [r7, #10]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054a8:	611a      	str	r2, [r3, #16]
 80054aa:	e01b      	b.n	80054e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054ac:	897b      	ldrh	r3, [r7, #10]
 80054ae:	11db      	asrs	r3, r3, #7
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0306 	and.w	r3, r3, #6
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f063 030f 	orn	r3, r3, #15
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	490e      	ldr	r1, [pc, #56]	@ (8005504 <I2C_MasterRequestWrite+0xfc>)
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fabe 	bl	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e010      	b.n	80054fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	4907      	ldr	r1, [pc, #28]	@ (8005508 <I2C_MasterRequestWrite+0x100>)
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 faae 	bl	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	00010008 	.word	0x00010008
 8005508:	00010002 	.word	0x00010002

0800550c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	4608      	mov	r0, r1
 8005516:	4611      	mov	r1, r2
 8005518:	461a      	mov	r2, r3
 800551a:	4603      	mov	r3, r0
 800551c:	817b      	strh	r3, [r7, #10]
 800551e:	460b      	mov	r3, r1
 8005520:	813b      	strh	r3, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	2200      	movs	r2, #0
 800553e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 fa08 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800555c:	d103      	bne.n	8005566 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e05f      	b.n	800562a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	492d      	ldr	r1, [pc, #180]	@ (8005634 <I2C_RequestMemoryWrite+0x128>)
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fa63 	bl	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e04c      	b.n	800562a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	6a39      	ldr	r1, [r7, #32]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 faee 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d107      	bne.n	80055ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e02b      	b.n	800562a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d105      	bne.n	80055e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055d8:	893b      	ldrh	r3, [r7, #8]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	e021      	b.n	8005628 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e4:	893b      	ldrh	r3, [r7, #8]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f4:	6a39      	ldr	r1, [r7, #32]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fac8 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00d      	beq.n	800561e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	2b04      	cmp	r3, #4
 8005608:	d107      	bne.n	800561a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e005      	b.n	800562a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800561e:	893b      	ldrh	r3, [r7, #8]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	00010002 	.word	0x00010002

08005638 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	4608      	mov	r0, r1
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	4603      	mov	r3, r0
 8005648:	817b      	strh	r3, [r7, #10]
 800564a:	460b      	mov	r3, r1
 800564c:	813b      	strh	r3, [r7, #8]
 800564e:	4613      	mov	r3, r2
 8005650:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005660:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	2200      	movs	r2, #0
 800567a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f96a 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00d      	beq.n	80056a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005698:	d103      	bne.n	80056a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0aa      	b.n	80057fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056a6:	897b      	ldrh	r3, [r7, #10]
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	6a3a      	ldr	r2, [r7, #32]
 80056ba:	4952      	ldr	r1, [pc, #328]	@ (8005804 <I2C_RequestMemoryRead+0x1cc>)
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f9c5 	bl	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e097      	b.n	80057fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e4:	6a39      	ldr	r1, [r7, #32]
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fa50 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d107      	bne.n	800570a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e076      	b.n	80057fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d105      	bne.n	8005720 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005714:	893b      	ldrh	r3, [r7, #8]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]
 800571e:	e021      	b.n	8005764 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005720:	893b      	ldrh	r3, [r7, #8]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	b29b      	uxth	r3, r3
 8005726:	b2da      	uxtb	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	6a39      	ldr	r1, [r7, #32]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fa2a 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	2b04      	cmp	r3, #4
 8005744:	d107      	bne.n	8005756 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e050      	b.n	80057fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800575a:	893b      	ldrh	r3, [r7, #8]
 800575c:	b2da      	uxtb	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005766:	6a39      	ldr	r1, [r7, #32]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fa0f 	bl	8005b8c <I2C_WaitOnTXEFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00d      	beq.n	8005790 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005778:	2b04      	cmp	r3, #4
 800577a:	d107      	bne.n	800578c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e035      	b.n	80057fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800579e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f8d3 	bl	8005958 <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00d      	beq.n	80057d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c6:	d103      	bne.n	80057d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e013      	b.n	80057fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057d4:	897b      	ldrh	r3, [r7, #10]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	b2da      	uxtb	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	6a3a      	ldr	r2, [r7, #32]
 80057e8:	4906      	ldr	r1, [pc, #24]	@ (8005804 <I2C_RequestMemoryRead+0x1cc>)
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f92e 	bl	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	00010002 	.word	0x00010002

08005808 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005820:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005822:	4b4b      	ldr	r3, [pc, #300]	@ (8005950 <I2C_DMAAbort+0x148>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	4a4a      	ldr	r2, [pc, #296]	@ (8005954 <I2C_DMAAbort+0x14c>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0a1a      	lsrs	r2, r3, #8
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	00da      	lsls	r2, r3, #3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	f043 0220 	orr.w	r2, r3, #32
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800584e:	e00a      	b.n	8005866 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3b01      	subs	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005864:	d0ea      	beq.n	800583c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	2200      	movs	r2, #0
 8005874:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	2200      	movs	r2, #0
 8005884:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005894:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2200      	movs	r2, #0
 800589a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a8:	2200      	movs	r2, #0
 80058aa:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b8:	2200      	movs	r2, #0
 80058ba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b60      	cmp	r3, #96	@ 0x60
 80058d6:	d10e      	bne.n	80058f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058ee:	6978      	ldr	r0, [r7, #20]
 80058f0:	f7fe fbfb 	bl	80040ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058f4:	e027      	b.n	8005946 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058f6:	7cfb      	ldrb	r3, [r7, #19]
 80058f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058fc:	2b28      	cmp	r3, #40	@ 0x28
 80058fe:	d117      	bne.n	8005930 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800591e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2200      	movs	r2, #0
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2228      	movs	r2, #40	@ 0x28
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800592e:	e007      	b.n	8005940 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005940:	6978      	ldr	r0, [r7, #20]
 8005942:	f7fe fbc9 	bl	80040d8 <HAL_I2C_ErrorCallback>
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000000 	.word	0x20000000
 8005954:	14f8b589 	.word	0x14f8b589

08005958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	603b      	str	r3, [r7, #0]
 8005964:	4613      	mov	r3, r2
 8005966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005968:	e048      	b.n	80059fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005970:	d044      	beq.n	80059fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005972:	f7fc f981 	bl	8001c78 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d302      	bcc.n	8005988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d139      	bne.n	80059fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	0c1b      	lsrs	r3, r3, #16
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	d10d      	bne.n	80059ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	43da      	mvns	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4013      	ands	r3, r2
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	e00c      	b.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	43da      	mvns	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4013      	ands	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d116      	bne.n	80059fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e8:	f043 0220 	orr.w	r2, r3, #32
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e023      	b.n	8005a44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d10d      	bne.n	8005a22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	43da      	mvns	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	4013      	ands	r3, r2
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	461a      	mov	r2, r3
 8005a20:	e00c      	b.n	8005a3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	43da      	mvns	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d093      	beq.n	800596a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a5a:	e071      	b.n	8005b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a6a:	d123      	bne.n	8005ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	f043 0204 	orr.w	r2, r3, #4
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e067      	b.n	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aba:	d041      	beq.n	8005b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005abc:	f7fc f8dc 	bl	8001c78 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d302      	bcc.n	8005ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d136      	bne.n	8005b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d10c      	bne.n	8005af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	43da      	mvns	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf14      	ite	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	2300      	moveq	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e00b      	b.n	8005b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	43da      	mvns	r2, r3
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bf14      	ite	ne
 8005b08:	2301      	movne	r3, #1
 8005b0a:	2300      	moveq	r3, #0
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	f043 0220 	orr.w	r2, r3, #32
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e021      	b.n	8005b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	0c1b      	lsrs	r3, r3, #16
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10c      	bne.n	8005b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	43da      	mvns	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	e00b      	b.n	8005b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf14      	ite	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	2300      	moveq	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f47f af6d 	bne.w	8005a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b98:	e034      	b.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f915 	bl	8005dca <I2C_IsAcknowledgeFailed>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e034      	b.n	8005c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bb0:	d028      	beq.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fc f861 	bl	8001c78 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11d      	bne.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd2:	2b80      	cmp	r3, #128	@ 0x80
 8005bd4:	d016      	beq.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e007      	b.n	8005c14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0e:	2b80      	cmp	r3, #128	@ 0x80
 8005c10:	d1c3      	bne.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c28:	e034      	b.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f8cd 	bl	8005dca <I2C_IsAcknowledgeFailed>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e034      	b.n	8005ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c40:	d028      	beq.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7fc f819 	bl	8001c78 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11d      	bne.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d016      	beq.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e007      	b.n	8005ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d1c3      	bne.n	8005c2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cb8:	4b13      	ldr	r3, [pc, #76]	@ (8005d08 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	08db      	lsrs	r3, r3, #3
 8005cbe:	4a13      	ldr	r2, [pc, #76]	@ (8005d0c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc4:	0a1a      	lsrs	r2, r3, #8
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d107      	bne.n	8005cea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cde:	f043 0220 	orr.w	r2, r3, #32
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e008      	b.n	8005cfc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cf8:	d0e9      	beq.n	8005cce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	14f8b589 	.word	0x14f8b589

08005d10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d1c:	e049      	b.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d119      	bne.n	8005d60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0210 	mvn.w	r2, #16
 8005d34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e030      	b.n	8005dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d60:	f7fb ff8a 	bl	8001c78 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d302      	bcc.n	8005d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d11d      	bne.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d80:	2b40      	cmp	r3, #64	@ 0x40
 8005d82:	d016      	beq.n	8005db2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e007      	b.n	8005dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	d1ae      	bne.n	8005d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de0:	d11b      	bne.n	8005e1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	f043 0204 	orr.w	r2, r3, #4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr

08005e26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005e36:	d103      	bne.n	8005e40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e3e:	e007      	b.n	8005e50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005e48:	d102      	bne.n	8005e50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e272      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 8087 	beq.w	8005f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e7c:	4b92      	ldr	r3, [pc, #584]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 030c 	and.w	r3, r3, #12
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d00c      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e88:	4b8f      	ldr	r3, [pc, #572]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 030c 	and.w	r3, r3, #12
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d112      	bne.n	8005eba <HAL_RCC_OscConfig+0x5e>
 8005e94:	4b8c      	ldr	r3, [pc, #560]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ea0:	d10b      	bne.n	8005eba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea2:	4b89      	ldr	r3, [pc, #548]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d06c      	beq.n	8005f88 <HAL_RCC_OscConfig+0x12c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d168      	bne.n	8005f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e24c      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ec2:	d106      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x76>
 8005ec4:	4b80      	ldr	r3, [pc, #512]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a7f      	ldr	r2, [pc, #508]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	e02e      	b.n	8005f30 <HAL_RCC_OscConfig+0xd4>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x98>
 8005eda:	4b7b      	ldr	r3, [pc, #492]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7a      	ldr	r2, [pc, #488]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4b78      	ldr	r3, [pc, #480]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a77      	ldr	r2, [pc, #476]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e01d      	b.n	8005f30 <HAL_RCC_OscConfig+0xd4>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCC_OscConfig+0xbc>
 8005efe:	4b72      	ldr	r3, [pc, #456]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a71      	ldr	r2, [pc, #452]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f08:	6013      	str	r3, [r2, #0]
 8005f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a6e      	ldr	r2, [pc, #440]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e00b      	b.n	8005f30 <HAL_RCC_OscConfig+0xd4>
 8005f18:	4b6b      	ldr	r3, [pc, #428]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	4b68      	ldr	r3, [pc, #416]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a67      	ldr	r2, [pc, #412]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d013      	beq.n	8005f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f38:	f7fb fe9e 	bl	8001c78 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f40:	f7fb fe9a 	bl	8001c78 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b64      	cmp	r3, #100	@ 0x64
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e200      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	4b5d      	ldr	r3, [pc, #372]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0xe4>
 8005f5e:	e014      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f60:	f7fb fe8a 	bl	8001c78 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f68:	f7fb fe86 	bl	8001c78 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b64      	cmp	r3, #100	@ 0x64
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e1ec      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f7a:	4b53      	ldr	r3, [pc, #332]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1f0      	bne.n	8005f68 <HAL_RCC_OscConfig+0x10c>
 8005f86:	e000      	b.n	8005f8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d063      	beq.n	800605e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f96:	4b4c      	ldr	r3, [pc, #304]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005fa2:	4b49      	ldr	r3, [pc, #292]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 030c 	and.w	r3, r3, #12
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d11c      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x18c>
 8005fae:	4b46      	ldr	r3, [pc, #280]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d116      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fba:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x176>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d001      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e1c0      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	4939      	ldr	r1, [pc, #228]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fe6:	e03a      	b.n	800605e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d020      	beq.n	8006032 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ff0:	4b36      	ldr	r3, [pc, #216]	@ (80060cc <HAL_RCC_OscConfig+0x270>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff6:	f7fb fe3f 	bl	8001c78 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ffe:	f7fb fe3b 	bl	8001c78 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e1a1      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006010:	4b2d      	ldr	r3, [pc, #180]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601c:	4b2a      	ldr	r3, [pc, #168]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	695b      	ldr	r3, [r3, #20]
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4927      	ldr	r1, [pc, #156]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 800602c:	4313      	orrs	r3, r2
 800602e:	600b      	str	r3, [r1, #0]
 8006030:	e015      	b.n	800605e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006032:	4b26      	ldr	r3, [pc, #152]	@ (80060cc <HAL_RCC_OscConfig+0x270>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006038:	f7fb fe1e 	bl	8001c78 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006040:	f7fb fe1a 	bl	8001c78 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e180      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006052:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f0      	bne.n	8006040 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d03a      	beq.n	80060e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d019      	beq.n	80060a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006072:	4b17      	ldr	r3, [pc, #92]	@ (80060d0 <HAL_RCC_OscConfig+0x274>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006078:	f7fb fdfe 	bl	8001c78 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006080:	f7fb fdfa 	bl	8001c78 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e160      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <HAL_RCC_OscConfig+0x26c>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800609e:	2001      	movs	r0, #1
 80060a0:	f000 face 	bl	8006640 <RCC_Delay>
 80060a4:	e01c      	b.n	80060e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060a6:	4b0a      	ldr	r3, [pc, #40]	@ (80060d0 <HAL_RCC_OscConfig+0x274>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ac:	f7fb fde4 	bl	8001c78 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b2:	e00f      	b.n	80060d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060b4:	f7fb fde0 	bl	8001c78 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d908      	bls.n	80060d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e146      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
 80060c6:	bf00      	nop
 80060c8:	40021000 	.word	0x40021000
 80060cc:	42420000 	.word	0x42420000
 80060d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d4:	4b92      	ldr	r3, [pc, #584]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e9      	bne.n	80060b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80a6 	beq.w	800623a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10d      	bne.n	800611a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060fe:	4b88      	ldr	r3, [pc, #544]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	4a87      	ldr	r2, [pc, #540]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006108:	61d3      	str	r3, [r2, #28]
 800610a:	4b85      	ldr	r3, [pc, #532]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006112:	60bb      	str	r3, [r7, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006116:	2301      	movs	r3, #1
 8006118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611a:	4b82      	ldr	r3, [pc, #520]	@ (8006324 <HAL_RCC_OscConfig+0x4c8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d118      	bne.n	8006158 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006126:	4b7f      	ldr	r3, [pc, #508]	@ (8006324 <HAL_RCC_OscConfig+0x4c8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a7e      	ldr	r2, [pc, #504]	@ (8006324 <HAL_RCC_OscConfig+0x4c8>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006132:	f7fb fda1 	bl	8001c78 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613a:	f7fb fd9d 	bl	8001c78 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b64      	cmp	r3, #100	@ 0x64
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e103      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614c:	4b75      	ldr	r3, [pc, #468]	@ (8006324 <HAL_RCC_OscConfig+0x4c8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f0      	beq.n	800613a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d106      	bne.n	800616e <HAL_RCC_OscConfig+0x312>
 8006160:	4b6f      	ldr	r3, [pc, #444]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	4a6e      	ldr	r2, [pc, #440]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	6213      	str	r3, [r2, #32]
 800616c:	e02d      	b.n	80061ca <HAL_RCC_OscConfig+0x36e>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10c      	bne.n	8006190 <HAL_RCC_OscConfig+0x334>
 8006176:	4b6a      	ldr	r3, [pc, #424]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	4a69      	ldr	r2, [pc, #420]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 800617c:	f023 0301 	bic.w	r3, r3, #1
 8006180:	6213      	str	r3, [r2, #32]
 8006182:	4b67      	ldr	r3, [pc, #412]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	4a66      	ldr	r2, [pc, #408]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	6213      	str	r3, [r2, #32]
 800618e:	e01c      	b.n	80061ca <HAL_RCC_OscConfig+0x36e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b05      	cmp	r3, #5
 8006196:	d10c      	bne.n	80061b2 <HAL_RCC_OscConfig+0x356>
 8006198:	4b61      	ldr	r3, [pc, #388]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	4a60      	ldr	r2, [pc, #384]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 800619e:	f043 0304 	orr.w	r3, r3, #4
 80061a2:	6213      	str	r3, [r2, #32]
 80061a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	6213      	str	r3, [r2, #32]
 80061b0:	e00b      	b.n	80061ca <HAL_RCC_OscConfig+0x36e>
 80061b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	4a5a      	ldr	r2, [pc, #360]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	6213      	str	r3, [r2, #32]
 80061be:	4b58      	ldr	r3, [pc, #352]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	4a57      	ldr	r2, [pc, #348]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80061c4:	f023 0304 	bic.w	r3, r3, #4
 80061c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d015      	beq.n	80061fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d2:	f7fb fd51 	bl	8001c78 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fb fd4d 	bl	8001c78 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0b1      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f0:	4b4b      	ldr	r3, [pc, #300]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d0ee      	beq.n	80061da <HAL_RCC_OscConfig+0x37e>
 80061fc:	e014      	b.n	8006228 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fe:	f7fb fd3b 	bl	8001c78 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006204:	e00a      	b.n	800621c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006206:	f7fb fd37 	bl	8001c78 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006214:	4293      	cmp	r3, r2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e09b      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800621c:	4b40      	ldr	r3, [pc, #256]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1ee      	bne.n	8006206 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d105      	bne.n	800623a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800622e:	4b3c      	ldr	r3, [pc, #240]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4a3b      	ldr	r2, [pc, #236]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006234:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006238:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8087 	beq.w	8006352 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006244:	4b36      	ldr	r3, [pc, #216]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 030c 	and.w	r3, r3, #12
 800624c:	2b08      	cmp	r3, #8
 800624e:	d061      	beq.n	8006314 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d146      	bne.n	80062e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006258:	4b33      	ldr	r3, [pc, #204]	@ (8006328 <HAL_RCC_OscConfig+0x4cc>)
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625e:	f7fb fd0b 	bl	8001c78 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006266:	f7fb fd07 	bl	8001c78 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e06d      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006278:	4b29      	ldr	r3, [pc, #164]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800628c:	d108      	bne.n	80062a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800628e:	4b24      	ldr	r3, [pc, #144]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	4921      	ldr	r1, [pc, #132]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 800629c:	4313      	orrs	r3, r2
 800629e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a19      	ldr	r1, [r3, #32]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b0:	430b      	orrs	r3, r1
 80062b2:	491b      	ldr	r1, [pc, #108]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006328 <HAL_RCC_OscConfig+0x4cc>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062be:	f7fb fcdb 	bl	8001c78 <HAL_GetTick>
 80062c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062c4:	e008      	b.n	80062d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c6:	f7fb fcd7 	bl	8001c78 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e03d      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062d8:	4b11      	ldr	r3, [pc, #68]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f0      	beq.n	80062c6 <HAL_RCC_OscConfig+0x46a>
 80062e4:	e035      	b.n	8006352 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e6:	4b10      	ldr	r3, [pc, #64]	@ (8006328 <HAL_RCC_OscConfig+0x4cc>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fb fcc4 	bl	8001c78 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f4:	f7fb fcc0 	bl	8001c78 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e026      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006306:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <HAL_RCC_OscConfig+0x4c4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x498>
 8006312:	e01e      	b.n	8006352 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e019      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
 8006320:	40021000 	.word	0x40021000
 8006324:	40007000 	.word	0x40007000
 8006328:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800632c:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <HAL_RCC_OscConfig+0x500>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	429a      	cmp	r2, r3
 800633e:	d106      	bne.n	800634e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800634a:	429a      	cmp	r2, r3
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40021000 	.word	0x40021000

08006360 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e0d0      	b.n	8006516 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006374:	4b6a      	ldr	r3, [pc, #424]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d910      	bls.n	80063a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006382:	4b67      	ldr	r3, [pc, #412]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f023 0207 	bic.w	r2, r3, #7
 800638a:	4965      	ldr	r1, [pc, #404]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	4313      	orrs	r3, r2
 8006390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b63      	ldr	r3, [pc, #396]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0b8      	b.n	8006516 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d020      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063bc:	4b59      	ldr	r3, [pc, #356]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4a58      	ldr	r2, [pc, #352]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80063c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063d4:	4b53      	ldr	r3, [pc, #332]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4a52      	ldr	r2, [pc, #328]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80063da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80063de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063e0:	4b50      	ldr	r3, [pc, #320]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	494d      	ldr	r1, [pc, #308]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d040      	beq.n	8006480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	4b47      	ldr	r3, [pc, #284]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d115      	bne.n	800643e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e07f      	b.n	8006516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d107      	bne.n	800642e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641e:	4b41      	ldr	r3, [pc, #260]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e073      	b.n	8006516 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642e:	4b3d      	ldr	r3, [pc, #244]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e06b      	b.n	8006516 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800643e:	4b39      	ldr	r3, [pc, #228]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f023 0203 	bic.w	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	4936      	ldr	r1, [pc, #216]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 800644c:	4313      	orrs	r3, r2
 800644e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006450:	f7fb fc12 	bl	8001c78 <HAL_GetTick>
 8006454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	e00a      	b.n	800646e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006458:	f7fb fc0e 	bl	8001c78 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006466:	4293      	cmp	r3, r2
 8006468:	d901      	bls.n	800646e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e053      	b.n	8006516 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800646e:	4b2d      	ldr	r3, [pc, #180]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 020c 	and.w	r2, r3, #12
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	429a      	cmp	r2, r3
 800647e:	d1eb      	bne.n	8006458 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006480:	4b27      	ldr	r3, [pc, #156]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d210      	bcs.n	80064b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648e:	4b24      	ldr	r3, [pc, #144]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 0207 	bic.w	r2, r3, #7
 8006496:	4922      	ldr	r1, [pc, #136]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	4313      	orrs	r3, r2
 800649c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800649e:	4b20      	ldr	r3, [pc, #128]	@ (8006520 <HAL_RCC_ClockConfig+0x1c0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d001      	beq.n	80064b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e032      	b.n	8006516 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064bc:	4b19      	ldr	r3, [pc, #100]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	4916      	ldr	r1, [pc, #88]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064da:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	490e      	ldr	r1, [pc, #56]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064ee:	f000 f821 	bl	8006534 <HAL_RCC_GetSysClockFreq>
 80064f2:	4602      	mov	r2, r0
 80064f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006524 <HAL_RCC_ClockConfig+0x1c4>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	490a      	ldr	r1, [pc, #40]	@ (8006528 <HAL_RCC_ClockConfig+0x1c8>)
 8006500:	5ccb      	ldrb	r3, [r1, r3]
 8006502:	fa22 f303 	lsr.w	r3, r2, r3
 8006506:	4a09      	ldr	r2, [pc, #36]	@ (800652c <HAL_RCC_ClockConfig+0x1cc>)
 8006508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800650a:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <HAL_RCC_ClockConfig+0x1d0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7fb fb70 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	40022000 	.word	0x40022000
 8006524:	40021000 	.word	0x40021000
 8006528:	0800f250 	.word	0x0800f250
 800652c:	20000000 	.word	0x20000000
 8006530:	20000004 	.word	0x20000004

08006534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
 8006546:	2300      	movs	r3, #0
 8006548:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800654e:	4b1e      	ldr	r3, [pc, #120]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b04      	cmp	r3, #4
 800655c:	d002      	beq.n	8006564 <HAL_RCC_GetSysClockFreq+0x30>
 800655e:	2b08      	cmp	r3, #8
 8006560:	d003      	beq.n	800656a <HAL_RCC_GetSysClockFreq+0x36>
 8006562:	e027      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006564:	4b19      	ldr	r3, [pc, #100]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x98>)
 8006566:	613b      	str	r3, [r7, #16]
      break;
 8006568:	e027      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	0c9b      	lsrs	r3, r3, #18
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006574:	5cd3      	ldrb	r3, [r2, r3]
 8006576:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d010      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006582:	4b11      	ldr	r3, [pc, #68]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	0c5b      	lsrs	r3, r3, #17
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	4a11      	ldr	r2, [pc, #68]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800658e:	5cd3      	ldrb	r3, [r2, r3]
 8006590:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a0d      	ldr	r2, [pc, #52]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x98>)
 8006596:	fb03 f202 	mul.w	r2, r3, r2
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e004      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a0c      	ldr	r2, [pc, #48]	@ (80065d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80065a8:	fb02 f303 	mul.w	r3, r2, r3
 80065ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	613b      	str	r3, [r7, #16]
      break;
 80065b2:	e002      	b.n	80065ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065b4:	4b05      	ldr	r3, [pc, #20]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x98>)
 80065b6:	613b      	str	r3, [r7, #16]
      break;
 80065b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ba:	693b      	ldr	r3, [r7, #16]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	007a1200 	.word	0x007a1200
 80065d0:	0800f268 	.word	0x0800f268
 80065d4:	0800f278 	.word	0x0800f278
 80065d8:	003d0900 	.word	0x003d0900

080065dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e0:	4b02      	ldr	r3, [pc, #8]	@ (80065ec <HAL_RCC_GetHCLKFreq+0x10>)
 80065e2:	681b      	ldr	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc80      	pop	{r7}
 80065ea:	4770      	bx	lr
 80065ec:	20000000 	.word	0x20000000

080065f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065f4:	f7ff fff2 	bl	80065dc <HAL_RCC_GetHCLKFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b05      	ldr	r3, [pc, #20]	@ (8006610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	4903      	ldr	r1, [pc, #12]	@ (8006614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40021000 	.word	0x40021000
 8006614:	0800f260 	.word	0x0800f260

08006618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800661c:	f7ff ffde 	bl	80065dc <HAL_RCC_GetHCLKFreq>
 8006620:	4602      	mov	r2, r0
 8006622:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	0adb      	lsrs	r3, r3, #11
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	4903      	ldr	r1, [pc, #12]	@ (800663c <HAL_RCC_GetPCLK2Freq+0x24>)
 800662e:	5ccb      	ldrb	r3, [r1, r3]
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000
 800663c:	0800f260 	.word	0x0800f260

08006640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006648:	4b0a      	ldr	r3, [pc, #40]	@ (8006674 <RCC_Delay+0x34>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a0a      	ldr	r2, [pc, #40]	@ (8006678 <RCC_Delay+0x38>)
 800664e:	fba2 2303 	umull	r2, r3, r2, r3
 8006652:	0a5b      	lsrs	r3, r3, #9
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	fb02 f303 	mul.w	r3, r2, r3
 800665a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800665c:	bf00      	nop
  }
  while (Delay --);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1e5a      	subs	r2, r3, #1
 8006662:	60fa      	str	r2, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f9      	bne.n	800665c <RCC_Delay+0x1c>
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr
 8006674:	20000000 	.word	0x20000000
 8006678:	10624dd3 	.word	0x10624dd3

0800667c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d07d      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006698:	2300      	movs	r3, #0
 800669a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800669c:	4b4f      	ldr	r3, [pc, #316]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10d      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a8:	4b4c      	ldr	r3, [pc, #304]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	4a4b      	ldr	r2, [pc, #300]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066b2:	61d3      	str	r3, [r2, #28]
 80066b4:	4b49      	ldr	r3, [pc, #292]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066c0:	2301      	movs	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066c4:	4b46      	ldr	r3, [pc, #280]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d118      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066d0:	4b43      	ldr	r3, [pc, #268]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a42      	ldr	r2, [pc, #264]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066dc:	f7fb facc 	bl	8001c78 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e2:	e008      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e4:	f7fb fac8 	bl	8001c78 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	@ 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e06d      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f6:	4b3a      	ldr	r3, [pc, #232]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f0      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006702:	4b36      	ldr	r3, [pc, #216]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d02e      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	429a      	cmp	r2, r3
 800671e:	d027      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006720:	4b2e      	ldr	r3, [pc, #184]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006728:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800672a:	4b2e      	ldr	r3, [pc, #184]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800672c:	2201      	movs	r2, #1
 800672e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006730:	4b2c      	ldr	r3, [pc, #176]	@ (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006736:	4a29      	ldr	r2, [pc, #164]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d014      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006746:	f7fb fa97 	bl	8001c78 <HAL_GetTick>
 800674a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674c:	e00a      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674e:	f7fb fa93 	bl	8001c78 <HAL_GetTick>
 8006752:	4602      	mov	r2, r0
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675c:	4293      	cmp	r3, r2
 800675e:	d901      	bls.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e036      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006764:	4b1d      	ldr	r3, [pc, #116]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0ee      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006770:	4b1a      	ldr	r3, [pc, #104]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	4917      	ldr	r1, [pc, #92]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800677e:	4313      	orrs	r3, r2
 8006780:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006788:	4b14      	ldr	r3, [pc, #80]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	4a13      	ldr	r2, [pc, #76]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800678e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006792:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067a0:	4b0e      	ldr	r3, [pc, #56]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	490b      	ldr	r1, [pc, #44]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0310 	and.w	r3, r3, #16
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067be:	4b07      	ldr	r3, [pc, #28]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	4904      	ldr	r1, [pc, #16]	@ (80067dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40007000 	.word	0x40007000
 80067e4:	42420440 	.word	0x42420440

080067e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e041      	b.n	800687e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fb f858 	bl	80018c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f000 fbd8 	bl	8006fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e041      	b.n	800691c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7fa ffc1 	bl	8001834 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3304      	adds	r3, #4
 80068c2:	4619      	mov	r1, r3
 80068c4:	4610      	mov	r0, r2
 80068c6:	f000 fb89 	bl	8006fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <HAL_TIM_IC_Start_IT+0x1e>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800693e:	b2db      	uxtb	r3, r3
 8006940:	e013      	b.n	800696a <HAL_TIM_IC_Start_IT+0x46>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b04      	cmp	r3, #4
 8006946:	d104      	bne.n	8006952 <HAL_TIM_IC_Start_IT+0x2e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800694e:	b2db      	uxtb	r3, r3
 8006950:	e00b      	b.n	800696a <HAL_TIM_IC_Start_IT+0x46>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b08      	cmp	r3, #8
 8006956:	d104      	bne.n	8006962 <HAL_TIM_IC_Start_IT+0x3e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800695e:	b2db      	uxtb	r3, r3
 8006960:	e003      	b.n	800696a <HAL_TIM_IC_Start_IT+0x46>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006968:	b2db      	uxtb	r3, r3
 800696a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d104      	bne.n	800697c <HAL_TIM_IC_Start_IT+0x58>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006978:	b2db      	uxtb	r3, r3
 800697a:	e013      	b.n	80069a4 <HAL_TIM_IC_Start_IT+0x80>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b04      	cmp	r3, #4
 8006980:	d104      	bne.n	800698c <HAL_TIM_IC_Start_IT+0x68>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e00b      	b.n	80069a4 <HAL_TIM_IC_Start_IT+0x80>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b08      	cmp	r3, #8
 8006990:	d104      	bne.n	800699c <HAL_TIM_IC_Start_IT+0x78>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e003      	b.n	80069a4 <HAL_TIM_IC_Start_IT+0x80>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d102      	bne.n	80069b2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ac:	7b7b      	ldrb	r3, [r7, #13]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d001      	beq.n	80069b6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e0b8      	b.n	8006b28 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_IC_Start_IT+0xa2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069c4:	e013      	b.n	80069ee <HAL_TIM_IC_Start_IT+0xca>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_IC_Start_IT+0xb2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069d4:	e00b      	b.n	80069ee <HAL_TIM_IC_Start_IT+0xca>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_IC_Start_IT+0xc2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069e4:	e003      	b.n	80069ee <HAL_TIM_IC_Start_IT+0xca>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_IC_Start_IT+0xda>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069fc:	e013      	b.n	8006a26 <HAL_TIM_IC_Start_IT+0x102>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_IC_Start_IT+0xea>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a0c:	e00b      	b.n	8006a26 <HAL_TIM_IC_Start_IT+0x102>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_IC_Start_IT+0xfa>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a1c:	e003      	b.n	8006a26 <HAL_TIM_IC_Start_IT+0x102>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	d841      	bhi.n	8006ab0 <HAL_TIM_IC_Start_IT+0x18c>
 8006a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <HAL_TIM_IC_Start_IT+0x110>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006ab1 	.word	0x08006ab1
 8006a3c:	08006ab1 	.word	0x08006ab1
 8006a40:	08006ab1 	.word	0x08006ab1
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006ab1 	.word	0x08006ab1
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006ab1 	.word	0x08006ab1
 8006a54:	08006a8d 	.word	0x08006a8d
 8006a58:	08006ab1 	.word	0x08006ab1
 8006a5c:	08006ab1 	.word	0x08006ab1
 8006a60:	08006ab1 	.word	0x08006ab1
 8006a64:	08006a9f 	.word	0x08006a9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0202 	orr.w	r2, r2, #2
 8006a76:	60da      	str	r2, [r3, #12]
      break;
 8006a78:	e01d      	b.n	8006ab6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f042 0204 	orr.w	r2, r2, #4
 8006a88:	60da      	str	r2, [r3, #12]
      break;
 8006a8a:	e014      	b.n	8006ab6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0208 	orr.w	r2, r2, #8
 8006a9a:	60da      	str	r2, [r3, #12]
      break;
 8006a9c:	e00b      	b.n	8006ab6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0210 	orr.w	r2, r2, #16
 8006aac:	60da      	str	r2, [r3, #12]
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d134      	bne.n	8006b26 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 fd8c 	bl	80075e2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <HAL_TIM_IC_Start_IT+0x20c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00e      	beq.n	8006af2 <HAL_TIM_IC_Start_IT+0x1ce>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006adc:	d009      	beq.n	8006af2 <HAL_TIM_IC_Start_IT+0x1ce>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <HAL_TIM_IC_Start_IT+0x210>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_TIM_IC_Start_IT+0x1ce>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a12      	ldr	r2, [pc, #72]	@ (8006b38 <HAL_TIM_IC_Start_IT+0x214>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d111      	bne.n	8006b16 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b06      	cmp	r3, #6
 8006b02:	d010      	beq.n	8006b26 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b14:	e007      	b.n	8006b26 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f042 0201 	orr.w	r2, r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40012c00 	.word	0x40012c00
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000800 	.word	0x40000800

08006b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d020      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01b      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0202 	mvn.w	r2, #2
 8006b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f003 ffb4 	bl	800aaf4 <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa09 	bl	8006fa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fa0f 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d020      	beq.n	8006bec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01b      	beq.n	8006bec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0204 	mvn.w	r2, #4
 8006bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f003 ff8e 	bl	800aaf4 <HAL_TIM_IC_CaptureCallback>
 8006bd8:	e005      	b.n	8006be6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f9e3 	bl	8006fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f9e9 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d020      	beq.n	8006c38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f06f 0208 	mvn.w	r2, #8
 8006c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f003 ff68 	bl	800aaf4 <HAL_TIM_IC_CaptureCallback>
 8006c24:	e005      	b.n	8006c32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9bd 	bl	8006fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f9c3 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f003 0310 	and.w	r3, r3, #16
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d020      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f06f 0210 	mvn.w	r2, #16
 8006c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	69db      	ldr	r3, [r3, #28]
 8006c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f003 ff42 	bl	800aaf4 <HAL_TIM_IC_CaptureCallback>
 8006c70:	e005      	b.n	8006c7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f997 	bl	8006fa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f99d 	bl	8006fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d007      	beq.n	8006ca8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0201 	mvn.w	r2, #1
 8006ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f976 	bl	8006f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00c      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fd17 	bl	80076fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f96d 	bl	8006fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00c      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0320 	and.w	r3, r3, #32
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d007      	beq.n	8006d14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0220 	mvn.w	r2, #32
 8006d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fcea 	bl	80076e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e048      	b.n	8006dcc <HAL_TIM_OC_ConfigChannel+0xb0>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	d839      	bhi.n	8006dbc <HAL_TIM_OC_ConfigChannel+0xa0>
 8006d48:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006dbd 	.word	0x08006dbd
 8006d58:	08006dbd 	.word	0x08006dbd
 8006d5c:	08006dbd 	.word	0x08006dbd
 8006d60:	08006d93 	.word	0x08006d93
 8006d64:	08006dbd 	.word	0x08006dbd
 8006d68:	08006dbd 	.word	0x08006dbd
 8006d6c:	08006dbd 	.word	0x08006dbd
 8006d70:	08006da1 	.word	0x08006da1
 8006d74:	08006dbd 	.word	0x08006dbd
 8006d78:	08006dbd 	.word	0x08006dbd
 8006d7c:	08006dbd 	.word	0x08006dbd
 8006d80:	08006daf 	.word	0x08006daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68b9      	ldr	r1, [r7, #8]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f000 f994 	bl	80070b8 <TIM_OC1_SetConfig>
      break;
 8006d90:	e017      	b.n	8006dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f9f3 	bl	8007184 <TIM_OC2_SetConfig>
      break;
 8006d9e:	e010      	b.n	8006dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68b9      	ldr	r1, [r7, #8]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fa56 	bl	8007258 <TIM_OC3_SetConfig>
      break;
 8006dac:	e009      	b.n	8006dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fab9 	bl	800732c <TIM_OC4_SetConfig>
      break;
 8006dba:	e002      	b.n	8006dc2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e088      	b.n	8006f04 <HAL_TIM_IC_ConfigChannel+0x130>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11b      	bne.n	8006e38 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006e10:	f000 fada 	bl	80073c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 020c 	bic.w	r2, r2, #12
 8006e22:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6999      	ldr	r1, [r3, #24]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	619a      	str	r2, [r3, #24]
 8006e36:	e060      	b.n	8006efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d11c      	bne.n	8006e78 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006e4e:	f000 fb15 	bl	800747c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	699a      	ldr	r2, [r3, #24]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006e60:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6999      	ldr	r1, [r3, #24]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	021a      	lsls	r2, r3, #8
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	619a      	str	r2, [r3, #24]
 8006e76:	e040      	b.n	8006efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	d11b      	bne.n	8006eb6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006e8e:	f000 fb31 	bl	80074f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 020c 	bic.w	r2, r2, #12
 8006ea0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	61da      	str	r2, [r3, #28]
 8006eb4:	e021      	b.n	8006efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b0c      	cmp	r3, #12
 8006eba:	d11c      	bne.n	8006ef6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006ecc:	f000 fb4d 	bl	800756a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ede:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69d9      	ldr	r1, [r3, #28]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	021a      	lsls	r2, r3, #8
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	61da      	str	r2, [r3, #28]
 8006ef4:	e001      	b.n	8006efa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d831      	bhi.n	8006f84 <HAL_TIM_ReadCapturedValue+0x78>
 8006f20:	a201      	add	r2, pc, #4	@ (adr r2, 8006f28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f26:	bf00      	nop
 8006f28:	08006f5d 	.word	0x08006f5d
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f67 	.word	0x08006f67
 8006f3c:	08006f85 	.word	0x08006f85
 8006f40:	08006f85 	.word	0x08006f85
 8006f44:	08006f85 	.word	0x08006f85
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f85 	.word	0x08006f85
 8006f50:	08006f85 	.word	0x08006f85
 8006f54:	08006f85 	.word	0x08006f85
 8006f58:	08006f7b 	.word	0x08006f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f62:	60fb      	str	r3, [r7, #12]

      break;
 8006f64:	e00f      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	60fb      	str	r3, [r7, #12]

      break;
 8006f6e:	e00a      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f76:	60fb      	str	r3, [r7, #12]

      break;
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	60fb      	str	r3, [r7, #12]

      break;
 8006f82:	e000      	b.n	8006f86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f84:	bf00      	nop
  }

  return tmpreg;
 8006f86:	68fb      	ldr	r3, [r7, #12]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop

08006f94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr

08006fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a2f      	ldr	r2, [pc, #188]	@ (80070ac <TIM_Base_SetConfig+0xd0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00b      	beq.n	800700c <TIM_Base_SetConfig+0x30>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffa:	d007      	beq.n	800700c <TIM_Base_SetConfig+0x30>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80070b0 <TIM_Base_SetConfig+0xd4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d003      	beq.n	800700c <TIM_Base_SetConfig+0x30>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a2b      	ldr	r2, [pc, #172]	@ (80070b4 <TIM_Base_SetConfig+0xd8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d108      	bne.n	800701e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a22      	ldr	r2, [pc, #136]	@ (80070ac <TIM_Base_SetConfig+0xd0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d00b      	beq.n	800703e <TIM_Base_SetConfig+0x62>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702c:	d007      	beq.n	800703e <TIM_Base_SetConfig+0x62>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a1f      	ldr	r2, [pc, #124]	@ (80070b0 <TIM_Base_SetConfig+0xd4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d003      	beq.n	800703e <TIM_Base_SetConfig+0x62>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a1e      	ldr	r2, [pc, #120]	@ (80070b4 <TIM_Base_SetConfig+0xd8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d108      	bne.n	8007050 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a0d      	ldr	r2, [pc, #52]	@ (80070ac <TIM_Base_SetConfig+0xd0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d103      	bne.n	8007084 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f023 0201 	bic.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	611a      	str	r2, [r3, #16]
  }
}
 80070a2:	bf00      	nop
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bc80      	pop	{r7}
 80070aa:	4770      	bx	lr
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800

080070b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	f023 0201 	bic.w	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0302 	bic.w	r3, r3, #2
 8007100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a1c      	ldr	r2, [pc, #112]	@ (8007180 <TIM_OC1_SetConfig+0xc8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d10c      	bne.n	800712e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f023 0308 	bic.w	r3, r3, #8
 800711a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f023 0304 	bic.w	r3, r3, #4
 800712c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a13      	ldr	r2, [pc, #76]	@ (8007180 <TIM_OC1_SetConfig+0xc8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d111      	bne.n	800715a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800713c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	621a      	str	r2, [r3, #32]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40012c00 	.word	0x40012c00

08007184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	f023 0210 	bic.w	r2, r3, #16
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0320 	bic.w	r3, r3, #32
 80071ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a1d      	ldr	r2, [pc, #116]	@ (8007254 <TIM_OC2_SetConfig+0xd0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d10d      	bne.n	8007200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	011b      	lsls	r3, r3, #4
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a14      	ldr	r2, [pc, #80]	@ (8007254 <TIM_OC2_SetConfig+0xd0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d113      	bne.n	8007230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800720e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr
 8007254:	40012c00 	.word	0x40012c00

08007258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <TIM_OC3_SetConfig+0xd0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10d      	bne.n	80072d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <TIM_OC3_SetConfig+0xd0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d113      	bne.n	8007302 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	621a      	str	r2, [r3, #32]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40012c00 	.word	0x40012c00

0800732c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	031b      	lsls	r3, r3, #12
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a0f      	ldr	r2, [pc, #60]	@ (80073c4 <TIM_OC4_SetConfig+0x98>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d109      	bne.n	80073a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	019b      	lsls	r3, r3, #6
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr
 80073c4:	40012c00 	.word	0x40012c00

080073c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	f023 0201 	bic.w	r2, r3, #1
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007470 <TIM_TI1_SetConfig+0xa8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00b      	beq.n	800740e <TIM_TI1_SetConfig+0x46>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073fc:	d007      	beq.n	800740e <TIM_TI1_SetConfig+0x46>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4a1c      	ldr	r2, [pc, #112]	@ (8007474 <TIM_TI1_SetConfig+0xac>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_TI1_SetConfig+0x46>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a1b      	ldr	r2, [pc, #108]	@ (8007478 <TIM_TI1_SetConfig+0xb0>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d101      	bne.n	8007412 <TIM_TI1_SetConfig+0x4a>
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <TIM_TI1_SetConfig+0x4c>
 8007412:	2300      	movs	r3, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e003      	b.n	8007432 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	b2db      	uxtb	r3, r3
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f023 030a 	bic.w	r3, r3, #10
 800744c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f003 030a 	and.w	r3, r3, #10
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40000400 	.word	0x40000400
 8007478:	40000800 	.word	0x40000800

0800747c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	f023 0210 	bic.w	r2, r3, #16
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	021b      	lsls	r3, r3, #8
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	031b      	lsls	r3, r3, #12
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80074ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f023 0303 	bic.w	r3, r3, #3
 8007520:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007530:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	011b      	lsls	r3, r3, #4
 8007536:	b2db      	uxtb	r3, r3
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007544:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr

0800756a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800756a:	b480      	push	{r7}
 800756c:	b087      	sub	sp, #28
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
 8007576:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007596:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4313      	orrs	r3, r2
 80075a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	031b      	lsls	r3, r3, #12
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075bc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	031b      	lsls	r3, r3, #12
 80075c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	621a      	str	r2, [r3, #32]
}
 80075d8:	bf00      	nop
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr

080075e2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b087      	sub	sp, #28
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 031f 	and.w	r3, r3, #31
 80075f4:	2201      	movs	r2, #1
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a1a      	ldr	r2, [r3, #32]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	43db      	mvns	r3, r3
 8007604:	401a      	ands	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	431a      	orrs	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	bc80      	pop	{r7}
 8007628:	4770      	bx	lr
	...

0800762c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007640:	2302      	movs	r3, #2
 8007642:	e046      	b.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a16      	ldr	r2, [pc, #88]	@ (80076dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00e      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007690:	d009      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a12      	ldr	r2, [pc, #72]	@ (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d004      	beq.n	80076a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a10      	ldr	r2, [pc, #64]	@ (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d10c      	bne.n	80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800

080076e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr

080076fa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr

0800770c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e042      	b.n	80077a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fa f928 	bl	8001988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2224      	movs	r2, #36	@ 0x24
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800774e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f82b 	bl	80077ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80077e6:	f023 030c 	bic.w	r3, r3, #12
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	430b      	orrs	r3, r1
 80077f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	699a      	ldr	r2, [r3, #24]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a2c      	ldr	r2, [pc, #176]	@ (80078c0 <UART_SetConfig+0x114>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d103      	bne.n	800781c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007814:	f7fe ff00 	bl	8006618 <HAL_RCC_GetPCLK2Freq>
 8007818:	60f8      	str	r0, [r7, #12]
 800781a:	e002      	b.n	8007822 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800781c:	f7fe fee8 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8007820:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009a      	lsls	r2, r3, #2
 800782c:	441a      	add	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	4a22      	ldr	r2, [pc, #136]	@ (80078c4 <UART_SetConfig+0x118>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	0119      	lsls	r1, r3, #4
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009a      	lsls	r2, r3, #2
 800784c:	441a      	add	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	fbb2 f2f3 	udiv	r2, r2, r3
 8007858:	4b1a      	ldr	r3, [pc, #104]	@ (80078c4 <UART_SetConfig+0x118>)
 800785a:	fba3 0302 	umull	r0, r3, r3, r2
 800785e:	095b      	lsrs	r3, r3, #5
 8007860:	2064      	movs	r0, #100	@ 0x64
 8007862:	fb00 f303 	mul.w	r3, r0, r3
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	011b      	lsls	r3, r3, #4
 800786a:	3332      	adds	r3, #50	@ 0x32
 800786c:	4a15      	ldr	r2, [pc, #84]	@ (80078c4 <UART_SetConfig+0x118>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007878:	4419      	add	r1, r3
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009a      	lsls	r2, r3, #2
 8007884:	441a      	add	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007890:	4b0c      	ldr	r3, [pc, #48]	@ (80078c4 <UART_SetConfig+0x118>)
 8007892:	fba3 0302 	umull	r0, r3, r3, r2
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	2064      	movs	r0, #100	@ 0x64
 800789a:	fb00 f303 	mul.w	r3, r0, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	3332      	adds	r3, #50	@ 0x32
 80078a4:	4a07      	ldr	r2, [pc, #28]	@ (80078c4 <UART_SetConfig+0x118>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	440a      	add	r2, r1
 80078b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40013800 	.word	0x40013800
 80078c4:	51eb851f 	.word	0x51eb851f

080078c8 <app_init>:
task_dta_t task_dta_list[TASK_QTY];

/********************** funciones ***********************************/

void app_init(void) //define la arquitectura de inicialización de una app modular con múltiples tareas periódicas o event-driven
{
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af02      	add	r7, sp, #8
    uint32_t index;

    LOGGER_INFO(" ");
 80078ce:	b672      	cpsid	i
 80078d0:	4ba2      	ldr	r3, [pc, #648]	@ (8007b5c <app_init+0x294>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4aa2      	ldr	r2, [pc, #648]	@ (8007b60 <app_init+0x298>)
 80078d6:	213f      	movs	r1, #63	@ 0x3f
 80078d8:	4618      	mov	r0, r3
 80078da:	f004 fb3f 	bl	800bf5c <sniprintf>
 80078de:	4603      	mov	r3, r0
 80078e0:	4aa0      	ldr	r2, [pc, #640]	@ (8007b64 <app_init+0x29c>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	4b9d      	ldr	r3, [pc, #628]	@ (8007b5c <app_init+0x294>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fa13 	bl	8007d14 <logger_log_print_>
 80078ee:	b662      	cpsie	i
 80078f0:	b672      	cpsid	i
 80078f2:	4b9a      	ldr	r3, [pc, #616]	@ (8007b5c <app_init+0x294>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a9c      	ldr	r2, [pc, #624]	@ (8007b68 <app_init+0x2a0>)
 80078f8:	213f      	movs	r1, #63	@ 0x3f
 80078fa:	4618      	mov	r0, r3
 80078fc:	f004 fb2e 	bl	800bf5c <sniprintf>
 8007900:	4603      	mov	r3, r0
 8007902:	4a98      	ldr	r2, [pc, #608]	@ (8007b64 <app_init+0x29c>)
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4b95      	ldr	r3, [pc, #596]	@ (8007b5c <app_init+0x294>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fa02 	bl	8007d14 <logger_log_print_>
 8007910:	b662      	cpsie	i
 8007912:	b672      	cpsid	i
 8007914:	4b91      	ldr	r3, [pc, #580]	@ (8007b5c <app_init+0x294>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a94      	ldr	r2, [pc, #592]	@ (8007b6c <app_init+0x2a4>)
 800791a:	213f      	movs	r1, #63	@ 0x3f
 800791c:	4618      	mov	r0, r3
 800791e:	f004 fb1d 	bl	800bf5c <sniprintf>
 8007922:	4603      	mov	r3, r0
 8007924:	4a8f      	ldr	r2, [pc, #572]	@ (8007b64 <app_init+0x29c>)
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	4b8c      	ldr	r3, [pc, #560]	@ (8007b5c <app_init+0x294>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4618      	mov	r0, r3
 800792e:	f000 f9f1 	bl	8007d14 <logger_log_print_>
 8007932:	b662      	cpsie	i
    LOGGER_INFO("%s is running - Tick = %lu", GET_NAME(app_init), HAL_GetTick());
 8007934:	b672      	cpsid	i
 8007936:	4b89      	ldr	r3, [pc, #548]	@ (8007b5c <app_init+0x294>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a89      	ldr	r2, [pc, #548]	@ (8007b60 <app_init+0x298>)
 800793c:	213f      	movs	r1, #63	@ 0x3f
 800793e:	4618      	mov	r0, r3
 8007940:	f004 fb0c 	bl	800bf5c <sniprintf>
 8007944:	4603      	mov	r3, r0
 8007946:	4a87      	ldr	r2, [pc, #540]	@ (8007b64 <app_init+0x29c>)
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	4b84      	ldr	r3, [pc, #528]	@ (8007b5c <app_init+0x294>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f9e0 	bl	8007d14 <logger_log_print_>
 8007954:	b662      	cpsie	i
 8007956:	b672      	cpsid	i
 8007958:	4b80      	ldr	r3, [pc, #512]	@ (8007b5c <app_init+0x294>)
 800795a:	681c      	ldr	r4, [r3, #0]
 800795c:	f7fa f98c 	bl	8001c78 <HAL_GetTick>
 8007960:	4603      	mov	r3, r0
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	4b82      	ldr	r3, [pc, #520]	@ (8007b70 <app_init+0x2a8>)
 8007966:	4a83      	ldr	r2, [pc, #524]	@ (8007b74 <app_init+0x2ac>)
 8007968:	213f      	movs	r1, #63	@ 0x3f
 800796a:	4620      	mov	r0, r4
 800796c:	f004 faf6 	bl	800bf5c <sniprintf>
 8007970:	4603      	mov	r3, r0
 8007972:	4a7c      	ldr	r2, [pc, #496]	@ (8007b64 <app_init+0x29c>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4b79      	ldr	r3, [pc, #484]	@ (8007b5c <app_init+0x294>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f9ca 	bl	8007d14 <logger_log_print_>
 8007980:	b662      	cpsie	i
 8007982:	b672      	cpsid	i
 8007984:	4b75      	ldr	r3, [pc, #468]	@ (8007b5c <app_init+0x294>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a78      	ldr	r2, [pc, #480]	@ (8007b6c <app_init+0x2a4>)
 800798a:	213f      	movs	r1, #63	@ 0x3f
 800798c:	4618      	mov	r0, r3
 800798e:	f004 fae5 	bl	800bf5c <sniprintf>
 8007992:	4603      	mov	r3, r0
 8007994:	4a73      	ldr	r2, [pc, #460]	@ (8007b64 <app_init+0x29c>)
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	4b70      	ldr	r3, [pc, #448]	@ (8007b5c <app_init+0x294>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f9b9 	bl	8007d14 <logger_log_print_>
 80079a2:	b662      	cpsie	i
	
    LOGGER_INFO(p_sys);
 80079a4:	b672      	cpsid	i
 80079a6:	4b6d      	ldr	r3, [pc, #436]	@ (8007b5c <app_init+0x294>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a6d      	ldr	r2, [pc, #436]	@ (8007b60 <app_init+0x298>)
 80079ac:	213f      	movs	r1, #63	@ 0x3f
 80079ae:	4618      	mov	r0, r3
 80079b0:	f004 fad4 	bl	800bf5c <sniprintf>
 80079b4:	4603      	mov	r3, r0
 80079b6:	4a6b      	ldr	r2, [pc, #428]	@ (8007b64 <app_init+0x29c>)
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4b68      	ldr	r3, [pc, #416]	@ (8007b5c <app_init+0x294>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f9a8 	bl	8007d14 <logger_log_print_>
 80079c4:	b662      	cpsie	i
 80079c6:	b672      	cpsid	i
 80079c8:	4b64      	ldr	r3, [pc, #400]	@ (8007b5c <app_init+0x294>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a6a      	ldr	r2, [pc, #424]	@ (8007b78 <app_init+0x2b0>)
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	213f      	movs	r1, #63	@ 0x3f
 80079d2:	4618      	mov	r0, r3
 80079d4:	f004 fac2 	bl	800bf5c <sniprintf>
 80079d8:	4603      	mov	r3, r0
 80079da:	4a62      	ldr	r2, [pc, #392]	@ (8007b64 <app_init+0x29c>)
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	4b5f      	ldr	r3, [pc, #380]	@ (8007b5c <app_init+0x294>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 f996 	bl	8007d14 <logger_log_print_>
 80079e8:	b662      	cpsie	i
 80079ea:	b672      	cpsid	i
 80079ec:	4b5b      	ldr	r3, [pc, #364]	@ (8007b5c <app_init+0x294>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a5e      	ldr	r2, [pc, #376]	@ (8007b6c <app_init+0x2a4>)
 80079f2:	213f      	movs	r1, #63	@ 0x3f
 80079f4:	4618      	mov	r0, r3
 80079f6:	f004 fab1 	bl	800bf5c <sniprintf>
 80079fa:	4603      	mov	r3, r0
 80079fc:	4a59      	ldr	r2, [pc, #356]	@ (8007b64 <app_init+0x29c>)
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	4b56      	ldr	r3, [pc, #344]	@ (8007b5c <app_init+0x294>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f985 	bl	8007d14 <logger_log_print_>
 8007a0a:	b662      	cpsie	i
    LOGGER_INFO(p_app);
 8007a0c:	b672      	cpsid	i
 8007a0e:	4b53      	ldr	r3, [pc, #332]	@ (8007b5c <app_init+0x294>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a53      	ldr	r2, [pc, #332]	@ (8007b60 <app_init+0x298>)
 8007a14:	213f      	movs	r1, #63	@ 0x3f
 8007a16:	4618      	mov	r0, r3
 8007a18:	f004 faa0 	bl	800bf5c <sniprintf>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	4a51      	ldr	r2, [pc, #324]	@ (8007b64 <app_init+0x29c>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	4b4e      	ldr	r3, [pc, #312]	@ (8007b5c <app_init+0x294>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f974 	bl	8007d14 <logger_log_print_>
 8007a2c:	b662      	cpsie	i
 8007a2e:	b672      	cpsid	i
 8007a30:	4b4a      	ldr	r3, [pc, #296]	@ (8007b5c <app_init+0x294>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a51      	ldr	r2, [pc, #324]	@ (8007b7c <app_init+0x2b4>)
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	213f      	movs	r1, #63	@ 0x3f
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f004 fa8e 	bl	800bf5c <sniprintf>
 8007a40:	4603      	mov	r3, r0
 8007a42:	4a48      	ldr	r2, [pc, #288]	@ (8007b64 <app_init+0x29c>)
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	4b45      	ldr	r3, [pc, #276]	@ (8007b5c <app_init+0x294>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f962 	bl	8007d14 <logger_log_print_>
 8007a50:	b662      	cpsie	i
 8007a52:	b672      	cpsid	i
 8007a54:	4b41      	ldr	r3, [pc, #260]	@ (8007b5c <app_init+0x294>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a44      	ldr	r2, [pc, #272]	@ (8007b6c <app_init+0x2a4>)
 8007a5a:	213f      	movs	r1, #63	@ 0x3f
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f004 fa7d 	bl	800bf5c <sniprintf>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4a3f      	ldr	r2, [pc, #252]	@ (8007b64 <app_init+0x29c>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4b3c      	ldr	r3, [pc, #240]	@ (8007b5c <app_init+0x294>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f951 	bl	8007d14 <logger_log_print_>
 8007a72:	b662      	cpsie	i

    g_app_cnt = G_APP_CNT_INI;
 8007a74:	4b42      	ldr	r3, [pc, #264]	@ (8007b80 <app_init+0x2b8>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
	LOGGER_INFO(" %s = %lu", GET_NAME(g_app_cnt), g_app_cnt);
 8007a7a:	b672      	cpsid	i
 8007a7c:	4b37      	ldr	r3, [pc, #220]	@ (8007b5c <app_init+0x294>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a37      	ldr	r2, [pc, #220]	@ (8007b60 <app_init+0x298>)
 8007a82:	213f      	movs	r1, #63	@ 0x3f
 8007a84:	4618      	mov	r0, r3
 8007a86:	f004 fa69 	bl	800bf5c <sniprintf>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	4a35      	ldr	r2, [pc, #212]	@ (8007b64 <app_init+0x29c>)
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	4b32      	ldr	r3, [pc, #200]	@ (8007b5c <app_init+0x294>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f93d 	bl	8007d14 <logger_log_print_>
 8007a9a:	b662      	cpsie	i
 8007a9c:	b672      	cpsid	i
 8007a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007b5c <app_init+0x294>)
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	4b37      	ldr	r3, [pc, #220]	@ (8007b80 <app_init+0x2b8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	4b36      	ldr	r3, [pc, #216]	@ (8007b84 <app_init+0x2bc>)
 8007aaa:	4a37      	ldr	r2, [pc, #220]	@ (8007b88 <app_init+0x2c0>)
 8007aac:	213f      	movs	r1, #63	@ 0x3f
 8007aae:	f004 fa55 	bl	800bf5c <sniprintf>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8007b64 <app_init+0x29c>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4b28      	ldr	r3, [pc, #160]	@ (8007b5c <app_init+0x294>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f929 	bl	8007d14 <logger_log_print_>
 8007ac2:	b662      	cpsie	i
 8007ac4:	b672      	cpsid	i
 8007ac6:	4b25      	ldr	r3, [pc, #148]	@ (8007b5c <app_init+0x294>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a28      	ldr	r2, [pc, #160]	@ (8007b6c <app_init+0x2a4>)
 8007acc:	213f      	movs	r1, #63	@ 0x3f
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f004 fa44 	bl	800bf5c <sniprintf>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	4a23      	ldr	r2, [pc, #140]	@ (8007b64 <app_init+0x29c>)
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	4b20      	ldr	r3, [pc, #128]	@ (8007b5c <app_init+0x294>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f918 	bl	8007d14 <logger_log_print_>
 8007ae4:	b662      	cpsie	i
/*!< DWT Cycle Counter register */
/*!< CYCCNTENA bit in DWT_CONTROL register */
static inline void cycle_counter_init(void) __attribute__((always_inline));
static inline void cycle_counter_init(void)
{
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;/* enable DWT hardware */
 8007ae6:	4b29      	ldr	r3, [pc, #164]	@ (8007b8c <app_init+0x2c4>)
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	4a28      	ldr	r2, [pc, #160]	@ (8007b8c <app_init+0x2c4>)
 8007aec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007af0:	60d3      	str	r3, [r2, #12]
	 DWT->CYCCNT = 0;								/* reset cycle counter */
 8007af2:	4b27      	ldr	r3, [pc, #156]	@ (8007b90 <app_init+0x2c8>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	605a      	str	r2, [r3, #4]
	 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;			/* start counting */
 8007af8:	4b25      	ldr	r3, [pc, #148]	@ (8007b90 <app_init+0x2c8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a24      	ldr	r2, [pc, #144]	@ (8007b90 <app_init+0x2c8>)
 8007afe:	f043 0301 	orr.w	r3, r3, #1
 8007b02:	6013      	str	r3, [r2, #0]
}
 8007b04:	bf00      	nop
	
	/*inicializacion del contador de ciclos del CPU*/
    cycle_counter_init();

	/*inicia cada tarea con su WCET*/
    for (index = 0; index < TASK_QTY; index++) {
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
 8007b0a:	e01a      	b.n	8007b42 <app_init+0x27a>
        task_cfg_list[index].task_init(task_cfg_list[index].parameters);
 8007b0c:	4921      	ldr	r1, [pc, #132]	@ (8007b94 <app_init+0x2cc>)
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	6819      	ldr	r1, [r3, #0]
 8007b1c:	481d      	ldr	r0, [pc, #116]	@ (8007b94 <app_init+0x2cc>)
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4403      	add	r3, r0
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	4788      	blx	r1
        task_dta_list[index].WCET = TASK_X_WCET_INI;
 8007b32:	4a19      	ldr	r2, [pc, #100]	@ (8007b98 <app_init+0x2d0>)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2100      	movs	r1, #0
 8007b38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (index = 0; index < TASK_QTY; index++) {
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	607b      	str	r3, [r7, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	d9e1      	bls.n	8007b0c <app_init+0x244>
    }

    /*proteccion recursos compartidos al inicializar tick global*/
    	__asm("CPSID i");	//desactiva interrupciones
 8007b48:	b672      	cpsid	i
    	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 8007b4a:	4b14      	ldr	r3, [pc, #80]	@ (8007b9c <app_init+0x2d4>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
        __asm("CPSIE i");//vuelve a activarlas 
 8007b50:	b662      	cpsie	i
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd90      	pop	{r4, r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0800f2d0 	.word	0x0800f2d0
 8007b60:	0800e998 	.word	0x0800e998
 8007b64:	20000534 	.word	0x20000534
 8007b68:	0800e9a0 	.word	0x0800e9a0
 8007b6c:	0800e9a4 	.word	0x0800e9a4
 8007b70:	0800e9a8 	.word	0x0800e9a8
 8007b74:	0800e9b4 	.word	0x0800e9b4
 8007b78:	2000000c 	.word	0x2000000c
 8007b7c:	20000010 	.word	0x20000010
 8007b80:	200004cc 	.word	0x200004cc
 8007b84:	0800e9d0 	.word	0x0800e9d0
 8007b88:	0800e9dc 	.word	0x0800e9dc
 8007b8c:	e000edf0 	.word	0xe000edf0
 8007b90:	e0001000 	.word	0xe0001000
 8007b94:	0800f27c 	.word	0x0800f27c
 8007b98:	200004d8 	.word	0x200004d8
 8007b9c:	200004d4 	.word	0x200004d4

08007ba0 <app_update>:

void app_update(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
	/* declaracion variables */
	uint32_t index;
	bool b_time_update_required = false;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	72fb      	strb	r3, [r7, #11]
	uint32_t cycle_counter_time_us;

	/* verifica si hay tick disponible */
	__asm("CPSID i"); //desactiva interrupciones para evitar codigo bloqueante  
 8007baa:	b672      	cpsid	i
    if (G_APP_TICK_CNT_INI < g_app_tick_cnt) //compara
 8007bac:	4b35      	ldr	r3, [pc, #212]	@ (8007c84 <app_update+0xe4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d006      	beq.n	8007bc2 <app_update+0x22>
    {
		//si hay ticks pendientes lo decrementa
    	g_app_tick_cnt--;
 8007bb4:	4b33      	ldr	r3, [pc, #204]	@ (8007c84 <app_update+0xe4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4a32      	ldr	r2, [pc, #200]	@ (8007c84 <app_update+0xe4>)
 8007bbc:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
    }
    __asm("CPSIE i");//activa interrupciones de nuevo
 8007bc2:	b662      	cpsie	i

	/*mientras haya ticks pendientes ejecutar tareas*/
    while (b_time_update_required)
 8007bc4:	e055      	b.n	8007c72 <app_update+0xd2>
    {
    	/*contador de ciclos y tiempo total*/
    	g_app_cnt++;
 8007bc6:	4b30      	ldr	r3, [pc, #192]	@ (8007c88 <app_update+0xe8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8007c88 <app_update+0xe8>)
 8007bce:	6013      	str	r3, [r2, #0]
    	g_app_runtime_us = 0;
 8007bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8007c8c <app_update+0xec>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]

		/*iteracion sobre cada tarea*/
		for (index = 0; TASK_QTY > index; index++)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e037      	b.n	8007c4c <app_update+0xac>
/* reset cycle counter */
/*!< DWT Cycle Counter register */
static inline void cycle_counter_reset(void) __attribute__((always_inline));
static inline void cycle_counter_reset(void)
{
	DWT->CYCCNT = 0;
 8007bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8007c90 <app_update+0xf0>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	605a      	str	r2, [r3, #4]
}
 8007be2:	bf00      	nop
		{
			cycle_counter_reset(); //reinicia contador de tiempo
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters); //ejecuta tarea
 8007be4:	492b      	ldr	r1, [pc, #172]	@ (8007c94 <app_update+0xf4>)
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4613      	mov	r3, r2
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	6819      	ldr	r1, [r3, #0]
 8007bf6:	4827      	ldr	r0, [pc, #156]	@ (8007c94 <app_update+0xf4>)
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4403      	add	r3, r0
 8007c04:	3308      	adds	r3, #8
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	4788      	blx	r1
}

static inline uint32_t cycle_counter_get_time_us(void) __attribute__((always_inline));
static inline uint32_t cycle_counter_get_time_us(void)
{
	return (DWT->CYCCNT / (SystemCoreClock / 1000000));
 8007c0c:	4b20      	ldr	r3, [pc, #128]	@ (8007c90 <app_update+0xf0>)
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4b21      	ldr	r3, [pc, #132]	@ (8007c98 <app_update+0xf8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4921      	ldr	r1, [pc, #132]	@ (8007c9c <app_update+0xfc>)
 8007c16:	fba1 1303 	umull	r1, r3, r1, r3
 8007c1a:	0c9b      	lsrs	r3, r3, #18
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
			cycle_counter_time_us = cycle_counter_get_time_us(); //mide tiempo que tardó
 8007c20:	607b      	str	r3, [r7, #4]
			g_app_runtime_us += cycle_counter_time_us; //suma tiempo de ejecucion al total del ciclo 
 8007c22:	4b1a      	ldr	r3, [pc, #104]	@ (8007c8c <app_update+0xec>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4413      	add	r3, r2
 8007c2a:	4a18      	ldr	r2, [pc, #96]	@ (8007c8c <app_update+0xec>)
 8007c2c:	6013      	str	r3, [r2, #0]
			
			if (task_dta_list[index].WCET < cycle_counter_time_us) //si el tiempo actual supera el WCET anterior lo actualiza 
 8007c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca0 <app_update+0x100>)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d904      	bls.n	8007c46 <app_update+0xa6>
			{	
				task_dta_list[index].WCET = cycle_counter_time_us;
 8007c3c:	4918      	ldr	r1, [pc, #96]	@ (8007ca0 <app_update+0x100>)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (index = 0; TASK_QTY > index; index++)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b06      	cmp	r3, #6
 8007c50:	d9c4      	bls.n	8007bdc <app_update+0x3c>
		//for (index = 0; index < TASK_QTY; index++) {
		//	LOGGER_INFO("Tarea %lu: %lu us", index, task_dta_list[index].WCET);
		//}

		/*verifica si hay más ticks pendientes*/
		__asm("CPSID i");//desactiva interrupciones para evitar codigo bloqueante  
 8007c52:	b672      	cpsid	i
		if (G_APP_TICK_CNT_INI < g_app_tick_cnt) //compara
 8007c54:	4b0b      	ldr	r3, [pc, #44]	@ (8007c84 <app_update+0xe4>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d007      	beq.n	8007c6c <app_update+0xcc>
		{
			g_app_tick_cnt--; //si hay ticks pendientes lo decrementa
 8007c5c:	4b09      	ldr	r3, [pc, #36]	@ (8007c84 <app_update+0xe4>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	4a08      	ldr	r2, [pc, #32]	@ (8007c84 <app_update+0xe4>)
 8007c64:	6013      	str	r3, [r2, #0]
			b_time_update_required = true; 
 8007c66:	2301      	movs	r3, #1
 8007c68:	72fb      	strb	r3, [r7, #11]
 8007c6a:	e001      	b.n	8007c70 <app_update+0xd0>
		}
		else
		{
			b_time_update_required = false;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	72fb      	strb	r3, [r7, #11]
		}
		__asm("CPSIE i");//activa interrupciones de nuevo
 8007c70:	b662      	cpsie	i
    while (b_time_update_required)
 8007c72:	7afb      	ldrb	r3, [r7, #11]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1a6      	bne.n	8007bc6 <app_update+0x26>
	}
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	200004d4 	.word	0x200004d4
 8007c88:	200004cc 	.word	0x200004cc
 8007c8c:	200004d0 	.word	0x200004d0
 8007c90:	e0001000 	.word	0xe0001000
 8007c94:	0800f27c 	.word	0x0800f27c
 8007c98:	20000000 	.word	0x20000000
 8007c9c:	431bde83 	.word	0x431bde83
 8007ca0:	200004d8 	.word	0x200004d8

08007ca4 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
    g_app_tick_cnt++;
 8007ca8:	4b13      	ldr	r3, [pc, #76]	@ (8007cf8 <HAL_SYSTICK_Callback+0x54>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3301      	adds	r3, #1
 8007cae:	4a12      	ldr	r2, [pc, #72]	@ (8007cf8 <HAL_SYSTICK_Callback+0x54>)
 8007cb0:	6013      	str	r3, [r2, #0]
	g_task_lcd_tick_cnt++;
 8007cb2:	4b12      	ldr	r3, [pc, #72]	@ (8007cfc <HAL_SYSTICK_Callback+0x58>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	4a10      	ldr	r2, [pc, #64]	@ (8007cfc <HAL_SYSTICK_Callback+0x58>)
 8007cba:	6013      	str	r3, [r2, #0]
	g_task_cafe_fsm_tick_cnt++;
 8007cbc:	4b10      	ldr	r3, [pc, #64]	@ (8007d00 <HAL_SYSTICK_Callback+0x5c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	4a0f      	ldr	r2, [pc, #60]	@ (8007d00 <HAL_SYSTICK_Callback+0x5c>)
 8007cc4:	6013      	str	r3, [r2, #0]
	g_task_adc_tick_cnt++;
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d04 <HAL_SYSTICK_Callback+0x60>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8007d04 <HAL_SYSTICK_Callback+0x60>)
 8007cce:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <HAL_SYSTICK_Callback+0x64>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8007d08 <HAL_SYSTICK_Callback+0x64>)
 8007cd8:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 8007cda:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <HAL_SYSTICK_Callback+0x68>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8007d0c <HAL_SYSTICK_Callback+0x68>)
 8007ce2:	6013      	str	r3, [r2, #0]
	g_task_botones_tick_cnt++;
 8007ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <HAL_SYSTICK_Callback+0x6c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	4a09      	ldr	r2, [pc, #36]	@ (8007d10 <HAL_SYSTICK_Callback+0x6c>)
 8007cec:	6013      	str	r3, [r2, #0]

}
 8007cee:	bf00      	nop
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bc80      	pop	{r7}
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	200004d4 	.word	0x200004d4
 8007cfc:	200005a8 	.word	0x200005a8
 8007d00:	20000574 	.word	0x20000574
 8007d04:	20000544 	.word	0x20000544
 8007d08:	2000053c 	.word	0x2000053c
 8007d0c:	20000618 	.word	0x20000618
 8007d10:	20000568 	.word	0x20000568

08007d14 <logger_log_print_>:

/********************** definiciones funciones externas ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	printf(msg);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f004 fa13 	bl	800c148 <iprintf>
	fflush(stdout);
 8007d22:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <logger_log_print_+0x24>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f004 f903 	bl	800bf34 <fflush>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	200000a8 	.word	0x200000a8

08007d3c <task_actuator_init>:
//led3 = verde
//led4 = azul


void task_actuator_init(void *params) //inicializa contador
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
	led_off(1); led_off(2);led_off(3);led_off(4); //prende todas LEDs 
 8007d44:	2001      	movs	r0, #1
 8007d46:	f000 f97b 	bl	8008040 <led_off>
 8007d4a:	2002      	movs	r0, #2
 8007d4c:	f000 f978 	bl	8008040 <led_off>
 8007d50:	2003      	movs	r0, #3
 8007d52:	f000 f975 	bl	8008040 <led_off>
 8007d56:	2004      	movs	r0, #4
 8007d58:	f000 f972 	bl	8008040 <led_off>
	HAL_Delay(500); //espera 500ms
 8007d5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007d60:	f7f9 ff94 	bl	8001c8c <HAL_Delay>
	led_on(1); led_on(2);led_on(3);led_on(4); //apaga todas las LEDs para verificar que funcionen 
 8007d64:	2001      	movs	r0, #1
 8007d66:	f000 f935 	bl	8007fd4 <led_on>
 8007d6a:	2002      	movs	r0, #2
 8007d6c:	f000 f932 	bl	8007fd4 <led_on>
 8007d70:	2003      	movs	r0, #3
 8007d72:	f000 f92f 	bl	8007fd4 <led_on>
 8007d76:	2004      	movs	r0, #4
 8007d78:	f000 f92c 	bl	8007fd4 <led_on>
    LOGGER_INFO(" ");
 8007d7c:	b672      	cpsid	i
 8007d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a6d      	ldr	r2, [pc, #436]	@ (8007f38 <task_actuator_init+0x1fc>)
 8007d84:	213f      	movs	r1, #63	@ 0x3f
 8007d86:	4618      	mov	r0, r3
 8007d88:	f004 f8e8 	bl	800bf5c <sniprintf>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8007f3c <task_actuator_init+0x200>)
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	4b68      	ldr	r3, [pc, #416]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff ffbc 	bl	8007d14 <logger_log_print_>
 8007d9c:	b662      	cpsie	i
 8007d9e:	b672      	cpsid	i
 8007da0:	4b64      	ldr	r3, [pc, #400]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a66      	ldr	r2, [pc, #408]	@ (8007f40 <task_actuator_init+0x204>)
 8007da6:	213f      	movs	r1, #63	@ 0x3f
 8007da8:	4618      	mov	r0, r3
 8007daa:	f004 f8d7 	bl	800bf5c <sniprintf>
 8007dae:	4603      	mov	r3, r0
 8007db0:	4a62      	ldr	r2, [pc, #392]	@ (8007f3c <task_actuator_init+0x200>)
 8007db2:	6013      	str	r3, [r2, #0]
 8007db4:	4b5f      	ldr	r3, [pc, #380]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7ff ffab 	bl	8007d14 <logger_log_print_>
 8007dbe:	b662      	cpsie	i
 8007dc0:	b672      	cpsid	i
 8007dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8007f44 <task_actuator_init+0x208>)
 8007dc8:	213f      	movs	r1, #63	@ 0x3f
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f004 f8c6 	bl	800bf5c <sniprintf>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8007f3c <task_actuator_init+0x200>)
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	4b57      	ldr	r3, [pc, #348]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff ff9a 	bl	8007d14 <logger_log_print_>
 8007de0:	b662      	cpsie	i
    
    //inicializa contador global
    LOGGER_INFO("  %s is running - %s", GET_NAME(task_actuator_init), p_task_actuator);
 8007de2:	b672      	cpsid	i
 8007de4:	4b53      	ldr	r3, [pc, #332]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a53      	ldr	r2, [pc, #332]	@ (8007f38 <task_actuator_init+0x1fc>)
 8007dea:	213f      	movs	r1, #63	@ 0x3f
 8007dec:	4618      	mov	r0, r3
 8007dee:	f004 f8b5 	bl	800bf5c <sniprintf>
 8007df2:	4603      	mov	r3, r0
 8007df4:	4a51      	ldr	r2, [pc, #324]	@ (8007f3c <task_actuator_init+0x200>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	4b4e      	ldr	r3, [pc, #312]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff ff89 	bl	8007d14 <logger_log_print_>
 8007e02:	b662      	cpsie	i
 8007e04:	b672      	cpsid	i
 8007e06:	4b4b      	ldr	r3, [pc, #300]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8007f48 <task_actuator_init+0x20c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	4b4e      	ldr	r3, [pc, #312]	@ (8007f4c <task_actuator_init+0x210>)
 8007e12:	4a4f      	ldr	r2, [pc, #316]	@ (8007f50 <task_actuator_init+0x214>)
 8007e14:	213f      	movs	r1, #63	@ 0x3f
 8007e16:	f004 f8a1 	bl	800bf5c <sniprintf>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4a47      	ldr	r2, [pc, #284]	@ (8007f3c <task_actuator_init+0x200>)
 8007e1e:	6013      	str	r3, [r2, #0]
 8007e20:	4b44      	ldr	r3, [pc, #272]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff ff75 	bl	8007d14 <logger_log_print_>
 8007e2a:	b662      	cpsie	i
 8007e2c:	b672      	cpsid	i
 8007e2e:	4b41      	ldr	r3, [pc, #260]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a44      	ldr	r2, [pc, #272]	@ (8007f44 <task_actuator_init+0x208>)
 8007e34:	213f      	movs	r1, #63	@ 0x3f
 8007e36:	4618      	mov	r0, r3
 8007e38:	f004 f890 	bl	800bf5c <sniprintf>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8007f3c <task_actuator_init+0x200>)
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4b3c      	ldr	r3, [pc, #240]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff ff64 	bl	8007d14 <logger_log_print_>
 8007e4c:	b662      	cpsie	i
    LOGGER_INFO("  %s is a %s", GET_NAME(task_actuator_update), p_task_actuator_);
 8007e4e:	b672      	cpsid	i
 8007e50:	4b38      	ldr	r3, [pc, #224]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a38      	ldr	r2, [pc, #224]	@ (8007f38 <task_actuator_init+0x1fc>)
 8007e56:	213f      	movs	r1, #63	@ 0x3f
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f004 f87f 	bl	800bf5c <sniprintf>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	4a36      	ldr	r2, [pc, #216]	@ (8007f3c <task_actuator_init+0x200>)
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	4b33      	ldr	r3, [pc, #204]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff ff53 	bl	8007d14 <logger_log_print_>
 8007e6e:	b662      	cpsie	i
 8007e70:	b672      	cpsid	i
 8007e72:	4b30      	ldr	r3, [pc, #192]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	4b37      	ldr	r3, [pc, #220]	@ (8007f54 <task_actuator_init+0x218>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4b36      	ldr	r3, [pc, #216]	@ (8007f58 <task_actuator_init+0x21c>)
 8007e7e:	4a37      	ldr	r2, [pc, #220]	@ (8007f5c <task_actuator_init+0x220>)
 8007e80:	213f      	movs	r1, #63	@ 0x3f
 8007e82:	f004 f86b 	bl	800bf5c <sniprintf>
 8007e86:	4603      	mov	r3, r0
 8007e88:	4a2c      	ldr	r2, [pc, #176]	@ (8007f3c <task_actuator_init+0x200>)
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	4b29      	ldr	r3, [pc, #164]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff ff3f 	bl	8007d14 <logger_log_print_>
 8007e96:	b662      	cpsie	i
 8007e98:	b672      	cpsid	i
 8007e9a:	4b26      	ldr	r3, [pc, #152]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a29      	ldr	r2, [pc, #164]	@ (8007f44 <task_actuator_init+0x208>)
 8007ea0:	213f      	movs	r1, #63	@ 0x3f
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f004 f85a 	bl	800bf5c <sniprintf>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4a24      	ldr	r2, [pc, #144]	@ (8007f3c <task_actuator_init+0x200>)
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4b21      	ldr	r3, [pc, #132]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff ff2e 	bl	8007d14 <logger_log_print_>
 8007eb8:	b662      	cpsie	i

    g_task_actuator_cnt = G_TASK_ACTUATOR_CNT_INI;
 8007eba:	4b29      	ldr	r3, [pc, #164]	@ (8007f60 <task_actuator_init+0x224>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	601a      	str	r2, [r3, #0]
    LOGGER_INFO("   %s = %lu", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8007ec0:	b672      	cpsid	i
 8007ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8007f38 <task_actuator_init+0x1fc>)
 8007ec8:	213f      	movs	r1, #63	@ 0x3f
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f004 f846 	bl	800bf5c <sniprintf>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8007f3c <task_actuator_init+0x200>)
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	4b17      	ldr	r3, [pc, #92]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff ff1a 	bl	8007d14 <logger_log_print_>
 8007ee0:	b662      	cpsie	i
 8007ee2:	b672      	cpsid	i
 8007ee4:	4b13      	ldr	r3, [pc, #76]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8007f60 <task_actuator_init+0x224>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	4b1d      	ldr	r3, [pc, #116]	@ (8007f64 <task_actuator_init+0x228>)
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <task_actuator_init+0x22c>)
 8007ef2:	213f      	movs	r1, #63	@ 0x3f
 8007ef4:	f004 f832 	bl	800bf5c <sniprintf>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	4a10      	ldr	r2, [pc, #64]	@ (8007f3c <task_actuator_init+0x200>)
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	4b0d      	ldr	r3, [pc, #52]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff ff06 	bl	8007d14 <logger_log_print_>
 8007f08:	b662      	cpsie	i
 8007f0a:	b672      	cpsid	i
 8007f0c:	4b09      	ldr	r3, [pc, #36]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0c      	ldr	r2, [pc, #48]	@ (8007f44 <task_actuator_init+0x208>)
 8007f12:	213f      	movs	r1, #63	@ 0x3f
 8007f14:	4618      	mov	r0, r3
 8007f16:	f004 f821 	bl	800bf5c <sniprintf>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4a07      	ldr	r2, [pc, #28]	@ (8007f3c <task_actuator_init+0x200>)
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	4b04      	ldr	r3, [pc, #16]	@ (8007f34 <task_actuator_init+0x1f8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7ff fef5 	bl	8007d14 <logger_log_print_>
 8007f2a:	b662      	cpsie	i

}
 8007f2c:	bf00      	nop
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	0800f2d0 	.word	0x0800f2d0
 8007f38:	0800ea1c 	.word	0x0800ea1c
 8007f3c:	20000534 	.word	0x20000534
 8007f40:	0800ea24 	.word	0x0800ea24
 8007f44:	0800ea28 	.word	0x0800ea28
 8007f48:	20000014 	.word	0x20000014
 8007f4c:	0800ea2c 	.word	0x0800ea2c
 8007f50:	0800ea40 	.word	0x0800ea40
 8007f54:	20000018 	.word	0x20000018
 8007f58:	0800ea58 	.word	0x0800ea58
 8007f5c:	0800ea70 	.word	0x0800ea70
 8007f60:	20000538 	.word	0x20000538
 8007f64:	0800ea80 	.word	0x0800ea80
 8007f68:	0800ea94 	.word	0x0800ea94

08007f6c <task_actuator_update>:

void task_actuator_update(void *params) //actualiza contador
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
    bool b_time_update_required = false; //ver si es momento para actualizar 
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]

    __asm("CPSID i"); //deshabilita interrupciones para codigo bloqueante
 8007f78:	b672      	cpsid	i
    if (G_TASK_ACTUATOR_CNT_INI < g_task_actuator_tick_cnt) //compara
 8007f7a:	4b14      	ldr	r3, [pc, #80]	@ (8007fcc <task_actuator_update+0x60>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d006      	beq.n	8007f90 <task_actuator_update+0x24>
    {
    	g_task_actuator_tick_cnt--; //si hay ticks pendientes lo decrementa
 8007f82:	4b12      	ldr	r3, [pc, #72]	@ (8007fcc <task_actuator_update+0x60>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	4a10      	ldr	r2, [pc, #64]	@ (8007fcc <task_actuator_update+0x60>)
 8007f8a:	6013      	str	r3, [r2, #0]
        b_time_update_required = true;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");// rehabilita interrupciones
 8007f90:	b662      	cpsie	i
  /*mientras haya ticks pendientes ejecutar tareas*/
    if (b_time_update_required)
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d014      	beq.n	8007fc2 <task_actuator_update+0x56>
    {
    	g_task_actuator_cnt++; //incremento contador de ciclo de tarea 
 8007f98:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <task_actuator_update+0x64>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd0 <task_actuator_update+0x64>)
 8007fa0:	6013      	str	r3, [r2, #0]

       __asm("CPSID i"); //dehabilito interrupciones
 8007fa2:	b672      	cpsid	i
        if (G_TASK_ACTUATOR_CNT_INI < g_task_actuator_tick_cnt) //comparo
 8007fa4:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <task_actuator_update+0x60>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d007      	beq.n	8007fbc <task_actuator_update+0x50>
        {
        	g_task_actuator_tick_cnt--; //si hay ticks pendientes lo decrementa 
 8007fac:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <task_actuator_update+0x60>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	4a06      	ldr	r2, [pc, #24]	@ (8007fcc <task_actuator_update+0x60>)
 8007fb4:	6013      	str	r3, [r2, #0]
            b_time_update_required = true;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	73fb      	strb	r3, [r7, #15]
 8007fba:	e001      	b.n	8007fc0 <task_actuator_update+0x54>
        }
        else
        {
            b_time_update_required = false; //si no quedan ticks pendientes no es necesario actualizar aun 
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
        }
        __asm("CPSIE i"); // rehabilito interrupciones 
 8007fc0:	b662      	cpsie	i
    }

}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr
 8007fcc:	2000053c 	.word	0x2000053c
 8007fd0:	20000538 	.word	0x20000538

08007fd4 <led_on>:

/********************** LED control *****************************/

void led_on(uint8_t led_num) //apaga led segun numero
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
    switch (led_num) {
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d824      	bhi.n	8008030 <led_on+0x5c>
 8007fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <led_on+0x18>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	08008015 	.word	0x08008015
 8007ff8:	08008023 	.word	0x08008023
        case 1: HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); break;
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2102      	movs	r1, #2
 8008000:	480e      	ldr	r0, [pc, #56]	@ (800803c <led_on+0x68>)
 8008002:	f7fb f824 	bl	800304e <HAL_GPIO_WritePin>
 8008006:	e014      	b.n	8008032 <led_on+0x5e>
        case 2: HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); break;
 8008008:	2200      	movs	r2, #0
 800800a:	2104      	movs	r1, #4
 800800c:	480b      	ldr	r0, [pc, #44]	@ (800803c <led_on+0x68>)
 800800e:	f7fb f81e 	bl	800304e <HAL_GPIO_WritePin>
 8008012:	e00e      	b.n	8008032 <led_on+0x5e>
        case 3: HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); break;
 8008014:	2200      	movs	r2, #0
 8008016:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800801a:	4808      	ldr	r0, [pc, #32]	@ (800803c <led_on+0x68>)
 800801c:	f7fb f817 	bl	800304e <HAL_GPIO_WritePin>
 8008020:	e007      	b.n	8008032 <led_on+0x5e>
        case 4: HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET); break;
 8008022:	2200      	movs	r2, #0
 8008024:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008028:	4804      	ldr	r0, [pc, #16]	@ (800803c <led_on+0x68>)
 800802a:	f7fb f810 	bl	800304e <HAL_GPIO_WritePin>
 800802e:	e000      	b.n	8008032 <led_on+0x5e>
        default: break;
 8008030:	bf00      	nop
    }
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40010c00 	.word	0x40010c00

08008040 <led_off>:

void led_off(uint8_t led_num) //prendo led segun numero
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	71fb      	strb	r3, [r7, #7]
    switch (led_num) {
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	3b01      	subs	r3, #1
 800804e:	2b03      	cmp	r3, #3
 8008050:	d824      	bhi.n	800809c <led_off+0x5c>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <led_off+0x18>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	08008069 	.word	0x08008069
 800805c:	08008075 	.word	0x08008075
 8008060:	08008081 	.word	0x08008081
 8008064:	0800808f 	.word	0x0800808f
        case 1: HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); break;
 8008068:	2201      	movs	r2, #1
 800806a:	2102      	movs	r1, #2
 800806c:	480e      	ldr	r0, [pc, #56]	@ (80080a8 <led_off+0x68>)
 800806e:	f7fa ffee 	bl	800304e <HAL_GPIO_WritePin>
 8008072:	e014      	b.n	800809e <led_off+0x5e>
        case 2: HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); break;
 8008074:	2201      	movs	r2, #1
 8008076:	2104      	movs	r1, #4
 8008078:	480b      	ldr	r0, [pc, #44]	@ (80080a8 <led_off+0x68>)
 800807a:	f7fa ffe8 	bl	800304e <HAL_GPIO_WritePin>
 800807e:	e00e      	b.n	800809e <led_off+0x5e>
        case 3: HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); break;
 8008080:	2201      	movs	r2, #1
 8008082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008086:	4808      	ldr	r0, [pc, #32]	@ (80080a8 <led_off+0x68>)
 8008088:	f7fa ffe1 	bl	800304e <HAL_GPIO_WritePin>
 800808c:	e007      	b.n	800809e <led_off+0x5e>
        case 4: HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET); break;
 800808e:	2201      	movs	r2, #1
 8008090:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008094:	4804      	ldr	r0, [pc, #16]	@ (80080a8 <led_off+0x68>)
 8008096:	f7fa ffda 	bl	800304e <HAL_GPIO_WritePin>
 800809a:	e000      	b.n	800809e <led_off+0x5e>
        default: break;
 800809c:	bf00      	nop
    }
}
 800809e:	bf00      	nop
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	40010c00 	.word	0x40010c00

080080ac <test_leds>:
        default: break;
    }
}

bool test_leds(void) //testea 4 leds
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
    for (uint8_t i = 1; i <= 4; i++) {
 80080b2:	2301      	movs	r3, #1
 80080b4:	73fb      	strb	r3, [r7, #15]
 80080b6:	e03e      	b.n	8008136 <test_leds+0x8a>
        led_off(i);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7ff ffc0 	bl	8008040 <led_off>
        HAL_Delay(100);
 80080c0:	2064      	movs	r0, #100	@ 0x64
 80080c2:	f7f9 fde3 	bl	8001c8c <HAL_Delay>

        GPIO_TypeDef *port;
        uint16_t pin;

        switch (i) {
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d820      	bhi.n	8008110 <test_leds+0x64>
 80080ce:	a201      	add	r2, pc, #4	@ (adr r2, 80080d4 <test_leds+0x28>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080ef 	.word	0x080080ef
 80080dc:	080080f9 	.word	0x080080f9
 80080e0:	08008105 	.word	0x08008105
            case 1: port = LED1_GPIO_Port; pin = LED1_Pin; break;
 80080e4:	4b18      	ldr	r3, [pc, #96]	@ (8008148 <test_leds+0x9c>)
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	2302      	movs	r3, #2
 80080ea:	80fb      	strh	r3, [r7, #6]
 80080ec:	e012      	b.n	8008114 <test_leds+0x68>
            case 2: port = LED2_GPIO_Port; pin = LED2_Pin; break;
 80080ee:	4b16      	ldr	r3, [pc, #88]	@ (8008148 <test_leds+0x9c>)
 80080f0:	60bb      	str	r3, [r7, #8]
 80080f2:	2304      	movs	r3, #4
 80080f4:	80fb      	strh	r3, [r7, #6]
 80080f6:	e00d      	b.n	8008114 <test_leds+0x68>
            case 3: port = LED3_GPIO_Port; pin = LED3_Pin; break;
 80080f8:	4b13      	ldr	r3, [pc, #76]	@ (8008148 <test_leds+0x9c>)
 80080fa:	60bb      	str	r3, [r7, #8]
 80080fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008100:	80fb      	strh	r3, [r7, #6]
 8008102:	e007      	b.n	8008114 <test_leds+0x68>
            case 4: port = LED4_GPIO_Port; pin = LED4_Pin; break;
 8008104:	4b10      	ldr	r3, [pc, #64]	@ (8008148 <test_leds+0x9c>)
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800810c:	80fb      	strh	r3, [r7, #6]
 800810e:	e001      	b.n	8008114 <test_leds+0x68>
            default: return false;
 8008110:	2300      	movs	r3, #0
 8008112:	e014      	b.n	800813e <test_leds+0x92>
        }

        if (HAL_GPIO_ReadPin(port, pin) != GPIO_PIN_SET) {
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	4619      	mov	r1, r3
 8008118:	68b8      	ldr	r0, [r7, #8]
 800811a:	f7fa ff81 	bl	8003020 <HAL_GPIO_ReadPin>
 800811e:	4603      	mov	r3, r0
 8008120:	2b01      	cmp	r3, #1
 8008122:	d001      	beq.n	8008128 <test_leds+0x7c>
            return false;  // falla/error: el LED no se encendió correctamente
 8008124:	2300      	movs	r3, #0
 8008126:	e00a      	b.n	800813e <test_leds+0x92>
        }
        led_on(i);
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff ff52 	bl	8007fd4 <led_on>
    for (uint8_t i = 1; i <= 4; i++) {
 8008130:	7bfb      	ldrb	r3, [r7, #15]
 8008132:	3301      	adds	r3, #1
 8008134:	73fb      	strb	r3, [r7, #15]
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	2b04      	cmp	r3, #4
 800813a:	d9bd      	bls.n	80080b8 <test_leds+0xc>
    }
    return true;  // todos los LEDs pasaron la prueba
 800813c:	2301      	movs	r3, #1
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40010c00 	.word	0x40010c00

0800814c <mostrar_estado_leds>:

/********************** LED segun FSM *****************************/

void mostrar_estado_leds(estados est)//muestra estados de FSM a traves leds
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	71fb      	strb	r3, [r7, #7]
    led_on(1); led_on(2); led_on(3); led_on(4); //apago todas las leds
 8008156:	2001      	movs	r0, #1
 8008158:	f7ff ff3c 	bl	8007fd4 <led_on>
 800815c:	2002      	movs	r0, #2
 800815e:	f7ff ff39 	bl	8007fd4 <led_on>
 8008162:	2003      	movs	r0, #3
 8008164:	f7ff ff36 	bl	8007fd4 <led_on>
 8008168:	2004      	movs	r0, #4
 800816a:	f7ff ff33 	bl	8007fd4 <led_on>
    switch (est) {
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	2b08      	cmp	r3, #8
 8008172:	d83b      	bhi.n	80081ec <mostrar_estado_leds+0xa0>
 8008174:	a201      	add	r2, pc, #4	@ (adr r2, 800817c <mostrar_estado_leds+0x30>)
 8008176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817a:	bf00      	nop
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081ed 	.word	0x080081ed
 8008184:	080081b9 	.word	0x080081b9
 8008188:	080081ed 	.word	0x080081ed
 800818c:	080081ed 	.word	0x080081ed
 8008190:	080081a9 	.word	0x080081a9
 8008194:	080081b1 	.word	0x080081b1
 8008198:	080081ed 	.word	0x080081ed
 800819c:	080081d3 	.word	0x080081d3
        case estado_off:             led_off(1); break; // prendo rojo
 80081a0:	2001      	movs	r0, #1
 80081a2:	f7ff ff4d 	bl	8008040 <led_off>
 80081a6:	e022      	b.n	80081ee <mostrar_estado_leds+0xa2>
        case estado_menu_principal:  led_off(2); break; // prendo amarrillo
 80081a8:	2002      	movs	r0, #2
 80081aa:	f7ff ff49 	bl	8008040 <led_off>
 80081ae:	e01e      	b.n	80081ee <mostrar_estado_leds+0xa2>
        case estado_seleccion_cafe:  led_off(3); break; // prendo verde
 80081b0:	2003      	movs	r0, #3
 80081b2:	f7ff ff45 	bl	8008040 <led_off>
 80081b6:	e01a      	b.n	80081ee <mostrar_estado_leds+0xa2>
        case estado_fabricante:      led_off(1); led_off(2); led_off(3); led_off(4); break; //prendo todos
 80081b8:	2001      	movs	r0, #1
 80081ba:	f7ff ff41 	bl	8008040 <led_off>
 80081be:	2002      	movs	r0, #2
 80081c0:	f7ff ff3e 	bl	8008040 <led_off>
 80081c4:	2003      	movs	r0, #3
 80081c6:	f7ff ff3b 	bl	8008040 <led_off>
 80081ca:	2004      	movs	r0, #4
 80081cc:	f7ff ff38 	bl	8008040 <led_off>
 80081d0:	e00d      	b.n	80081ee <mostrar_estado_leds+0xa2>
        case estado_brewing:         led_on(1); led_on(2); led_on(3); led_on(4); break; //apago todos
 80081d2:	2001      	movs	r0, #1
 80081d4:	f7ff fefe 	bl	8007fd4 <led_on>
 80081d8:	2002      	movs	r0, #2
 80081da:	f7ff fefb 	bl	8007fd4 <led_on>
 80081de:	2003      	movs	r0, #3
 80081e0:	f7ff fef8 	bl	8007fd4 <led_on>
 80081e4:	2004      	movs	r0, #4
 80081e6:	f7ff fef5 	bl	8007fd4 <led_on>
 80081ea:	e000      	b.n	80081ee <mostrar_estado_leds+0xa2>
        default: break;
 80081ec:	bf00      	nop
    }
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop

080081f8 <actualizar_temperatura_actual>:
const char *p_task_adc  = "Task ADC";
const char *p_task_adc_ = "Non-Blocking & Update By Time Code";

/********************** funciones privadas ***********************************/
static void actualizar_temperatura_actual(void) //convierte adc_value[0] del pote a tempo de 30 a 90 grados 
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
    static uint8_t temp_ant = 0;
    uint8_t temp = (adc_value[0] * 60) / 4095 + 30;
 80081fe:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <actualizar_temperatura_actual+0x50>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4613      	mov	r3, r2
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	461a      	mov	r2, r3
 800820c:	4b0f      	ldr	r3, [pc, #60]	@ (800824c <actualizar_temperatura_actual+0x54>)
 800820e:	fba3 1302 	umull	r1, r3, r3, r2
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	0852      	lsrs	r2, r2, #1
 8008216:	4413      	add	r3, r2
 8008218:	0adb      	lsrs	r3, r3, #11
 800821a:	b2db      	uxtb	r3, r3
 800821c:	331e      	adds	r3, #30
 800821e:	71fb      	strb	r3, [r7, #7]

    //se actualiza sii temp_actual cambia +- 2 grados celsius de ultima medicion 
    if (abs((int)temp - temp_ant) >= 2) {
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	4a0b      	ldr	r2, [pc, #44]	@ (8008250 <actualizar_temperatura_actual+0x58>)
 8008224:	7812      	ldrb	r2, [r2, #0]
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfb8      	it	lt
 800822c:	425b      	neglt	r3, r3
 800822e:	2b01      	cmp	r3, #1
 8008230:	dd05      	ble.n	800823e <actualizar_temperatura_actual+0x46>
        temp_actual = temp;
 8008232:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <actualizar_temperatura_actual+0x5c>)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	7013      	strb	r3, [r2, #0]
        temp_ant = temp;
 8008238:	4a05      	ldr	r2, [pc, #20]	@ (8008250 <actualizar_temperatura_actual+0x58>)
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	7013      	strb	r3, [r2, #0]
    }
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr
 8008248:	20000548 	.word	0x20000548
 800824c:	00100101 	.word	0x00100101
 8008250:	20000555 	.word	0x20000555
 8008254:	20000554 	.word	0x20000554

08008258 <joystick_event>:

static bool joystick_event(uint8_t canal, int signo)//detecta mov joystick en una direccion (+arriba/der; -abajo/izq)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	4603      	mov	r3, r0
 8008260:	6039      	str	r1, [r7, #0]
 8008262:	71fb      	strb	r3, [r7, #7]
    static bool prev[2] = {false, false};
    static uint32_t last_event_ms[2] = {0, 0};  // nuevo
    const uint32_t DEBOUNCE_MS = 300;           // ajustá según necesites distancia temporal min entre dos eventos 
 8008264:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8008268:	613b      	str	r3, [r7, #16]
    bool now = false;
 800826a:	2300      	movs	r3, #0
 800826c:	75fb      	strb	r3, [r7, #23]
    //canal 1: eje y 
    //canal 2: eje x
    uint8_t idx = canal - 1;
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	3b01      	subs	r3, #1
 8008272:	73fb      	strb	r3, [r7, #15]
    if (signo > 0)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd0b      	ble.n	8008292 <joystick_event+0x3a>
        now = (adc_value[canal] > JOY_CENTRO + JOY_UMBRAL);
 800827a:	79fb      	ldrb	r3, [r7, #7]
 800827c:	4a23      	ldr	r2, [pc, #140]	@ (800830c <joystick_event+0xb4>)
 800827e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008282:	f640 32e8 	movw	r2, #3048	@ 0xbe8
 8008286:	4293      	cmp	r3, r2
 8008288:	bf8c      	ite	hi
 800828a:	2301      	movhi	r3, #1
 800828c:	2300      	movls	r3, #0
 800828e:	75fb      	strb	r3, [r7, #23]
 8008290:	e00a      	b.n	80082a8 <joystick_event+0x50>
    else
        now = (adc_value[canal] < JOY_CENTRO - JOY_UMBRAL);
 8008292:	79fb      	ldrb	r3, [r7, #7]
 8008294:	4a1d      	ldr	r2, [pc, #116]	@ (800830c <joystick_event+0xb4>)
 8008296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800829a:	f240 4217 	movw	r2, #1047	@ 0x417
 800829e:	4293      	cmp	r3, r2
 80082a0:	bf94      	ite	ls
 80082a2:	2301      	movls	r3, #1
 80082a4:	2300      	movhi	r3, #0
 80082a6:	75fb      	strb	r3, [r7, #23]

    uint32_t now_ms = HAL_GetTick();
 80082a8:	f7f9 fce6 	bl	8001c78 <HAL_GetTick>
 80082ac:	60b8      	str	r0, [r7, #8]

    if (now && !prev[idx]) {
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d01b      	beq.n	80082ec <joystick_event+0x94>
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	4a16      	ldr	r2, [pc, #88]	@ (8008310 <joystick_event+0xb8>)
 80082b8:	5cd3      	ldrb	r3, [r2, r3]
 80082ba:	f083 0301 	eor.w	r3, r3, #1
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d013      	beq.n	80082ec <joystick_event+0x94>
        prev[idx] = true;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	4a12      	ldr	r2, [pc, #72]	@ (8008310 <joystick_event+0xb8>)
 80082c8:	2101      	movs	r1, #1
 80082ca:	54d1      	strb	r1, [r2, r3]
        if (now_ms - last_event_ms[idx] > DEBOUNCE_MS) {
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	4a11      	ldr	r2, [pc, #68]	@ (8008314 <joystick_event+0xbc>)
 80082d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d206      	bcs.n	80082ec <joystick_event+0x94>
            last_event_ms[idx] = now_ms;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	490c      	ldr	r1, [pc, #48]	@ (8008314 <joystick_event+0xbc>)
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return true;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e00a      	b.n	8008302 <joystick_event+0xaa>
        }
    }
    if (!now) prev[idx] = false;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	f083 0301 	eor.w	r3, r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <joystick_event+0xa8>
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4a05      	ldr	r2, [pc, #20]	@ (8008310 <joystick_event+0xb8>)
 80082fc:	2100      	movs	r1, #0
 80082fe:	54d1      	strb	r1, [r2, r3]
    return false;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000548 	.word	0x20000548
 8008310:	20000558 	.word	0x20000558
 8008314:	2000055c 	.word	0x2000055c

08008318 <joystick_arriba>:

/********************** API pública para eventos *****************************/
bool joystick_arriba(void)    { return joystick_event(1, +1); } //mov arriba
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
 800831c:	2101      	movs	r1, #1
 800831e:	2001      	movs	r0, #1
 8008320:	f7ff ff9a 	bl	8008258 <joystick_event>
 8008324:	4603      	mov	r3, r0
 8008326:	4618      	mov	r0, r3
 8008328:	bd80      	pop	{r7, pc}

0800832a <joystick_abajo>:
bool joystick_abajo(void)     { return joystick_event(1, -1); } //mov abajo
 800832a:	b580      	push	{r7, lr}
 800832c:	af00      	add	r7, sp, #0
 800832e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008332:	2001      	movs	r0, #1
 8008334:	f7ff ff90 	bl	8008258 <joystick_event>
 8008338:	4603      	mov	r3, r0
 800833a:	4618      	mov	r0, r3
 800833c:	bd80      	pop	{r7, pc}

0800833e <joystick_derecha>:
bool joystick_derecha(void)   { return joystick_event(2, +1); } //mov der
 800833e:	b580      	push	{r7, lr}
 8008340:	af00      	add	r7, sp, #0
 8008342:	2101      	movs	r1, #1
 8008344:	2002      	movs	r0, #2
 8008346:	f7ff ff87 	bl	8008258 <joystick_event>
 800834a:	4603      	mov	r3, r0
 800834c:	4618      	mov	r0, r3
 800834e:	bd80      	pop	{r7, pc}

08008350 <joystick_izquierda>:
bool joystick_izquierda(void) { return joystick_event(2, -1); } //mov izq
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
 8008354:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008358:	2002      	movs	r0, #2
 800835a:	f7ff ff7d 	bl	8008258 <joystick_event>
 800835e:	4603      	mov	r3, r0
 8008360:	4618      	mov	r0, r3
 8008362:	bd80      	pop	{r7, pc}

08008364 <potenciometro_test>:

bool potenciometro_test(void)//retorna false si pote da valores externos invalidos
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
    return !(adc_value[0] < 10 || adc_value[0] > 4090);
 8008368:	4b09      	ldr	r3, [pc, #36]	@ (8008390 <potenciometro_test+0x2c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b09      	cmp	r3, #9
 800836e:	d907      	bls.n	8008380 <potenciometro_test+0x1c>
 8008370:	4b07      	ldr	r3, [pc, #28]	@ (8008390 <potenciometro_test+0x2c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f640 72fa 	movw	r2, #4090	@ 0xffa
 8008378:	4293      	cmp	r3, r2
 800837a:	d801      	bhi.n	8008380 <potenciometro_test+0x1c>
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <potenciometro_test+0x1e>
 8008380:	2300      	movs	r3, #0
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	b2db      	uxtb	r3, r3
}
 8008388:	4618      	mov	r0, r3
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr
 8008390:	20000548 	.word	0x20000548

08008394 <task_adc_update>:

/********************** lógica principal: estado -> evento *******************/
void task_adc_update(void *params) //determina si es momento de realizar tarea y actualiza
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
    bool b_time_update_required = false;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]

    __asm("CPSID i");//deshabilita interrupciones para codigo bloqueante
 80083a0:	b672      	cpsid	i
    if (G_TASK_ADC_CNT_INI < g_task_adc_tick_cnt) //compara
 80083a2:	4b15      	ldr	r3, [pc, #84]	@ (80083f8 <task_adc_update+0x64>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d006      	beq.n	80083b8 <task_adc_update+0x24>
    {
        g_task_adc_tick_cnt--; //si hay ticks pendientes lo decrementa
 80083aa:	4b13      	ldr	r3, [pc, #76]	@ (80083f8 <task_adc_update+0x64>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	4a11      	ldr	r2, [pc, #68]	@ (80083f8 <task_adc_update+0x64>)
 80083b2:	6013      	str	r3, [r2, #0]
        b_time_update_required = true; 
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");//// rehabilita interrupciones
 80083b8:	b662      	cpsie	i
     /*mientras haya ticks pendientes ejecutar tareas*/
    if (b_time_update_required) 
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d016      	beq.n	80083ee <task_adc_update+0x5a>
    {
        g_task_adc_cnt++;  //incremento contador de ciclo de tarea 
 80083c0:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <task_adc_update+0x68>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3301      	adds	r3, #1
 80083c6:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <task_adc_update+0x68>)
 80083c8:	6013      	str	r3, [r2, #0]
        actualizar_temperatura_actual();
 80083ca:	f7ff ff15 	bl	80081f8 <actualizar_temperatura_actual>

        // rechequeo si quedó tick pendiente
        __asm("CPSID i"); //dehabilito interrupciones
 80083ce:	b672      	cpsid	i
        if (G_TASK_ADC_CNT_INI < g_task_adc_tick_cnt) //comparo
 80083d0:	4b09      	ldr	r3, [pc, #36]	@ (80083f8 <task_adc_update+0x64>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <task_adc_update+0x54>
        {
            g_task_adc_tick_cnt--; //si hay ticks pendientes lo decrementa 
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <task_adc_update+0x64>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4a06      	ldr	r2, [pc, #24]	@ (80083f8 <task_adc_update+0x64>)
 80083e0:	6013      	str	r3, [r2, #0]
            b_time_update_required = true;
 80083e2:	2301      	movs	r3, #1
 80083e4:	73fb      	strb	r3, [r7, #15]
 80083e6:	e001      	b.n	80083ec <task_adc_update+0x58>
        }
        else
        {
            b_time_update_required = false; //si no quedan ticks pendientes no es necesario actualizar aun 
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
        }
        __asm("CPSIE i");// rehabilito interrupciones 
 80083ec:	b662      	cpsie	i
    }
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000544 	.word	0x20000544
 80083fc:	20000540 	.word	0x20000540

08008400 <task_adc_init>:

/********************** inicialización ***************************************/
void task_adc_init(void *params) //inicializar tarea del adc
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af02      	add	r7, sp, #8
 8008406:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start_DMA(&hadc1, adc_value, 3); //activa adc en modo dma tal que resultados de conversion de los 3 canales se alamcenaran en array adc_value[]
 8008408:	2203      	movs	r2, #3
 800840a:	4970      	ldr	r1, [pc, #448]	@ (80085cc <task_adc_init+0x1cc>)
 800840c:	4870      	ldr	r0, [pc, #448]	@ (80085d0 <task_adc_init+0x1d0>)
 800840e:	f7f9 fd39 	bl	8001e84 <HAL_ADC_Start_DMA>
    //DMA permite lectura continua sin intervencion del CPU, ideal para sistemas embebods con mutiples tareas
    LOGGER_INFO(" ");
 8008412:	b672      	cpsid	i
 8008414:	4b6f      	ldr	r3, [pc, #444]	@ (80085d4 <task_adc_init+0x1d4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a6f      	ldr	r2, [pc, #444]	@ (80085d8 <task_adc_init+0x1d8>)
 800841a:	213f      	movs	r1, #63	@ 0x3f
 800841c:	4618      	mov	r0, r3
 800841e:	f003 fd9d 	bl	800bf5c <sniprintf>
 8008422:	4603      	mov	r3, r0
 8008424:	4a6d      	ldr	r2, [pc, #436]	@ (80085dc <task_adc_init+0x1dc>)
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	4b6a      	ldr	r3, [pc, #424]	@ (80085d4 <task_adc_init+0x1d4>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff fc71 	bl	8007d14 <logger_log_print_>
 8008432:	b662      	cpsie	i
 8008434:	b672      	cpsid	i
 8008436:	4b67      	ldr	r3, [pc, #412]	@ (80085d4 <task_adc_init+0x1d4>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a69      	ldr	r2, [pc, #420]	@ (80085e0 <task_adc_init+0x1e0>)
 800843c:	213f      	movs	r1, #63	@ 0x3f
 800843e:	4618      	mov	r0, r3
 8008440:	f003 fd8c 	bl	800bf5c <sniprintf>
 8008444:	4603      	mov	r3, r0
 8008446:	4a65      	ldr	r2, [pc, #404]	@ (80085dc <task_adc_init+0x1dc>)
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	4b62      	ldr	r3, [pc, #392]	@ (80085d4 <task_adc_init+0x1d4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fc60 	bl	8007d14 <logger_log_print_>
 8008454:	b662      	cpsie	i
 8008456:	b672      	cpsid	i
 8008458:	4b5e      	ldr	r3, [pc, #376]	@ (80085d4 <task_adc_init+0x1d4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a61      	ldr	r2, [pc, #388]	@ (80085e4 <task_adc_init+0x1e4>)
 800845e:	213f      	movs	r1, #63	@ 0x3f
 8008460:	4618      	mov	r0, r3
 8008462:	f003 fd7b 	bl	800bf5c <sniprintf>
 8008466:	4603      	mov	r3, r0
 8008468:	4a5c      	ldr	r2, [pc, #368]	@ (80085dc <task_adc_init+0x1dc>)
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	4b59      	ldr	r3, [pc, #356]	@ (80085d4 <task_adc_init+0x1d4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fc4f 	bl	8007d14 <logger_log_print_>
 8008476:	b662      	cpsie	i
    LOGGER_INFO("  %s is running - %s", GET_NAME(task_adc_init), p_task_adc);
 8008478:	b672      	cpsid	i
 800847a:	4b56      	ldr	r3, [pc, #344]	@ (80085d4 <task_adc_init+0x1d4>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a56      	ldr	r2, [pc, #344]	@ (80085d8 <task_adc_init+0x1d8>)
 8008480:	213f      	movs	r1, #63	@ 0x3f
 8008482:	4618      	mov	r0, r3
 8008484:	f003 fd6a 	bl	800bf5c <sniprintf>
 8008488:	4603      	mov	r3, r0
 800848a:	4a54      	ldr	r2, [pc, #336]	@ (80085dc <task_adc_init+0x1dc>)
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	4b51      	ldr	r3, [pc, #324]	@ (80085d4 <task_adc_init+0x1d4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fc3e 	bl	8007d14 <logger_log_print_>
 8008498:	b662      	cpsie	i
 800849a:	b672      	cpsid	i
 800849c:	4b4d      	ldr	r3, [pc, #308]	@ (80085d4 <task_adc_init+0x1d4>)
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	4b51      	ldr	r3, [pc, #324]	@ (80085e8 <task_adc_init+0x1e8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	4b51      	ldr	r3, [pc, #324]	@ (80085ec <task_adc_init+0x1ec>)
 80084a8:	4a51      	ldr	r2, [pc, #324]	@ (80085f0 <task_adc_init+0x1f0>)
 80084aa:	213f      	movs	r1, #63	@ 0x3f
 80084ac:	f003 fd56 	bl	800bf5c <sniprintf>
 80084b0:	4603      	mov	r3, r0
 80084b2:	4a4a      	ldr	r2, [pc, #296]	@ (80085dc <task_adc_init+0x1dc>)
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	4b47      	ldr	r3, [pc, #284]	@ (80085d4 <task_adc_init+0x1d4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff fc2a 	bl	8007d14 <logger_log_print_>
 80084c0:	b662      	cpsie	i
 80084c2:	b672      	cpsid	i
 80084c4:	4b43      	ldr	r3, [pc, #268]	@ (80085d4 <task_adc_init+0x1d4>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a46      	ldr	r2, [pc, #280]	@ (80085e4 <task_adc_init+0x1e4>)
 80084ca:	213f      	movs	r1, #63	@ 0x3f
 80084cc:	4618      	mov	r0, r3
 80084ce:	f003 fd45 	bl	800bf5c <sniprintf>
 80084d2:	4603      	mov	r3, r0
 80084d4:	4a41      	ldr	r2, [pc, #260]	@ (80085dc <task_adc_init+0x1dc>)
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	4b3e      	ldr	r3, [pc, #248]	@ (80085d4 <task_adc_init+0x1d4>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff fc19 	bl	8007d14 <logger_log_print_>
 80084e2:	b662      	cpsie	i
    LOGGER_INFO("  %s is a %s", GET_NAME(task_adc_update), p_task_adc_);
 80084e4:	b672      	cpsid	i
 80084e6:	4b3b      	ldr	r3, [pc, #236]	@ (80085d4 <task_adc_init+0x1d4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a3b      	ldr	r2, [pc, #236]	@ (80085d8 <task_adc_init+0x1d8>)
 80084ec:	213f      	movs	r1, #63	@ 0x3f
 80084ee:	4618      	mov	r0, r3
 80084f0:	f003 fd34 	bl	800bf5c <sniprintf>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4a39      	ldr	r2, [pc, #228]	@ (80085dc <task_adc_init+0x1dc>)
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	4b36      	ldr	r3, [pc, #216]	@ (80085d4 <task_adc_init+0x1d4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fc08 	bl	8007d14 <logger_log_print_>
 8008504:	b662      	cpsie	i
 8008506:	b672      	cpsid	i
 8008508:	4b32      	ldr	r3, [pc, #200]	@ (80085d4 <task_adc_init+0x1d4>)
 800850a:	6818      	ldr	r0, [r3, #0]
 800850c:	4b39      	ldr	r3, [pc, #228]	@ (80085f4 <task_adc_init+0x1f4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	4b39      	ldr	r3, [pc, #228]	@ (80085f8 <task_adc_init+0x1f8>)
 8008514:	4a39      	ldr	r2, [pc, #228]	@ (80085fc <task_adc_init+0x1fc>)
 8008516:	213f      	movs	r1, #63	@ 0x3f
 8008518:	f003 fd20 	bl	800bf5c <sniprintf>
 800851c:	4603      	mov	r3, r0
 800851e:	4a2f      	ldr	r2, [pc, #188]	@ (80085dc <task_adc_init+0x1dc>)
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	4b2c      	ldr	r3, [pc, #176]	@ (80085d4 <task_adc_init+0x1d4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7ff fbf4 	bl	8007d14 <logger_log_print_>
 800852c:	b662      	cpsie	i
 800852e:	b672      	cpsid	i
 8008530:	4b28      	ldr	r3, [pc, #160]	@ (80085d4 <task_adc_init+0x1d4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2b      	ldr	r2, [pc, #172]	@ (80085e4 <task_adc_init+0x1e4>)
 8008536:	213f      	movs	r1, #63	@ 0x3f
 8008538:	4618      	mov	r0, r3
 800853a:	f003 fd0f 	bl	800bf5c <sniprintf>
 800853e:	4603      	mov	r3, r0
 8008540:	4a26      	ldr	r2, [pc, #152]	@ (80085dc <task_adc_init+0x1dc>)
 8008542:	6013      	str	r3, [r2, #0]
 8008544:	4b23      	ldr	r3, [pc, #140]	@ (80085d4 <task_adc_init+0x1d4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fbe3 	bl	8007d14 <logger_log_print_>
 800854e:	b662      	cpsie	i

    g_task_adc_cnt = G_TASK_ADC_CNT_INI; //reinicia contador global de ejecuciones de tareas adc en 0 
 8008550:	4b2b      	ldr	r3, [pc, #172]	@ (8008600 <task_adc_init+0x200>)
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
    LOGGER_INFO("   %s = %lu", GET_NAME(g_task_adc_cnt), g_task_adc_cnt);
 8008556:	b672      	cpsid	i
 8008558:	4b1e      	ldr	r3, [pc, #120]	@ (80085d4 <task_adc_init+0x1d4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a1e      	ldr	r2, [pc, #120]	@ (80085d8 <task_adc_init+0x1d8>)
 800855e:	213f      	movs	r1, #63	@ 0x3f
 8008560:	4618      	mov	r0, r3
 8008562:	f003 fcfb 	bl	800bf5c <sniprintf>
 8008566:	4603      	mov	r3, r0
 8008568:	4a1c      	ldr	r2, [pc, #112]	@ (80085dc <task_adc_init+0x1dc>)
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	4b19      	ldr	r3, [pc, #100]	@ (80085d4 <task_adc_init+0x1d4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fbcf 	bl	8007d14 <logger_log_print_>
 8008576:	b662      	cpsie	i
 8008578:	b672      	cpsid	i
 800857a:	4b16      	ldr	r3, [pc, #88]	@ (80085d4 <task_adc_init+0x1d4>)
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	4b20      	ldr	r3, [pc, #128]	@ (8008600 <task_adc_init+0x200>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	4b1f      	ldr	r3, [pc, #124]	@ (8008604 <task_adc_init+0x204>)
 8008586:	4a20      	ldr	r2, [pc, #128]	@ (8008608 <task_adc_init+0x208>)
 8008588:	213f      	movs	r1, #63	@ 0x3f
 800858a:	f003 fce7 	bl	800bf5c <sniprintf>
 800858e:	4603      	mov	r3, r0
 8008590:	4a12      	ldr	r2, [pc, #72]	@ (80085dc <task_adc_init+0x1dc>)
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	4b0f      	ldr	r3, [pc, #60]	@ (80085d4 <task_adc_init+0x1d4>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff fbbb 	bl	8007d14 <logger_log_print_>
 800859e:	b662      	cpsie	i
 80085a0:	b672      	cpsid	i
 80085a2:	4b0c      	ldr	r3, [pc, #48]	@ (80085d4 <task_adc_init+0x1d4>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a0f      	ldr	r2, [pc, #60]	@ (80085e4 <task_adc_init+0x1e4>)
 80085a8:	213f      	movs	r1, #63	@ 0x3f
 80085aa:	4618      	mov	r0, r3
 80085ac:	f003 fcd6 	bl	800bf5c <sniprintf>
 80085b0:	4603      	mov	r3, r0
 80085b2:	4a0a      	ldr	r2, [pc, #40]	@ (80085dc <task_adc_init+0x1dc>)
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	4b07      	ldr	r3, [pc, #28]	@ (80085d4 <task_adc_init+0x1d4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff fbaa 	bl	8007d14 <logger_log_print_>
 80085c0:	b662      	cpsie	i
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000548 	.word	0x20000548
 80085d0:	2000028c 	.word	0x2000028c
 80085d4:	0800f2d0 	.word	0x0800f2d0
 80085d8:	0800ead0 	.word	0x0800ead0
 80085dc:	20000534 	.word	0x20000534
 80085e0:	0800ead8 	.word	0x0800ead8
 80085e4:	0800eadc 	.word	0x0800eadc
 80085e8:	20000020 	.word	0x20000020
 80085ec:	0800eae0 	.word	0x0800eae0
 80085f0:	0800eaf0 	.word	0x0800eaf0
 80085f4:	20000024 	.word	0x20000024
 80085f8:	0800eb08 	.word	0x0800eb08
 80085fc:	0800eb18 	.word	0x0800eb18
 8008600:	20000540 	.word	0x20000540
 8008604:	0800eb28 	.word	0x0800eb28
 8008608:	0800eb38 	.word	0x0800eb38

0800860c <button_process>:
    {BOTON3_GPIO_Port, BOTON3_Pin, BUTTON_RELEASED, false, 0}
};

/********************** FSM proceso de botón individual ******************/
static button_event_t button_process(Button* btn) //fsm individual por boton
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
    uint32_t now = HAL_GetTick(); 
 8008614:	f7f9 fb30 	bl	8001c78 <HAL_GetTick>
 8008618:	60f8      	str	r0, [r7, #12]
    bool lectura = HAL_GPIO_ReadPin(btn->port, btn->pin);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	889b      	ldrh	r3, [r3, #4]
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f7fa fcfb 	bl	8003020 <HAL_GPIO_ReadPin>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	bf14      	ite	ne
 8008630:	2301      	movne	r3, #1
 8008632:	2300      	moveq	r3, #0
 8008634:	72fb      	strb	r3, [r7, #11]
    //guarda lo que lee 

    if (lectura != btn->last_read) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	79db      	ldrb	r3, [r3, #7]
 800863a:	7afa      	ldrb	r2, [r7, #11]
 800863c:	429a      	cmp	r2, r3
 800863e:	d005      	beq.n	800864c <button_process+0x40>
        btn->last_change_time = now;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	609a      	str	r2, [r3, #8]
        btn->last_read = lectura;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7afa      	ldrb	r2, [r7, #11]
 800864a:	71da      	strb	r2, [r3, #7]
    }
    //si cambio respecto de ultima lectura actualiza 

    if ((now - btn->last_change_time) > DEBOUNCE_TIME_MS) {
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b14      	cmp	r3, #20
 8008656:	d91c      	bls.n	8008692 <button_process+0x86>
        switch (btn->state) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	799b      	ldrb	r3, [r3, #6]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <button_process+0x5a>
 8008660:	2b01      	cmp	r3, #1
 8008662:	d008      	beq.n	8008676 <button_process+0x6a>
 8008664:	e015      	b.n	8008692 <button_process+0x86>
            case BUTTON_RELEASED:
                if (lectura == GPIO_PIN_SET) {
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00f      	beq.n	800868c <button_process+0x80>
                    btn->state = BUTTON_PRESSED;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	719a      	strb	r2, [r3, #6]
                    return EVENT_PRESS;
 8008672:	2301      	movs	r3, #1
 8008674:	e00e      	b.n	8008694 <button_process+0x88>
                    //si estaba 'released' ahora cambia a 'pressed'
                }
                break;
            case BUTTON_PRESSED:
                if (lectura == GPIO_PIN_RESET) {
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	f083 0301 	eor.w	r3, r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d006      	beq.n	8008690 <button_process+0x84>
                    btn->state = BUTTON_RELEASED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	719a      	strb	r2, [r3, #6]
                    return EVENT_RELEASE;
 8008688:	2302      	movs	r3, #2
 800868a:	e003      	b.n	8008694 <button_process+0x88>
                break;
 800868c:	bf00      	nop
 800868e:	e000      	b.n	8008692 <button_process+0x86>
                    //si estaba 'pressed' ahora cambia a 'released'
                }
                break;
 8008690:	bf00      	nop
        }
    }

    return EVENTO_NONE;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <boton1_presionado>:

/********************** API pública para FSM externas ******************/
bool boton1_presionado(void) { return botones[0].state == BUTTON_PRESSED; } //consulta si boton 1 esta siendo presionado
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
 80086a0:	4b05      	ldr	r3, [pc, #20]	@ (80086b8 <boton1_presionado+0x1c>)
 80086a2:	799b      	ldrb	r3, [r3, #6]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	bf0c      	ite	eq
 80086a8:	2301      	moveq	r3, #1
 80086aa:	2300      	movne	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	4618      	mov	r0, r3
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bc80      	pop	{r7}
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000030 	.word	0x20000030

080086bc <boton2_presionado>:
bool boton2_presionado(void) { return botones[1].state == BUTTON_PRESSED; } //consulta si boton 2 esta siendo presionado
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
 80086c0:	4b05      	ldr	r3, [pc, #20]	@ (80086d8 <boton2_presionado+0x1c>)
 80086c2:	7c9b      	ldrb	r3, [r3, #18]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	bf0c      	ite	eq
 80086c8:	2301      	moveq	r3, #1
 80086ca:	2300      	movne	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4618      	mov	r0, r3
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bc80      	pop	{r7}
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	20000030 	.word	0x20000030

080086dc <boton3_presionado>:
bool boton3_presionado(void) { return botones[2].state == BUTTON_PRESSED; } //consulta si boton 3 esta siendo presionado
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
 80086e0:	4b05      	ldr	r3, [pc, #20]	@ (80086f8 <boton3_presionado+0x1c>)
 80086e2:	7f9b      	ldrb	r3, [r3, #30]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	bf0c      	ite	eq
 80086e8:	2301      	moveq	r3, #1
 80086ea:	2300      	movne	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	4618      	mov	r0, r3
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bc80      	pop	{r7}
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	20000030 	.word	0x20000030

080086fc <boton1_falling_edge>:

bool boton1_falling_edge(void) //consulta si se detecto flanco descendente (press-->release)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
    static bool last = false;
    bool actual = HAL_GPIO_ReadPin(botones[0].port, botones[0].pin);
 8008702:	4b14      	ldr	r3, [pc, #80]	@ (8008754 <boton1_falling_edge+0x58>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a13      	ldr	r2, [pc, #76]	@ (8008754 <boton1_falling_edge+0x58>)
 8008708:	8892      	ldrh	r2, [r2, #4]
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f7fa fc87 	bl	8003020 <HAL_GPIO_ReadPin>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	bf14      	ite	ne
 8008718:	2301      	movne	r3, #1
 800871a:	2300      	moveq	r3, #0
 800871c:	71fb      	strb	r3, [r7, #7]
    bool flanco = (last == true && actual == false);
 800871e:	4b0e      	ldr	r3, [pc, #56]	@ (8008758 <boton1_falling_edge+0x5c>)
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <boton1_falling_edge+0x3a>
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	f083 0301 	eor.w	r3, r3, #1
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <boton1_falling_edge+0x3a>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <boton1_falling_edge+0x3c>
 8008736:	2300      	movs	r3, #0
 8008738:	71bb      	strb	r3, [r7, #6]
 800873a:	79bb      	ldrb	r3, [r7, #6]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	71bb      	strb	r3, [r7, #6]
    last = actual;
 8008742:	4a05      	ldr	r2, [pc, #20]	@ (8008758 <boton1_falling_edge+0x5c>)
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	7013      	strb	r3, [r2, #0]
    return flanco;
 8008748:	79bb      	ldrb	r3, [r7, #6]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000030 	.word	0x20000030
 8008758:	2000056c 	.word	0x2000056c

0800875c <task_botones_update>:

/********************** función principal de actualización ******************/
void task_botones_update() //actualiza info botones
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
    bool b_time_update_required = false; 
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]

    __asm("CPSID i"); //deshabilita interrupciones para codigo bloqueante
 8008766:	b672      	cpsid	i
    if (G_TASK_BOTONES_CNT_INI < g_task_botones_tick_cnt) //compara
 8008768:	4b57      	ldr	r3, [pc, #348]	@ (80088c8 <task_botones_update+0x16c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <task_botones_update+0x22>
    {
        g_task_botones_tick_cnt--; //si hay ticks pendientes lo decrementa
 8008770:	4b55      	ldr	r3, [pc, #340]	@ (80088c8 <task_botones_update+0x16c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3b01      	subs	r3, #1
 8008776:	4a54      	ldr	r2, [pc, #336]	@ (80088c8 <task_botones_update+0x16c>)
 8008778:	6013      	str	r3, [r2, #0]
        b_time_update_required = true; 
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");//habilita interrupciones
 800877e:	b662      	cpsie	i
    //mientras haya ticks pendientes ejecutar tareas
    if (b_time_update_required)
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 809b 	beq.w	80088be <task_botones_update+0x162>
    {
        g_task_botones_cnt++; //incrementar contador de ciclo de tareas
 8008788:	4b50      	ldr	r3, [pc, #320]	@ (80088cc <task_botones_update+0x170>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3301      	adds	r3, #1
 800878e:	4a4f      	ldr	r2, [pc, #316]	@ (80088cc <task_botones_update+0x170>)
 8008790:	6013      	str	r3, [r2, #0]

        // FSM para cada botón
        for (int i = 0; i < NUM_BOTONES; i++) {
 8008792:	2300      	movs	r3, #0
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	e07e      	b.n	8008896 <task_botones_update+0x13a>
            button_event_t evt = button_process(&botones[i]);
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	4613      	mov	r3, r2
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4a4b      	ldr	r2, [pc, #300]	@ (80088d0 <task_botones_update+0x174>)
 80087a4:	4413      	add	r3, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff ff30 	bl	800860c <button_process>
 80087ac:	4603      	mov	r3, r0
 80087ae:	71fb      	strb	r3, [r7, #7]

            switch (evt) {
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d002      	beq.n	80087bc <task_botones_update+0x60>
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d035      	beq.n	8008826 <task_botones_update+0xca>
                    break;
                case EVENT_RELEASE:
                    LOGGER_INFO("Botón %d LIBERADO", i + 1);
                    break;
                default:
                    break;
 80087ba:	e069      	b.n	8008890 <task_botones_update+0x134>
                    LOGGER_INFO("Botón %d PRESIONADO", i + 1);
 80087bc:	b672      	cpsid	i
 80087be:	4b45      	ldr	r3, [pc, #276]	@ (80088d4 <task_botones_update+0x178>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a45      	ldr	r2, [pc, #276]	@ (80088d8 <task_botones_update+0x17c>)
 80087c4:	213f      	movs	r1, #63	@ 0x3f
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 fbc8 	bl	800bf5c <sniprintf>
 80087cc:	4603      	mov	r3, r0
 80087ce:	4a43      	ldr	r2, [pc, #268]	@ (80088dc <task_botones_update+0x180>)
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4b40      	ldr	r3, [pc, #256]	@ (80088d4 <task_botones_update+0x178>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff fa9c 	bl	8007d14 <logger_log_print_>
 80087dc:	b662      	cpsie	i
 80087de:	b672      	cpsid	i
 80087e0:	4b3c      	ldr	r3, [pc, #240]	@ (80088d4 <task_botones_update+0x178>)
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	3301      	adds	r3, #1
 80087e8:	4a3d      	ldr	r2, [pc, #244]	@ (80088e0 <task_botones_update+0x184>)
 80087ea:	213f      	movs	r1, #63	@ 0x3f
 80087ec:	f003 fbb6 	bl	800bf5c <sniprintf>
 80087f0:	4603      	mov	r3, r0
 80087f2:	4a3a      	ldr	r2, [pc, #232]	@ (80088dc <task_botones_update+0x180>)
 80087f4:	6013      	str	r3, [r2, #0]
 80087f6:	4b37      	ldr	r3, [pc, #220]	@ (80088d4 <task_botones_update+0x178>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff fa8a 	bl	8007d14 <logger_log_print_>
 8008800:	b662      	cpsie	i
 8008802:	b672      	cpsid	i
 8008804:	4b33      	ldr	r3, [pc, #204]	@ (80088d4 <task_botones_update+0x178>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a36      	ldr	r2, [pc, #216]	@ (80088e4 <task_botones_update+0x188>)
 800880a:	213f      	movs	r1, #63	@ 0x3f
 800880c:	4618      	mov	r0, r3
 800880e:	f003 fba5 	bl	800bf5c <sniprintf>
 8008812:	4603      	mov	r3, r0
 8008814:	4a31      	ldr	r2, [pc, #196]	@ (80088dc <task_botones_update+0x180>)
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	4b2e      	ldr	r3, [pc, #184]	@ (80088d4 <task_botones_update+0x178>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f7ff fa79 	bl	8007d14 <logger_log_print_>
 8008822:	b662      	cpsie	i
                    break;
 8008824:	e034      	b.n	8008890 <task_botones_update+0x134>
                    LOGGER_INFO("Botón %d LIBERADO", i + 1);
 8008826:	b672      	cpsid	i
 8008828:	4b2a      	ldr	r3, [pc, #168]	@ (80088d4 <task_botones_update+0x178>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a2a      	ldr	r2, [pc, #168]	@ (80088d8 <task_botones_update+0x17c>)
 800882e:	213f      	movs	r1, #63	@ 0x3f
 8008830:	4618      	mov	r0, r3
 8008832:	f003 fb93 	bl	800bf5c <sniprintf>
 8008836:	4603      	mov	r3, r0
 8008838:	4a28      	ldr	r2, [pc, #160]	@ (80088dc <task_botones_update+0x180>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	4b25      	ldr	r3, [pc, #148]	@ (80088d4 <task_botones_update+0x178>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fa67 	bl	8007d14 <logger_log_print_>
 8008846:	b662      	cpsie	i
 8008848:	b672      	cpsid	i
 800884a:	4b22      	ldr	r3, [pc, #136]	@ (80088d4 <task_botones_update+0x178>)
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	3301      	adds	r3, #1
 8008852:	4a25      	ldr	r2, [pc, #148]	@ (80088e8 <task_botones_update+0x18c>)
 8008854:	213f      	movs	r1, #63	@ 0x3f
 8008856:	f003 fb81 	bl	800bf5c <sniprintf>
 800885a:	4603      	mov	r3, r0
 800885c:	4a1f      	ldr	r2, [pc, #124]	@ (80088dc <task_botones_update+0x180>)
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	4b1c      	ldr	r3, [pc, #112]	@ (80088d4 <task_botones_update+0x178>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fa55 	bl	8007d14 <logger_log_print_>
 800886a:	b662      	cpsie	i
 800886c:	b672      	cpsid	i
 800886e:	4b19      	ldr	r3, [pc, #100]	@ (80088d4 <task_botones_update+0x178>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a1c      	ldr	r2, [pc, #112]	@ (80088e4 <task_botones_update+0x188>)
 8008874:	213f      	movs	r1, #63	@ 0x3f
 8008876:	4618      	mov	r0, r3
 8008878:	f003 fb70 	bl	800bf5c <sniprintf>
 800887c:	4603      	mov	r3, r0
 800887e:	4a17      	ldr	r2, [pc, #92]	@ (80088dc <task_botones_update+0x180>)
 8008880:	6013      	str	r3, [r2, #0]
 8008882:	4b14      	ldr	r3, [pc, #80]	@ (80088d4 <task_botones_update+0x178>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fa44 	bl	8007d14 <logger_log_print_>
 800888c:	b662      	cpsie	i
                    break;
 800888e:	bf00      	nop
        for (int i = 0; i < NUM_BOTONES; i++) {
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	3301      	adds	r3, #1
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b02      	cmp	r3, #2
 800889a:	f77f af7d 	ble.w	8008798 <task_botones_update+0x3c>
            }
        }
        __asm("CPSID i"); //deshabilita interrupciones
 800889e:	b672      	cpsid	i
        if (G_TASK_BOTONES_CNT_INI < g_task_botones_tick_cnt) //compara
 80088a0:	4b09      	ldr	r3, [pc, #36]	@ (80088c8 <task_botones_update+0x16c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d007      	beq.n	80088b8 <task_botones_update+0x15c>
        {
            g_task_botones_tick_cnt--; //si hay ticks pendientes lo decrementa 
 80088a8:	4b07      	ldr	r3, [pc, #28]	@ (80088c8 <task_botones_update+0x16c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4a06      	ldr	r2, [pc, #24]	@ (80088c8 <task_botones_update+0x16c>)
 80088b0:	6013      	str	r3, [r2, #0]
            b_time_update_required = true; 
 80088b2:	2301      	movs	r3, #1
 80088b4:	73fb      	strb	r3, [r7, #15]
 80088b6:	e001      	b.n	80088bc <task_botones_update+0x160>
        }
        else
        {
            b_time_update_required = false; //si no quedan ticks pendientes no es necesario actualizar aun
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
        }
        __asm("CPSIE i");//rehabilita interrupciones
 80088bc:	b662      	cpsie	i
    }
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000568 	.word	0x20000568
 80088cc:	20000564 	.word	0x20000564
 80088d0:	20000030 	.word	0x20000030
 80088d4:	0800f2d0 	.word	0x0800f2d0
 80088d8:	0800eb78 	.word	0x0800eb78
 80088dc:	20000534 	.word	0x20000534
 80088e0:	0800eb80 	.word	0x0800eb80
 80088e4:	0800eb98 	.word	0x0800eb98
 80088e8:	0800eb9c 	.word	0x0800eb9c

080088ec <task_botones_init>:

/********************** inicialización **************************/
void task_botones_init() //inicializa botones
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af02      	add	r7, sp, #8
    LOGGER_INFO(" ");
 80088f2:	b672      	cpsid	i
 80088f4:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa8 <task_botones_init+0x1bc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a6c      	ldr	r2, [pc, #432]	@ (8008aac <task_botones_init+0x1c0>)
 80088fa:	213f      	movs	r1, #63	@ 0x3f
 80088fc:	4618      	mov	r0, r3
 80088fe:	f003 fb2d 	bl	800bf5c <sniprintf>
 8008902:	4603      	mov	r3, r0
 8008904:	4a6a      	ldr	r2, [pc, #424]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4b67      	ldr	r3, [pc, #412]	@ (8008aa8 <task_botones_init+0x1bc>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff fa01 	bl	8007d14 <logger_log_print_>
 8008912:	b662      	cpsie	i
 8008914:	b672      	cpsid	i
 8008916:	4b64      	ldr	r3, [pc, #400]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a66      	ldr	r2, [pc, #408]	@ (8008ab4 <task_botones_init+0x1c8>)
 800891c:	213f      	movs	r1, #63	@ 0x3f
 800891e:	4618      	mov	r0, r3
 8008920:	f003 fb1c 	bl	800bf5c <sniprintf>
 8008924:	4603      	mov	r3, r0
 8008926:	4a62      	ldr	r2, [pc, #392]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	4b5f      	ldr	r3, [pc, #380]	@ (8008aa8 <task_botones_init+0x1bc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff f9f0 	bl	8007d14 <logger_log_print_>
 8008934:	b662      	cpsie	i
 8008936:	b672      	cpsid	i
 8008938:	4b5b      	ldr	r3, [pc, #364]	@ (8008aa8 <task_botones_init+0x1bc>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ab8 <task_botones_init+0x1cc>)
 800893e:	213f      	movs	r1, #63	@ 0x3f
 8008940:	4618      	mov	r0, r3
 8008942:	f003 fb0b 	bl	800bf5c <sniprintf>
 8008946:	4603      	mov	r3, r0
 8008948:	4a59      	ldr	r2, [pc, #356]	@ (8008ab0 <task_botones_init+0x1c4>)
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	4b56      	ldr	r3, [pc, #344]	@ (8008aa8 <task_botones_init+0x1bc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff f9df 	bl	8007d14 <logger_log_print_>
 8008956:	b662      	cpsie	i
    LOGGER_INFO("  %s is running - %s", GET_NAME(task_botones_init), p_task_botones);
 8008958:	b672      	cpsid	i
 800895a:	4b53      	ldr	r3, [pc, #332]	@ (8008aa8 <task_botones_init+0x1bc>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a53      	ldr	r2, [pc, #332]	@ (8008aac <task_botones_init+0x1c0>)
 8008960:	213f      	movs	r1, #63	@ 0x3f
 8008962:	4618      	mov	r0, r3
 8008964:	f003 fafa 	bl	800bf5c <sniprintf>
 8008968:	4603      	mov	r3, r0
 800896a:	4a51      	ldr	r2, [pc, #324]	@ (8008ab0 <task_botones_init+0x1c4>)
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	4b4e      	ldr	r3, [pc, #312]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff f9ce 	bl	8007d14 <logger_log_print_>
 8008978:	b662      	cpsie	i
 800897a:	b672      	cpsid	i
 800897c:	4b4a      	ldr	r3, [pc, #296]	@ (8008aa8 <task_botones_init+0x1bc>)
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	4b4e      	ldr	r3, [pc, #312]	@ (8008abc <task_botones_init+0x1d0>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	4b4e      	ldr	r3, [pc, #312]	@ (8008ac0 <task_botones_init+0x1d4>)
 8008988:	4a4e      	ldr	r2, [pc, #312]	@ (8008ac4 <task_botones_init+0x1d8>)
 800898a:	213f      	movs	r1, #63	@ 0x3f
 800898c:	f003 fae6 	bl	800bf5c <sniprintf>
 8008990:	4603      	mov	r3, r0
 8008992:	4a47      	ldr	r2, [pc, #284]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	4b44      	ldr	r3, [pc, #272]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f7ff f9ba 	bl	8007d14 <logger_log_print_>
 80089a0:	b662      	cpsie	i
 80089a2:	b672      	cpsid	i
 80089a4:	4b40      	ldr	r3, [pc, #256]	@ (8008aa8 <task_botones_init+0x1bc>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a43      	ldr	r2, [pc, #268]	@ (8008ab8 <task_botones_init+0x1cc>)
 80089aa:	213f      	movs	r1, #63	@ 0x3f
 80089ac:	4618      	mov	r0, r3
 80089ae:	f003 fad5 	bl	800bf5c <sniprintf>
 80089b2:	4603      	mov	r3, r0
 80089b4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ab0 <task_botones_init+0x1c4>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	4b3b      	ldr	r3, [pc, #236]	@ (8008aa8 <task_botones_init+0x1bc>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff f9a9 	bl	8007d14 <logger_log_print_>
 80089c2:	b662      	cpsie	i
    LOGGER_INFO("  %s is a %s", GET_NAME(task_botones_update), p_task_botones_);
 80089c4:	b672      	cpsid	i
 80089c6:	4b38      	ldr	r3, [pc, #224]	@ (8008aa8 <task_botones_init+0x1bc>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a38      	ldr	r2, [pc, #224]	@ (8008aac <task_botones_init+0x1c0>)
 80089cc:	213f      	movs	r1, #63	@ 0x3f
 80089ce:	4618      	mov	r0, r3
 80089d0:	f003 fac4 	bl	800bf5c <sniprintf>
 80089d4:	4603      	mov	r3, r0
 80089d6:	4a36      	ldr	r2, [pc, #216]	@ (8008ab0 <task_botones_init+0x1c4>)
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	4b33      	ldr	r3, [pc, #204]	@ (8008aa8 <task_botones_init+0x1bc>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff f998 	bl	8007d14 <logger_log_print_>
 80089e4:	b662      	cpsie	i
 80089e6:	b672      	cpsid	i
 80089e8:	4b2f      	ldr	r3, [pc, #188]	@ (8008aa8 <task_botones_init+0x1bc>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	4b36      	ldr	r3, [pc, #216]	@ (8008ac8 <task_botones_init+0x1dc>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4b36      	ldr	r3, [pc, #216]	@ (8008acc <task_botones_init+0x1e0>)
 80089f4:	4a36      	ldr	r2, [pc, #216]	@ (8008ad0 <task_botones_init+0x1e4>)
 80089f6:	213f      	movs	r1, #63	@ 0x3f
 80089f8:	f003 fab0 	bl	800bf5c <sniprintf>
 80089fc:	4603      	mov	r3, r0
 80089fe:	4a2c      	ldr	r2, [pc, #176]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008a00:	6013      	str	r3, [r2, #0]
 8008a02:	4b29      	ldr	r3, [pc, #164]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff f984 	bl	8007d14 <logger_log_print_>
 8008a0c:	b662      	cpsie	i
 8008a0e:	b672      	cpsid	i
 8008a10:	4b25      	ldr	r3, [pc, #148]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a28      	ldr	r2, [pc, #160]	@ (8008ab8 <task_botones_init+0x1cc>)
 8008a16:	213f      	movs	r1, #63	@ 0x3f
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f003 fa9f 	bl	800bf5c <sniprintf>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4a23      	ldr	r2, [pc, #140]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	4b20      	ldr	r3, [pc, #128]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff f973 	bl	8007d14 <logger_log_print_>
 8008a2e:	b662      	cpsie	i
    g_task_botones_cnt = G_TASK_BOTONES_CNT_INI;
 8008a30:	4b28      	ldr	r3, [pc, #160]	@ (8008ad4 <task_botones_init+0x1e8>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
    LOGGER_INFO("   %s = %lu", GET_NAME(g_task_botones_cnt), g_task_botones_cnt);
 8008a36:	b672      	cpsid	i
 8008a38:	4b1b      	ldr	r3, [pc, #108]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aac <task_botones_init+0x1c0>)
 8008a3e:	213f      	movs	r1, #63	@ 0x3f
 8008a40:	4618      	mov	r0, r3
 8008a42:	f003 fa8b 	bl	800bf5c <sniprintf>
 8008a46:	4603      	mov	r3, r0
 8008a48:	4a19      	ldr	r2, [pc, #100]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	4b16      	ldr	r3, [pc, #88]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff f95f 	bl	8007d14 <logger_log_print_>
 8008a56:	b662      	cpsie	i
 8008a58:	b672      	cpsid	i
 8008a5a:	4b13      	ldr	r3, [pc, #76]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a5c:	6818      	ldr	r0, [r3, #0]
 8008a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8008ad4 <task_botones_init+0x1e8>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad8 <task_botones_init+0x1ec>)
 8008a66:	4a1d      	ldr	r2, [pc, #116]	@ (8008adc <task_botones_init+0x1f0>)
 8008a68:	213f      	movs	r1, #63	@ 0x3f
 8008a6a:	f003 fa77 	bl	800bf5c <sniprintf>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	4a0f      	ldr	r2, [pc, #60]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff f94b 	bl	8007d14 <logger_log_print_>
 8008a7e:	b662      	cpsie	i
 8008a80:	b672      	cpsid	i
 8008a82:	4b09      	ldr	r3, [pc, #36]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a0c      	ldr	r2, [pc, #48]	@ (8008ab8 <task_botones_init+0x1cc>)
 8008a88:	213f      	movs	r1, #63	@ 0x3f
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f003 fa66 	bl	800bf5c <sniprintf>
 8008a90:	4603      	mov	r3, r0
 8008a92:	4a07      	ldr	r2, [pc, #28]	@ (8008ab0 <task_botones_init+0x1c4>)
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	4b04      	ldr	r3, [pc, #16]	@ (8008aa8 <task_botones_init+0x1bc>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff f93a 	bl	8007d14 <logger_log_print_>
 8008aa0:	b662      	cpsie	i
}
 8008aa2:	bf00      	nop
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	0800f2d0 	.word	0x0800f2d0
 8008aac:	0800eb78 	.word	0x0800eb78
 8008ab0:	20000534 	.word	0x20000534
 8008ab4:	0800ebb0 	.word	0x0800ebb0
 8008ab8:	0800eb98 	.word	0x0800eb98
 8008abc:	20000028 	.word	0x20000028
 8008ac0:	0800ebb4 	.word	0x0800ebb4
 8008ac4:	0800ebc8 	.word	0x0800ebc8
 8008ac8:	2000002c 	.word	0x2000002c
 8008acc:	0800ebe0 	.word	0x0800ebe0
 8008ad0:	0800ebf4 	.word	0x0800ebf4
 8008ad4:	20000564 	.word	0x20000564
 8008ad8:	0800ec04 	.word	0x0800ec04
 8008adc:	0800ec18 	.word	0x0800ec18

08008ae0 <__NVIC_SystemReset>:
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008ae4:	f3bf 8f4f 	dsb	sy
}
 8008ae8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008aea:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <__NVIC_SystemReset+0x24>)
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008af2:	4904      	ldr	r1, [pc, #16]	@ (8008b04 <__NVIC_SystemReset+0x24>)
 8008af4:	4b04      	ldr	r3, [pc, #16]	@ (8008b08 <__NVIC_SystemReset+0x28>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008afa:	f3bf 8f4f 	dsb	sy
}
 8008afe:	bf00      	nop
    __NOP();
 8008b00:	bf00      	nop
 8008b02:	e7fd      	b.n	8008b00 <__NVIC_SystemReset+0x20>
 8008b04:	e000ed00 	.word	0xe000ed00
 8008b08:	05fa0004 	.word	0x05fa0004

08008b0c <task_cafe_fsm_init>:
tipo_de_cafe cafe_seleccionado = CAFE_LATTE;
estados estado_actual = estado_off;
uint32_t ultima_interaccion_ms;

void task_cafe_fsm_init(void *parameters)//inicializa la FSM, reinicia contadores y timeout
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	6078      	str	r0, [r7, #4]

    LOGGER_INFO(" ");
 8008b14:	b672      	cpsid	i
 8008b16:	4b6f      	ldr	r3, [pc, #444]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8008cd8 <task_cafe_fsm_init+0x1cc>)
 8008b1c:	213f      	movs	r1, #63	@ 0x3f
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f003 fa1c 	bl	800bf5c <sniprintf>
 8008b24:	4603      	mov	r3, r0
 8008b26:	4a6d      	ldr	r2, [pc, #436]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff f8f0 	bl	8007d14 <logger_log_print_>
 8008b34:	b662      	cpsie	i
 8008b36:	b672      	cpsid	i
 8008b38:	4b66      	ldr	r3, [pc, #408]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a68      	ldr	r2, [pc, #416]	@ (8008ce0 <task_cafe_fsm_init+0x1d4>)
 8008b3e:	213f      	movs	r1, #63	@ 0x3f
 8008b40:	4618      	mov	r0, r3
 8008b42:	f003 fa0b 	bl	800bf5c <sniprintf>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4a64      	ldr	r2, [pc, #400]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	4b61      	ldr	r3, [pc, #388]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7ff f8df 	bl	8007d14 <logger_log_print_>
 8008b56:	b662      	cpsie	i
 8008b58:	b672      	cpsid	i
 8008b5a:	4b5e      	ldr	r3, [pc, #376]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a61      	ldr	r2, [pc, #388]	@ (8008ce4 <task_cafe_fsm_init+0x1d8>)
 8008b60:	213f      	movs	r1, #63	@ 0x3f
 8008b62:	4618      	mov	r0, r3
 8008b64:	f003 f9fa 	bl	800bf5c <sniprintf>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	4b59      	ldr	r3, [pc, #356]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff f8ce 	bl	8007d14 <logger_log_print_>
 8008b78:	b662      	cpsie	i
    LOGGER_INFO("  %s is running - %s", GET_NAME(task_cafe_fsm_init), p_task_fsm);
 8008b7a:	b672      	cpsid	i
 8008b7c:	4b55      	ldr	r3, [pc, #340]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a55      	ldr	r2, [pc, #340]	@ (8008cd8 <task_cafe_fsm_init+0x1cc>)
 8008b82:	213f      	movs	r1, #63	@ 0x3f
 8008b84:	4618      	mov	r0, r3
 8008b86:	f003 f9e9 	bl	800bf5c <sniprintf>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	4a53      	ldr	r2, [pc, #332]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	4b50      	ldr	r3, [pc, #320]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff f8bd 	bl	8007d14 <logger_log_print_>
 8008b9a:	b662      	cpsie	i
 8008b9c:	b672      	cpsid	i
 8008b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	4b51      	ldr	r3, [pc, #324]	@ (8008ce8 <task_cafe_fsm_init+0x1dc>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	4b50      	ldr	r3, [pc, #320]	@ (8008cec <task_cafe_fsm_init+0x1e0>)
 8008baa:	4a51      	ldr	r2, [pc, #324]	@ (8008cf0 <task_cafe_fsm_init+0x1e4>)
 8008bac:	213f      	movs	r1, #63	@ 0x3f
 8008bae:	f003 f9d5 	bl	800bf5c <sniprintf>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	4a49      	ldr	r2, [pc, #292]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	4b46      	ldr	r3, [pc, #280]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff f8a9 	bl	8007d14 <logger_log_print_>
 8008bc2:	b662      	cpsie	i
 8008bc4:	b672      	cpsid	i
 8008bc6:	4b43      	ldr	r3, [pc, #268]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a46      	ldr	r2, [pc, #280]	@ (8008ce4 <task_cafe_fsm_init+0x1d8>)
 8008bcc:	213f      	movs	r1, #63	@ 0x3f
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f003 f9c4 	bl	800bf5c <sniprintf>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	4a41      	ldr	r2, [pc, #260]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff f898 	bl	8007d14 <logger_log_print_>
 8008be4:	b662      	cpsie	i
    LOGGER_INFO("  %s is a %s", GET_NAME(task_cafe_fsm), p_task_fsm_);
 8008be6:	b672      	cpsid	i
 8008be8:	4b3a      	ldr	r3, [pc, #232]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a3a      	ldr	r2, [pc, #232]	@ (8008cd8 <task_cafe_fsm_init+0x1cc>)
 8008bee:	213f      	movs	r1, #63	@ 0x3f
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f003 f9b3 	bl	800bf5c <sniprintf>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	4a38      	ldr	r2, [pc, #224]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	4b35      	ldr	r3, [pc, #212]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff f887 	bl	8007d14 <logger_log_print_>
 8008c06:	b662      	cpsie	i
 8008c08:	b672      	cpsid	i
 8008c0a:	4b32      	ldr	r3, [pc, #200]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	4b39      	ldr	r3, [pc, #228]	@ (8008cf4 <task_cafe_fsm_init+0x1e8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4b38      	ldr	r3, [pc, #224]	@ (8008cf8 <task_cafe_fsm_init+0x1ec>)
 8008c16:	4a39      	ldr	r2, [pc, #228]	@ (8008cfc <task_cafe_fsm_init+0x1f0>)
 8008c18:	213f      	movs	r1, #63	@ 0x3f
 8008c1a:	f003 f99f 	bl	800bf5c <sniprintf>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4a2e      	ldr	r2, [pc, #184]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008c22:	6013      	str	r3, [r2, #0]
 8008c24:	4b2b      	ldr	r3, [pc, #172]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff f873 	bl	8007d14 <logger_log_print_>
 8008c2e:	b662      	cpsie	i
 8008c30:	b672      	cpsid	i
 8008c32:	4b28      	ldr	r3, [pc, #160]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a2b      	ldr	r2, [pc, #172]	@ (8008ce4 <task_cafe_fsm_init+0x1d8>)
 8008c38:	213f      	movs	r1, #63	@ 0x3f
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f003 f98e 	bl	800bf5c <sniprintf>
 8008c40:	4603      	mov	r3, r0
 8008c42:	4a26      	ldr	r2, [pc, #152]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008c44:	6013      	str	r3, [r2, #0]
 8008c46:	4b23      	ldr	r3, [pc, #140]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7ff f862 	bl	8007d14 <logger_log_print_>
 8008c50:	b662      	cpsie	i

    g_task_cafe_fsm_cnt = G_TASK_FSM_CNT_INI;
 8008c52:	4b2b      	ldr	r3, [pc, #172]	@ (8008d00 <task_cafe_fsm_init+0x1f4>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]
    ultima_interaccion_ms = 0;
 8008c58:	4b2a      	ldr	r3, [pc, #168]	@ (8008d04 <task_cafe_fsm_init+0x1f8>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	601a      	str	r2, [r3, #0]
    LOGGER_INFO("   %s = %lu", GET_NAME(g_task_cafe_fsm_cnt), g_task_cafe_fsm_cnt);
 8008c5e:	b672      	cpsid	i
 8008c60:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1c      	ldr	r2, [pc, #112]	@ (8008cd8 <task_cafe_fsm_init+0x1cc>)
 8008c66:	213f      	movs	r1, #63	@ 0x3f
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f003 f977 	bl	800bf5c <sniprintf>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4a1a      	ldr	r2, [pc, #104]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	4b17      	ldr	r3, [pc, #92]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff f84b 	bl	8007d14 <logger_log_print_>
 8008c7e:	b662      	cpsie	i
 8008c80:	b672      	cpsid	i
 8008c82:	4b14      	ldr	r3, [pc, #80]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	4b1e      	ldr	r3, [pc, #120]	@ (8008d00 <task_cafe_fsm_init+0x1f4>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8008d08 <task_cafe_fsm_init+0x1fc>)
 8008c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8008d0c <task_cafe_fsm_init+0x200>)
 8008c90:	213f      	movs	r1, #63	@ 0x3f
 8008c92:	f003 f963 	bl	800bf5c <sniprintf>
 8008c96:	4603      	mov	r3, r0
 8008c98:	4a10      	ldr	r2, [pc, #64]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008c9a:	6013      	str	r3, [r2, #0]
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff f837 	bl	8007d14 <logger_log_print_>
 8008ca6:	b662      	cpsie	i
 8008ca8:	b672      	cpsid	i
 8008caa:	4b0a      	ldr	r3, [pc, #40]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce4 <task_cafe_fsm_init+0x1d8>)
 8008cb0:	213f      	movs	r1, #63	@ 0x3f
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f003 f952 	bl	800bf5c <sniprintf>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	4a08      	ldr	r2, [pc, #32]	@ (8008cdc <task_cafe_fsm_init+0x1d0>)
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4b05      	ldr	r3, [pc, #20]	@ (8008cd4 <task_cafe_fsm_init+0x1c8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff f826 	bl	8007d14 <logger_log_print_>
 8008cc8:	b662      	cpsie	i

}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	0800f2d0 	.word	0x0800f2d0
 8008cd8:	0800ec64 	.word	0x0800ec64
 8008cdc:	20000534 	.word	0x20000534
 8008ce0:	0800ec6c 	.word	0x0800ec6c
 8008ce4:	0800ec70 	.word	0x0800ec70
 8008ce8:	20000054 	.word	0x20000054
 8008cec:	0800ec74 	.word	0x0800ec74
 8008cf0:	0800ec88 	.word	0x0800ec88
 8008cf4:	20000058 	.word	0x20000058
 8008cf8:	0800eca0 	.word	0x0800eca0
 8008cfc:	0800ecb0 	.word	0x0800ecb0
 8008d00:	20000570 	.word	0x20000570
 8008d04:	20000580 	.word	0x20000580
 8008d08:	0800ecc0 	.word	0x0800ecc0
 8008d0c:	0800ecd4 	.word	0x0800ecd4

08008d10 <sistema_autotest_ok>:

static bool sistema_autotest_ok(void)//devuelve true si todos los test funcionen correctamente
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
    lcd_test();
 8008d14:	f001 fbec 	bl	800a4f0 <lcd_test>
    return  sensor_ultrasonico_test()
 8008d18:	f001 ff6e 	bl	800abf8 <sensor_ultrasonico_test>
 8008d1c:	4603      	mov	r3, r0
         && eeprom_test()
        && potenciometro_test()
         && test_leds();
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d010      	beq.n	8008d44 <sistema_autotest_ok+0x34>
         && eeprom_test()
 8008d22:	f002 f8b3 	bl	800ae8c <eeprom_test>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00b      	beq.n	8008d44 <sistema_autotest_ok+0x34>
        && potenciometro_test()
 8008d2c:	f7ff fb1a 	bl	8008364 <potenciometro_test>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <sistema_autotest_ok+0x34>
         && test_leds();
 8008d36:	f7ff f9b9 	bl	80080ac <test_leds>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <sistema_autotest_ok+0x34>
 8008d40:	2301      	movs	r3, #1
 8008d42:	e000      	b.n	8008d46 <sistema_autotest_ok+0x36>
 8008d44:	2300      	movs	r3, #0
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	b2db      	uxtb	r3, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <detectar_evento>:

evento_t detectar_evento(void) //evalua posibles inputs (botones+joystick)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
    if (boton1_falling_edge()) return EVENT_BOTON1_EDGE;
 8008d54:	f7ff fcd2 	bl	80086fc <boton1_falling_edge>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <detectar_evento+0x12>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e039      	b.n	8008dd6 <detectar_evento+0x86>
    if (boton1_presionado())   return EVENT_BOTON1_PRESS;
 8008d62:	f7ff fc9b 	bl	800869c <boton1_presionado>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <detectar_evento+0x20>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e032      	b.n	8008dd6 <detectar_evento+0x86>
    if (boton2_presionado())   return EVENT_BOTON2_PRESS;
 8008d70:	f7ff fca4 	bl	80086bc <boton2_presionado>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <detectar_evento+0x2e>
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e02b      	b.n	8008dd6 <detectar_evento+0x86>
    if (boton3_presionado())   return EVENT_BOTON3_PRESS;
 8008d7e:	f7ff fcad 	bl	80086dc <boton3_presionado>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <detectar_evento+0x3c>
 8008d88:	2304      	movs	r3, #4
 8008d8a:	e024      	b.n	8008dd6 <detectar_evento+0x86>
    if (joystick_arriba())     return EVENT_JOY_UP;
 8008d8c:	f7ff fac4 	bl	8008318 <joystick_arriba>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <detectar_evento+0x4a>
 8008d96:	2305      	movs	r3, #5
 8008d98:	e01d      	b.n	8008dd6 <detectar_evento+0x86>
    if (joystick_abajo())      return EVENT_JOY_DOWN;
 8008d9a:	f7ff fac6 	bl	800832a <joystick_abajo>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <detectar_evento+0x58>
 8008da4:	2306      	movs	r3, #6
 8008da6:	e016      	b.n	8008dd6 <detectar_evento+0x86>
    if (joystick_izquierda())  return EVENT_JOY_LEFT;
 8008da8:	f7ff fad2 	bl	8008350 <joystick_izquierda>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <detectar_evento+0x66>
 8008db2:	2307      	movs	r3, #7
 8008db4:	e00f      	b.n	8008dd6 <detectar_evento+0x86>
    if (joystick_derecha())    return EVENT_JOY_RIGHT;
 8008db6:	f7ff fac2 	bl	800833e <joystick_derecha>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <detectar_evento+0x74>
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	e008      	b.n	8008dd6 <detectar_evento+0x86>
    if (ultima_interaccion_ms > IDLE_TIMEOUT_MS) return EVENT_TIMEOUT; //si sistema inactivo por mas de 30s devuelve timeout
 8008dc4:	4b05      	ldr	r3, [pc, #20]	@ (8008ddc <detectar_evento+0x8c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f247 5230 	movw	r2, #30000	@ 0x7530
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d901      	bls.n	8008dd4 <detectar_evento+0x84>
 8008dd0:	230a      	movs	r3, #10
 8008dd2:	e000      	b.n	8008dd6 <detectar_evento+0x86>
    return EVENT_NONE; //si no ocurre nada event_none
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	20000580 	.word	0x20000580

08008de0 <fsm_off_handle>:

static void fsm_off_handle(evento_t e)//cuando sist en off
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]
    switch (fsm_subestado) {
 8008dea:	4b47      	ldr	r3, [pc, #284]	@ (8008f08 <fsm_off_handle+0x128>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b05      	cmp	r3, #5
 8008df0:	f200 8086 	bhi.w	8008f00 <fsm_off_handle+0x120>
 8008df4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dfc <fsm_off_handle+0x1c>)
 8008df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfa:	bf00      	nop
 8008dfc:	08008e15 	.word	0x08008e15
 8008e00:	08008e33 	.word	0x08008e33
 8008e04:	08008e69 	.word	0x08008e69
 8008e08:	08008e97 	.word	0x08008e97
 8008e0c:	08008eb5 	.word	0x08008eb5
 8008e10:	08008ecd 	.word	0x08008ecd
        case 0: //estamos en estado idle
            mostrar_estado_leds(estado_off); 
 8008e14:	2000      	movs	r0, #0
 8008e16:	f7ff f999 	bl	800814c <mostrar_estado_leds>
            lcd_print_if_changed(0, "Presione Start  ");
 8008e1a:	493c      	ldr	r1, [pc, #240]	@ (8008f0c <fsm_off_handle+0x12c>)
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f001 fa71 	bl	800a304 <lcd_print_if_changed>
            lcd_print_if_changed(1, "Mod Fab: BotAzul");
 8008e22:	493b      	ldr	r1, [pc, #236]	@ (8008f10 <fsm_off_handle+0x130>)
 8008e24:	2001      	movs	r0, #1
 8008e26:	f001 fa6d 	bl	800a304 <lcd_print_if_changed>
            fsm_subestado = 1;
 8008e2a:	4b37      	ldr	r3, [pc, #220]	@ (8008f08 <fsm_off_handle+0x128>)
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	701a      	strb	r2, [r3, #0]
            break;
 8008e30:	e066      	b.n	8008f00 <fsm_off_handle+0x120>

        case 1: //se aprotó boton
            if (e == EVENT_BOTON1_EDGE) {
 8008e32:	79fb      	ldrb	r3, [r7, #7]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d109      	bne.n	8008e4c <fsm_off_handle+0x6c>
                lcd_print_if_changed(0, "Cargando...");
 8008e38:	4936      	ldr	r1, [pc, #216]	@ (8008f14 <fsm_off_handle+0x134>)
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	f001 fa62 	bl	800a304 <lcd_print_if_changed>
                eeprom_start_read();
 8008e40:	f002 f9b6 	bl	800b1b0 <eeprom_start_read>
                fsm_subestado = 2;
 8008e44:	4b30      	ldr	r3, [pc, #192]	@ (8008f08 <fsm_off_handle+0x128>)
 8008e46:	2202      	movs	r2, #2
 8008e48:	701a      	strb	r2, [r3, #0]
                lcd_print_if_changed(0, "Modo FAB...");
                ultima_interaccion_ms = 0;
                fsm_subestado = 3;
				//se entra a modo fabrica
            }
            break;
 8008e4a:	e050      	b.n	8008eee <fsm_off_handle+0x10e>
            else if (e == EVENT_BOTON3_PRESS) {
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d14d      	bne.n	8008eee <fsm_off_handle+0x10e>
                lcd_print_if_changed(0, "Modo FAB...");
 8008e52:	4931      	ldr	r1, [pc, #196]	@ (8008f18 <fsm_off_handle+0x138>)
 8008e54:	2000      	movs	r0, #0
 8008e56:	f001 fa55 	bl	800a304 <lcd_print_if_changed>
                ultima_interaccion_ms = 0;
 8008e5a:	4b30      	ldr	r3, [pc, #192]	@ (8008f1c <fsm_off_handle+0x13c>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
                fsm_subestado = 3;
 8008e60:	4b29      	ldr	r3, [pc, #164]	@ (8008f08 <fsm_off_handle+0x128>)
 8008e62:	2203      	movs	r2, #3
 8008e64:	701a      	strb	r2, [r3, #0]
            break;
 8008e66:	e042      	b.n	8008eee <fsm_off_handle+0x10e>

        case 2: //termino de cargar la eeprom
            if (eeprom_terminado) {
 8008e68:	4b2d      	ldr	r3, [pc, #180]	@ (8008f20 <fsm_off_handle+0x140>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d03f      	beq.n	8008ef2 <fsm_off_handle+0x112>
            	eeprom_terminado = 0;
 8008e72:	4b2b      	ldr	r3, [pc, #172]	@ (8008f20 <fsm_off_handle+0x140>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
                lcd_print_if_changed(0, "Konnichiwa!!");
 8008e78:	492a      	ldr	r1, [pc, #168]	@ (8008f24 <fsm_off_handle+0x144>)
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f001 fa42 	bl	800a304 <lcd_print_if_changed>
                lcd_print_if_changed(1, "");
 8008e80:	4929      	ldr	r1, [pc, #164]	@ (8008f28 <fsm_off_handle+0x148>)
 8008e82:	2001      	movs	r0, #1
 8008e84:	f001 fa3e 	bl	800a304 <lcd_print_if_changed>
                ultima_interaccion_ms = 0;
 8008e88:	4b24      	ldr	r3, [pc, #144]	@ (8008f1c <fsm_off_handle+0x13c>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
                fsm_subestado = 4;
 8008e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008f08 <fsm_off_handle+0x128>)
 8008e90:	2204      	movs	r2, #4
 8008e92:	701a      	strb	r2, [r3, #0]
				//saludamos :)
            }
            break;
 8008e94:	e02d      	b.n	8008ef2 <fsm_off_handle+0x112>

        case 3: //sigue cargando para edicion
            if (ultima_interaccion_ms >= 1000) {
 8008e96:	4b21      	ldr	r3, [pc, #132]	@ (8008f1c <fsm_off_handle+0x13c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e9e:	d32a      	bcc.n	8008ef6 <fsm_off_handle+0x116>
                lcd_print_if_changed(0, "Cargando EEPROM");
 8008ea0:	4922      	ldr	r1, [pc, #136]	@ (8008f2c <fsm_off_handle+0x14c>)
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	f001 fa2e 	bl	800a304 <lcd_print_if_changed>
                eeprom_start_read();
 8008ea8:	f002 f982 	bl	800b1b0 <eeprom_start_read>
                fsm_subestado = 5;
 8008eac:	4b16      	ldr	r3, [pc, #88]	@ (8008f08 <fsm_off_handle+0x128>)
 8008eae:	2205      	movs	r2, #5
 8008eb0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8008eb2:	e020      	b.n	8008ef6 <fsm_off_handle+0x116>

        case 4: //salimos del estado idle a estado menu principal
            if (ultima_interaccion_ms >= 1000) { 
 8008eb4:	4b19      	ldr	r3, [pc, #100]	@ (8008f1c <fsm_off_handle+0x13c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ebc:	d31d      	bcc.n	8008efa <fsm_off_handle+0x11a>
                estado_actual = estado_menu_principal;
 8008ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8008f30 <fsm_off_handle+0x150>)
 8008ec0:	2205      	movs	r2, #5
 8008ec2:	701a      	strb	r2, [r3, #0]
                fsm_subestado = 0;
 8008ec4:	4b10      	ldr	r3, [pc, #64]	@ (8008f08 <fsm_off_handle+0x128>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8008eca:	e016      	b.n	8008efa <fsm_off_handle+0x11a>

        case 5: //terminas de cargar la eeprom y te vas a modo fabrica 
            eeprom_update();
 8008ecc:	f002 f98e 	bl	800b1ec <eeprom_update>
            if (eeprom_terminado) {
 8008ed0:	4b13      	ldr	r3, [pc, #76]	@ (8008f20 <fsm_off_handle+0x140>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d011      	beq.n	8008efe <fsm_off_handle+0x11e>
            	eeprom_terminado = 0;
 8008eda:	4b11      	ldr	r3, [pc, #68]	@ (8008f20 <fsm_off_handle+0x140>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	701a      	strb	r2, [r3, #0]
                estado_actual = estado_fabricante;
 8008ee0:	4b13      	ldr	r3, [pc, #76]	@ (8008f30 <fsm_off_handle+0x150>)
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	701a      	strb	r2, [r3, #0]
                fsm_subestado = 0;
 8008ee6:	4b08      	ldr	r3, [pc, #32]	@ (8008f08 <fsm_off_handle+0x128>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
            }
            break;
 8008eec:	e007      	b.n	8008efe <fsm_off_handle+0x11e>
            break;
 8008eee:	bf00      	nop
 8008ef0:	e006      	b.n	8008f00 <fsm_off_handle+0x120>
            break;
 8008ef2:	bf00      	nop
 8008ef4:	e004      	b.n	8008f00 <fsm_off_handle+0x120>
            break;
 8008ef6:	bf00      	nop
 8008ef8:	e002      	b.n	8008f00 <fsm_off_handle+0x120>
            break;
 8008efa:	bf00      	nop
 8008efc:	e000      	b.n	8008f00 <fsm_off_handle+0x120>
            break;
 8008efe:	bf00      	nop
    }
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	2000056d 	.word	0x2000056d
 8008f0c:	0800ece0 	.word	0x0800ece0
 8008f10:	0800ecf4 	.word	0x0800ecf4
 8008f14:	0800ed08 	.word	0x0800ed08
 8008f18:	0800ed14 	.word	0x0800ed14
 8008f1c:	20000580 	.word	0x20000580
 8008f20:	2000061c 	.word	0x2000061c
 8008f24:	0800ed20 	.word	0x0800ed20
 8008f28:	0800ed30 	.word	0x0800ed30
 8008f2c:	0800ed34 	.word	0x0800ed34
 8008f30:	2000057d 	.word	0x2000057d

08008f34 <fsm_diagnostico_handle>:

static void fsm_diagnostico_handle(evento_t e) //autodiagnostico, si algo falla entra a estado error
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	71fb      	strb	r3, [r7, #7]
    static bool test_ejecutado = false;

    if (!test_ejecutado) //si todavia no se ejecuto test entra al bloque 
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f7c <fsm_diagnostico_handle+0x48>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	f083 0301 	eor.w	r3, r3, #1
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d013      	beq.n	8008f74 <fsm_diagnostico_handle+0x40>
	{
        if (sistema_autotest_ok()) {
 8008f4c:	f7ff fee0 	bl	8008d10 <sistema_autotest_ok>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <fsm_diagnostico_handle+0x26>
            // reinicio micro si todos tests pasan
            NVIC_SystemReset();
 8008f56:	f7ff fdc3 	bl	8008ae0 <__NVIC_SystemReset>
        } else {
            lcd_print_if_changed(0, "Falla detectada");
 8008f5a:	4909      	ldr	r1, [pc, #36]	@ (8008f80 <fsm_diagnostico_handle+0x4c>)
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	f001 f9d1 	bl	800a304 <lcd_print_if_changed>
            estado_actual = estado_error;
 8008f62:	4b08      	ldr	r3, [pc, #32]	@ (8008f84 <fsm_diagnostico_handle+0x50>)
 8008f64:	220a      	movs	r2, #10
 8008f66:	701a      	strb	r2, [r3, #0]
			//si algo falla en la prueba, se muestra mensaje de error y cambia a estado 'error'para evitar continuar con flujo normal 
        }

        test_ejecutado = true; //test ya se ejecuto para no repetir
 8008f68:	4b04      	ldr	r3, [pc, #16]	@ (8008f7c <fsm_diagnostico_handle+0x48>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	701a      	strb	r2, [r3, #0]
        ultima_interaccion_ms = 0; //resetea contador inactividad a 0
 8008f6e:	4b06      	ldr	r3, [pc, #24]	@ (8008f88 <fsm_diagnostico_handle+0x54>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
    }

}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000584 	.word	0x20000584
 8008f80:	0800ed44 	.word	0x0800ed44
 8008f84:	2000057d 	.word	0x2000057d
 8008f88:	20000580 	.word	0x20000580

08008f8c <fsm_fabricante_handle>:

static void fsm_fabricante_handle(evento_t e) //maneja modo fabrica
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b086      	sub	sp, #24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	71fb      	strb	r3, [r7, #7]
	static uint8_t menu_idx = 0;
	const char* menus[] = { "Stock actual", "Temp deseada", "Prueba de HW" };
 8008f96:	4a53      	ldr	r2, [pc, #332]	@ (80090e4 <fsm_fabricante_handle+0x158>)
 8008f98:	f107 030c 	add.w	r3, r7, #12
 8008f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//guarda el menu actual seleccionado 
	switch (fsm_subestado) {
 8008fa2:	4b51      	ldr	r3, [pc, #324]	@ (80090e8 <fsm_fabricante_handle+0x15c>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	f000 8086 	beq.w	80090b8 <fsm_fabricante_handle+0x12c>
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	f300 8094 	bgt.w	80090da <fsm_fabricante_handle+0x14e>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <fsm_fabricante_handle+0x30>
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d076      	beq.n	80090a8 <fsm_fabricante_handle+0x11c>
				fsm_subestado = 0;
				//espera 500ms antes de salir definitivamente del modo fabrica
			}
			break;
	}
}
 8008fba:	e08e      	b.n	80090da <fsm_fabricante_handle+0x14e>
			mostrar_estado_leds(estado_actual);
 8008fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80090ec <fsm_fabricante_handle+0x160>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff f8c3 	bl	800814c <mostrar_estado_leds>
			lcd_print_if_changed(0, "FAB: Seleccione ");
 8008fc6:	494a      	ldr	r1, [pc, #296]	@ (80090f0 <fsm_fabricante_handle+0x164>)
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f001 f99b 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, menus[menu_idx]);
 8008fce:	4b49      	ldr	r3, [pc, #292]	@ (80090f4 <fsm_fabricante_handle+0x168>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	3318      	adds	r3, #24
 8008fd6:	443b      	add	r3, r7
 8008fd8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8008fdc:	4619      	mov	r1, r3
 8008fde:	2001      	movs	r0, #1
 8008fe0:	f001 f990 	bl	800a304 <lcd_print_if_changed>
			if (e == EVENT_JOY_DOWN) //se mueve joystick hacia abajo  
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b06      	cmp	r3, #6
 8008fe8:	d115      	bne.n	8009016 <fsm_fabricante_handle+0x8a>
				menu_idx = (menu_idx + 1) % 3;
 8008fea:	4b42      	ldr	r3, [pc, #264]	@ (80090f4 <fsm_fabricante_handle+0x168>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	4b41      	ldr	r3, [pc, #260]	@ (80090f8 <fsm_fabricante_handle+0x16c>)
 8008ff2:	fb83 3102 	smull	r3, r1, r3, r2
 8008ff6:	17d3      	asrs	r3, r2, #31
 8008ff8:	1ac9      	subs	r1, r1, r3
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	440b      	add	r3, r1
 8009000:	1ad1      	subs	r1, r2, r3
 8009002:	b2ca      	uxtb	r2, r1
 8009004:	4b3b      	ldr	r3, [pc, #236]	@ (80090f4 <fsm_fabricante_handle+0x168>)
 8009006:	701a      	strb	r2, [r3, #0]
				ultima_interaccion_ms = 0;
 8009008:	4b3c      	ldr	r3, [pc, #240]	@ (80090fc <fsm_fabricante_handle+0x170>)
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]
				fsm_subestado = 1;
 800900e:	4b36      	ldr	r3, [pc, #216]	@ (80090e8 <fsm_fabricante_handle+0x15c>)
 8009010:	2201      	movs	r2, #1
 8009012:	701a      	strb	r2, [r3, #0]
			break;
 8009014:	e05c      	b.n	80090d0 <fsm_fabricante_handle+0x144>
			else if (e == EVENT_JOY_UP) //se mueve joystick hacia arriba 
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	2b05      	cmp	r3, #5
 800901a:	d115      	bne.n	8009048 <fsm_fabricante_handle+0xbc>
				menu_idx = (menu_idx + 2) % 3;
 800901c:	4b35      	ldr	r3, [pc, #212]	@ (80090f4 <fsm_fabricante_handle+0x168>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	1c9a      	adds	r2, r3, #2
 8009022:	4b35      	ldr	r3, [pc, #212]	@ (80090f8 <fsm_fabricante_handle+0x16c>)
 8009024:	fb83 3102 	smull	r3, r1, r3, r2
 8009028:	17d3      	asrs	r3, r2, #31
 800902a:	1ac9      	subs	r1, r1, r3
 800902c:	460b      	mov	r3, r1
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	440b      	add	r3, r1
 8009032:	1ad1      	subs	r1, r2, r3
 8009034:	b2ca      	uxtb	r2, r1
 8009036:	4b2f      	ldr	r3, [pc, #188]	@ (80090f4 <fsm_fabricante_handle+0x168>)
 8009038:	701a      	strb	r2, [r3, #0]
				ultima_interaccion_ms = 0;
 800903a:	4b30      	ldr	r3, [pc, #192]	@ (80090fc <fsm_fabricante_handle+0x170>)
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
				fsm_subestado = 1;
 8009040:	4b29      	ldr	r3, [pc, #164]	@ (80090e8 <fsm_fabricante_handle+0x15c>)
 8009042:	2201      	movs	r2, #1
 8009044:	701a      	strb	r2, [r3, #0]
			break;
 8009046:	e043      	b.n	80090d0 <fsm_fabricante_handle+0x144>
			else if (e == EVENT_BOTON1_EDGE) //se presiona boton azul
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d11a      	bne.n	8009084 <fsm_fabricante_handle+0xf8>
				switch (menu_idx) {
 800904e:	4b29      	ldr	r3, [pc, #164]	@ (80090f4 <fsm_fabricante_handle+0x168>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d00e      	beq.n	8009074 <fsm_fabricante_handle+0xe8>
 8009056:	2b02      	cmp	r3, #2
 8009058:	dc10      	bgt.n	800907c <fsm_fabricante_handle+0xf0>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <fsm_fabricante_handle+0xd8>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d004      	beq.n	800906c <fsm_fabricante_handle+0xe0>
 8009062:	e00b      	b.n	800907c <fsm_fabricante_handle+0xf0>
					case 0: estado_actual = estado_submenu_stock; break;
 8009064:	4b21      	ldr	r3, [pc, #132]	@ (80090ec <fsm_fabricante_handle+0x160>)
 8009066:	2203      	movs	r2, #3
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e007      	b.n	800907c <fsm_fabricante_handle+0xf0>
					case 1: estado_actual = estado_submenu_temp_deseada; break;
 800906c:	4b1f      	ldr	r3, [pc, #124]	@ (80090ec <fsm_fabricante_handle+0x160>)
 800906e:	2204      	movs	r2, #4
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	e003      	b.n	800907c <fsm_fabricante_handle+0xf0>
					case 2: estado_actual = estado_diagnostico; break;
 8009074:	4b1d      	ldr	r3, [pc, #116]	@ (80090ec <fsm_fabricante_handle+0x160>)
 8009076:	2201      	movs	r2, #1
 8009078:	701a      	strb	r2, [r3, #0]
 800907a:	bf00      	nop
				fsm_subestado = 0;
 800907c:	4b1a      	ldr	r3, [pc, #104]	@ (80090e8 <fsm_fabricante_handle+0x15c>)
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
			break;
 8009082:	e025      	b.n	80090d0 <fsm_fabricante_handle+0x144>
			else if (e == EVENT_JOY_LEFT) //se mueve joystick izq 
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b07      	cmp	r3, #7
 8009088:	d122      	bne.n	80090d0 <fsm_fabricante_handle+0x144>
				lcd_print_if_changed(0, "Saliendo...");
 800908a:	491d      	ldr	r1, [pc, #116]	@ (8009100 <fsm_fabricante_handle+0x174>)
 800908c:	2000      	movs	r0, #0
 800908e:	f001 f939 	bl	800a304 <lcd_print_if_changed>
				lcd_print_if_changed(1, " ");
 8009092:	491c      	ldr	r1, [pc, #112]	@ (8009104 <fsm_fabricante_handle+0x178>)
 8009094:	2001      	movs	r0, #1
 8009096:	f001 f935 	bl	800a304 <lcd_print_if_changed>
				ultima_interaccion_ms = 0;
 800909a:	4b18      	ldr	r3, [pc, #96]	@ (80090fc <fsm_fabricante_handle+0x170>)
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]
				fsm_subestado = 2;
 80090a0:	4b11      	ldr	r3, [pc, #68]	@ (80090e8 <fsm_fabricante_handle+0x15c>)
 80090a2:	2202      	movs	r2, #2
 80090a4:	701a      	strb	r2, [r3, #0]
			break;
 80090a6:	e013      	b.n	80090d0 <fsm_fabricante_handle+0x144>
			if (ultima_interaccion_ms >= 150) {
 80090a8:	4b14      	ldr	r3, [pc, #80]	@ (80090fc <fsm_fabricante_handle+0x170>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2b95      	cmp	r3, #149	@ 0x95
 80090ae:	d911      	bls.n	80090d4 <fsm_fabricante_handle+0x148>
				fsm_subestado = 0;
 80090b0:	4b0d      	ldr	r3, [pc, #52]	@ (80090e8 <fsm_fabricante_handle+0x15c>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
			break;
 80090b6:	e00d      	b.n	80090d4 <fsm_fabricante_handle+0x148>
			if (ultima_interaccion_ms >= 500) {
 80090b8:	4b10      	ldr	r3, [pc, #64]	@ (80090fc <fsm_fabricante_handle+0x170>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80090c0:	d30a      	bcc.n	80090d8 <fsm_fabricante_handle+0x14c>
				estado_actual = estado_off;
 80090c2:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <fsm_fabricante_handle+0x160>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	701a      	strb	r2, [r3, #0]
				fsm_subestado = 0;
 80090c8:	4b07      	ldr	r3, [pc, #28]	@ (80090e8 <fsm_fabricante_handle+0x15c>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	701a      	strb	r2, [r3, #0]
			break;
 80090ce:	e003      	b.n	80090d8 <fsm_fabricante_handle+0x14c>
			break;
 80090d0:	bf00      	nop
 80090d2:	e002      	b.n	80090da <fsm_fabricante_handle+0x14e>
			break;
 80090d4:	bf00      	nop
 80090d6:	e000      	b.n	80090da <fsm_fabricante_handle+0x14e>
			break;
 80090d8:	bf00      	nop
}
 80090da:	bf00      	nop
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	0800eda4 	.word	0x0800eda4
 80090e8:	2000056d 	.word	0x2000056d
 80090ec:	2000057d 	.word	0x2000057d
 80090f0:	0800ed54 	.word	0x0800ed54
 80090f4:	20000585 	.word	0x20000585
 80090f8:	55555556 	.word	0x55555556
 80090fc:	20000580 	.word	0x20000580
 8009100:	0800ed68 	.word	0x0800ed68
 8009104:	0800ec6c 	.word	0x0800ec6c

08009108 <fsm_stock_handle>:

static void fsm_stock_handle(evento_t e) //maneja submenu_stock
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b097      	sub	sp, #92	@ 0x5c
 800910c:	af02      	add	r7, sp, #8
 800910e:	4603      	mov	r3, r0
 8009110:	71fb      	strb	r3, [r7, #7]
	static uint8_t idx = 0; //indica cual ingrediente esta seleccionando del 0 al 3 
	static int nuevo = 0;   //valor temporal del stock que se esta editando
	static bool edit = false; //indica si estamos en modo edicion o solo navegando 


	const char* nombres[] = { "Cafe", "Leche", "Agua", "Choc" };
 8009112:	4ba6      	ldr	r3, [pc, #664]	@ (80093ac <fsm_stock_handle+0x2a4>)
 8009114:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8009118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800911a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int* stocks[] = { &stock_cafe, &stock_leche, &stock_agua, &stock_chocolate };
 800911e:	4ba4      	ldr	r3, [pc, #656]	@ (80093b0 <fsm_stock_handle+0x2a8>)
 8009120:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8009124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//arreglo de punteros a las variables de stock globales, lo que permite acceder dinámicamente al stock seleccionado por idx
	
	switch (fsm_subestado)
 800912a:	4ba2      	ldr	r3, [pc, #648]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b0c      	cmp	r3, #12
 8009130:	f200 8137 	bhi.w	80093a2 <fsm_stock_handle+0x29a>
 8009134:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <fsm_stock_handle+0x34>)
 8009136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913a:	bf00      	nop
 800913c:	08009171 	.word	0x08009171
 8009140:	08009201 	.word	0x08009201
 8009144:	0800931b 	.word	0x0800931b
 8009148:	0800934d 	.word	0x0800934d
 800914c:	080093a3 	.word	0x080093a3
 8009150:	080093a3 	.word	0x080093a3
 8009154:	080093a3 	.word	0x080093a3
 8009158:	080093a3 	.word	0x080093a3
 800915c:	080093a3 	.word	0x080093a3
 8009160:	080093a3 	.word	0x080093a3
 8009164:	0800935f 	.word	0x0800935f
 8009168:	0800937d 	.word	0x0800937d
 800916c:	08009327 	.word	0x08009327
	{
		case 0:  // mostrar pantalla
			if (!edit) {
 8009170:	4b91      	ldr	r3, [pc, #580]	@ (80093b8 <fsm_stock_handle+0x2b0>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f083 0301 	eor.w	r3, r3, #1
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d021      	beq.n	80091c2 <fsm_stock_handle+0xba>
				char linea[17];
				snprintf(linea, sizeof(linea), "%s: Stock=%d", nombres[idx], *stocks[idx]);
 800917e:	4b8f      	ldr	r3, [pc, #572]	@ (80093bc <fsm_stock_handle+0x2b4>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	3350      	adds	r3, #80	@ 0x50
 8009186:	443b      	add	r3, r7
 8009188:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800918c:	4b8b      	ldr	r3, [pc, #556]	@ (80093bc <fsm_stock_handle+0x2b4>)
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	3350      	adds	r3, #80	@ 0x50
 8009194:	443b      	add	r3, r7
 8009196:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f107 001c 	add.w	r0, r7, #28
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	4613      	mov	r3, r2
 80091a4:	4a86      	ldr	r2, [pc, #536]	@ (80093c0 <fsm_stock_handle+0x2b8>)
 80091a6:	2111      	movs	r1, #17
 80091a8:	f002 fed8 	bl	800bf5c <sniprintf>
				lcd_print_if_changed(0, "Indique stock...");
 80091ac:	4985      	ldr	r1, [pc, #532]	@ (80093c4 <fsm_stock_handle+0x2bc>)
 80091ae:	2000      	movs	r0, #0
 80091b0:	f001 f8a8 	bl	800a304 <lcd_print_if_changed>
				lcd_print_if_changed(1, linea);
 80091b4:	f107 031c 	add.w	r3, r7, #28
 80091b8:	4619      	mov	r1, r3
 80091ba:	2001      	movs	r0, #1
 80091bc:	f001 f8a2 	bl	800a304 <lcd_print_if_changed>
 80091c0:	e01a      	b.n	80091f8 <fsm_stock_handle+0xf0>
				//si no estamos editando muestra stock actual del ingrediente seleccionado
			} else {
				char linea[17];
				snprintf(linea, sizeof(linea), "Nuevo %s: %2d", nombres[idx], nuevo);
 80091c2:	4b7e      	ldr	r3, [pc, #504]	@ (80093bc <fsm_stock_handle+0x2b4>)
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	3350      	adds	r3, #80	@ 0x50
 80091ca:	443b      	add	r3, r7
 80091cc:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80091d0:	4b7d      	ldr	r3, [pc, #500]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f107 0008 	add.w	r0, r7, #8
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	4613      	mov	r3, r2
 80091dc:	4a7b      	ldr	r2, [pc, #492]	@ (80093cc <fsm_stock_handle+0x2c4>)
 80091de:	2111      	movs	r1, #17
 80091e0:	f002 febc 	bl	800bf5c <sniprintf>
				lcd_print_if_changed(0, linea);
 80091e4:	f107 0308 	add.w	r3, r7, #8
 80091e8:	4619      	mov	r1, r3
 80091ea:	2000      	movs	r0, #0
 80091ec:	f001 f88a 	bl	800a304 <lcd_print_if_changed>
				lcd_print_if_changed(1, "Presione Azul");
 80091f0:	4977      	ldr	r1, [pc, #476]	@ (80093d0 <fsm_stock_handle+0x2c8>)
 80091f2:	2001      	movs	r0, #1
 80091f4:	f001 f886 	bl	800a304 <lcd_print_if_changed>
				//si estamos editando muestra valor temporal nuevo y mensaje para confirmar con boton azul
			}
			fsm_subestado = 1; //para esperar entrada del usuario
 80091f8:	4b6e      	ldr	r3, [pc, #440]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	701a      	strb	r2, [r3, #0]
			break;
 80091fe:	e0d0      	b.n	80093a2 <fsm_stock_handle+0x29a>

		case 1: // espera evento
			if (!edit) {
 8009200:	4b6d      	ldr	r3, [pc, #436]	@ (80093b8 <fsm_stock_handle+0x2b0>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	f083 0301 	eor.w	r3, r3, #1
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d03a      	beq.n	8009284 <fsm_stock_handle+0x17c>
				//si no estamos editando
				if (e == EVENT_JOY_UP) {
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	2b05      	cmp	r3, #5
 8009212:	d110      	bne.n	8009236 <fsm_stock_handle+0x12e>
					idx = (idx + 1) % 4;
 8009214:	4b69      	ldr	r3, [pc, #420]	@ (80093bc <fsm_stock_handle+0x2b4>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	3301      	adds	r3, #1
 800921a:	425a      	negs	r2, r3
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	f002 0203 	and.w	r2, r2, #3
 8009224:	bf58      	it	pl
 8009226:	4253      	negpl	r3, r2
 8009228:	b2da      	uxtb	r2, r3
 800922a:	4b64      	ldr	r3, [pc, #400]	@ (80093bc <fsm_stock_handle+0x2b4>)
 800922c:	701a      	strb	r2, [r3, #0]
					fsm_subestado = 0;
 800922e:	4b61      	ldr	r3, [pc, #388]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009230:	2200      	movs	r2, #0
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	e06a      	b.n	800930c <fsm_stock_handle+0x204>
					//si joystick hacia arriba avanza al sig estado
				}
				else if (e == EVENT_JOY_DOWN) {
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b06      	cmp	r3, #6
 800923a:	d10f      	bne.n	800925c <fsm_stock_handle+0x154>
					idx = (idx == 0) ? 3 : idx - 1;
 800923c:	4b5f      	ldr	r3, [pc, #380]	@ (80093bc <fsm_stock_handle+0x2b4>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d004      	beq.n	800924e <fsm_stock_handle+0x146>
 8009244:	4b5d      	ldr	r3, [pc, #372]	@ (80093bc <fsm_stock_handle+0x2b4>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	3b01      	subs	r3, #1
 800924a:	b2db      	uxtb	r3, r3
 800924c:	e000      	b.n	8009250 <fsm_stock_handle+0x148>
 800924e:	2303      	movs	r3, #3
 8009250:	4a5a      	ldr	r2, [pc, #360]	@ (80093bc <fsm_stock_handle+0x2b4>)
 8009252:	7013      	strb	r3, [r2, #0]
					fsm_subestado = 0;
 8009254:	4b57      	ldr	r3, [pc, #348]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009256:	2200      	movs	r2, #0
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	e057      	b.n	800930c <fsm_stock_handle+0x204>
					//si joystick hacia abajo retrocede 
				}
				else if (e == EVENT_BOTON1_EDGE) {
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d154      	bne.n	800930c <fsm_stock_handle+0x204>
					edit = true;
 8009262:	4b55      	ldr	r3, [pc, #340]	@ (80093b8 <fsm_stock_handle+0x2b0>)
 8009264:	2201      	movs	r2, #1
 8009266:	701a      	strb	r2, [r3, #0]
					nuevo = *stocks[idx];
 8009268:	4b54      	ldr	r3, [pc, #336]	@ (80093bc <fsm_stock_handle+0x2b4>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	3350      	adds	r3, #80	@ 0x50
 8009270:	443b      	add	r3, r7
 8009272:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a53      	ldr	r2, [pc, #332]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 800927a:	6013      	str	r3, [r2, #0]
					fsm_subestado = 0;
 800927c:	4b4d      	ldr	r3, [pc, #308]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	e043      	b.n	800930c <fsm_stock_handle+0x204>
					//si boton azul entra en modo edicion copiando el valor actual a nuevo
				}
			} else {
				//si estamos editando 
				if (e == EVENT_JOY_UP) {
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	2b05      	cmp	r3, #5
 8009288:	d114      	bne.n	80092b4 <fsm_stock_handle+0x1ac>
					nuevo = (nuevo + 1) % 21;
 800928a:	4b4f      	ldr	r3, [pc, #316]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	1c59      	adds	r1, r3, #1
 8009290:	4b50      	ldr	r3, [pc, #320]	@ (80093d4 <fsm_stock_handle+0x2cc>)
 8009292:	fb83 2301 	smull	r2, r3, r3, r1
 8009296:	109a      	asrs	r2, r3, #2
 8009298:	17cb      	asrs	r3, r1, #31
 800929a:	1ad2      	subs	r2, r2, r3
 800929c:	4613      	mov	r3, r2
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	4413      	add	r3, r2
 80092a2:	00da      	lsls	r2, r3, #3
 80092a4:	1ad2      	subs	r2, r2, r3
 80092a6:	1a8a      	subs	r2, r1, r2
 80092a8:	4b47      	ldr	r3, [pc, #284]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 80092aa:	601a      	str	r2, [r3, #0]
					fsm_subestado = 0;
 80092ac:	4b41      	ldr	r3, [pc, #260]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e02b      	b.n	800930c <fsm_stock_handle+0x204>
					//si joystick hacia arriba incrementa nuevo (hasta 20)
				}
				else if (e == EVENT_JOY_DOWN) {
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	2b06      	cmp	r3, #6
 80092b8:	d10e      	bne.n	80092d8 <fsm_stock_handle+0x1d0>
					nuevo = (nuevo == 0) ? 20 : nuevo - 1;
 80092ba:	4b43      	ldr	r3, [pc, #268]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <fsm_stock_handle+0x1c2>
 80092c2:	4b41      	ldr	r3, [pc, #260]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	e000      	b.n	80092cc <fsm_stock_handle+0x1c4>
 80092ca:	2314      	movs	r3, #20
 80092cc:	4a3e      	ldr	r2, [pc, #248]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 80092ce:	6013      	str	r3, [r2, #0]
					fsm_subestado = 0;
 80092d0:	4b38      	ldr	r3, [pc, #224]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e019      	b.n	800930c <fsm_stock_handle+0x204>
					//si joystick hacia abajo decrementa (hasta 0)
				}
				else if (e == EVENT_BOTON1_EDGE) {
 80092d8:	79fb      	ldrb	r3, [r7, #7]
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d116      	bne.n	800930c <fsm_stock_handle+0x204>
					*stocks[idx] = nuevo;
 80092de:	4b37      	ldr	r3, [pc, #220]	@ (80093bc <fsm_stock_handle+0x2b4>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	3350      	adds	r3, #80	@ 0x50
 80092e6:	443b      	add	r3, r7
 80092e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80092ec:	4a36      	ldr	r2, [pc, #216]	@ (80093c8 <fsm_stock_handle+0x2c0>)
 80092ee:	6812      	ldr	r2, [r2, #0]
 80092f0:	601a      	str	r2, [r3, #0]
					edit = false;
 80092f2:	4b31      	ldr	r3, [pc, #196]	@ (80093b8 <fsm_stock_handle+0x2b0>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
					lcd_print_if_changed(0, "Guardando...");
 80092f8:	4937      	ldr	r1, [pc, #220]	@ (80093d8 <fsm_stock_handle+0x2d0>)
 80092fa:	2000      	movs	r0, #0
 80092fc:	f001 f802 	bl	800a304 <lcd_print_if_changed>
					ultima_interaccion_ms = 0;
 8009300:	4b36      	ldr	r3, [pc, #216]	@ (80093dc <fsm_stock_handle+0x2d4>)
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]
					fsm_subestado = 2;
 8009306:	4b2b      	ldr	r3, [pc, #172]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009308:	2202      	movs	r2, #2
 800930a:	701a      	strb	r2, [r3, #0]
					//si boton azul guarda nuevo en stock real y pasa a subestado 2
				}
			}

			//no importa si estoy editando o no 
			if (e == EVENT_JOY_LEFT) {
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b07      	cmp	r3, #7
 8009310:	d140      	bne.n	8009394 <fsm_stock_handle+0x28c>
				fsm_subestado = 10;
 8009312:	4b28      	ldr	r3, [pc, #160]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009314:	220a      	movs	r2, #10
 8009316:	701a      	strb	r2, [r3, #0]
				//salida
			}
			break;
 8009318:	e03c      	b.n	8009394 <fsm_stock_handle+0x28c>

		case 2:  // iniciar guardado EEPROM
			eeprom_start_save();
 800931a:	f001 fea1 	bl	800b060 <eeprom_start_save>
			fsm_subestado = 12;
 800931e:	4b25      	ldr	r3, [pc, #148]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009320:	220c      	movs	r2, #12
 8009322:	701a      	strb	r2, [r3, #0]
			break;
 8009324:	e03d      	b.n	80093a2 <fsm_stock_handle+0x29a>

		case 12:  // esperar EEPROM
			if (eeprom_terminado) {
 8009326:	4b2e      	ldr	r3, [pc, #184]	@ (80093e0 <fsm_stock_handle+0x2d8>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d033      	beq.n	8009398 <fsm_stock_handle+0x290>
				eeprom_terminado = 0;
 8009330:	4b2b      	ldr	r3, [pc, #172]	@ (80093e0 <fsm_stock_handle+0x2d8>)
 8009332:	2200      	movs	r2, #0
 8009334:	701a      	strb	r2, [r3, #0]
				lcd_print_if_changed(0, "Stock Guardado!");
 8009336:	492b      	ldr	r1, [pc, #172]	@ (80093e4 <fsm_stock_handle+0x2dc>)
 8009338:	2000      	movs	r0, #0
 800933a:	f000 ffe3 	bl	800a304 <lcd_print_if_changed>
				ultima_interaccion_ms = 0;
 800933e:	4b27      	ldr	r3, [pc, #156]	@ (80093dc <fsm_stock_handle+0x2d4>)
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]
				fsm_subestado = 3;
 8009344:	4b1b      	ldr	r3, [pc, #108]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009346:	2203      	movs	r2, #3
 8009348:	701a      	strb	r2, [r3, #0]
			}
			break;
 800934a:	e025      	b.n	8009398 <fsm_stock_handle+0x290>

		case 3: //retardo luego del guardado
			if (ultima_interaccion_ms >= 600) {
 800934c:	4b23      	ldr	r3, [pc, #140]	@ (80093dc <fsm_stock_handle+0x2d4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8009354:	d322      	bcc.n	800939c <fsm_stock_handle+0x294>
				fsm_subestado = 0;
 8009356:	4b17      	ldr	r3, [pc, #92]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009358:	2200      	movs	r2, #0
 800935a:	701a      	strb	r2, [r3, #0]
				//vuelve al subestado 0
			}
			break;
 800935c:	e01e      	b.n	800939c <fsm_stock_handle+0x294>

		case 10:  //mensaje de salida
			lcd_print_if_changed(0, "Saliendo...");
 800935e:	4922      	ldr	r1, [pc, #136]	@ (80093e8 <fsm_stock_handle+0x2e0>)
 8009360:	2000      	movs	r0, #0
 8009362:	f000 ffcf 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, "");
 8009366:	4921      	ldr	r1, [pc, #132]	@ (80093ec <fsm_stock_handle+0x2e4>)
 8009368:	2001      	movs	r0, #1
 800936a:	f000 ffcb 	bl	800a304 <lcd_print_if_changed>
			ultima_interaccion_ms = 0;
 800936e:	4b1b      	ldr	r3, [pc, #108]	@ (80093dc <fsm_stock_handle+0x2d4>)
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
			fsm_subestado = 11;
 8009374:	4b0f      	ldr	r3, [pc, #60]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 8009376:	220b      	movs	r2, #11
 8009378:	701a      	strb	r2, [r3, #0]
			break;
 800937a:	e012      	b.n	80093a2 <fsm_stock_handle+0x29a>

		case 11: //sale de modo fabricante
			if (ultima_interaccion_ms >= 1000) {
 800937c:	4b17      	ldr	r3, [pc, #92]	@ (80093dc <fsm_stock_handle+0x2d4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009384:	d30c      	bcc.n	80093a0 <fsm_stock_handle+0x298>
				estado_actual = estado_fabricante;
 8009386:	4b1a      	ldr	r3, [pc, #104]	@ (80093f0 <fsm_stock_handle+0x2e8>)
 8009388:	2202      	movs	r2, #2
 800938a:	701a      	strb	r2, [r3, #0]
				fsm_subestado = 0;
 800938c:	4b09      	ldr	r3, [pc, #36]	@ (80093b4 <fsm_stock_handle+0x2ac>)
 800938e:	2200      	movs	r2, #0
 8009390:	701a      	strb	r2, [r3, #0]
			}
			break;
 8009392:	e005      	b.n	80093a0 <fsm_stock_handle+0x298>
			break;
 8009394:	bf00      	nop
 8009396:	e004      	b.n	80093a2 <fsm_stock_handle+0x29a>
			break;
 8009398:	bf00      	nop
 800939a:	e002      	b.n	80093a2 <fsm_stock_handle+0x29a>
			break;
 800939c:	bf00      	nop
 800939e:	e000      	b.n	80093a2 <fsm_stock_handle+0x29a>
			break;
 80093a0:	bf00      	nop
	}
}
 80093a2:	bf00      	nop
 80093a4:	3754      	adds	r7, #84	@ 0x54
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd90      	pop	{r4, r7, pc}
 80093aa:	bf00      	nop
 80093ac:	0800ee34 	.word	0x0800ee34
 80093b0:	0800ee44 	.word	0x0800ee44
 80093b4:	2000056d 	.word	0x2000056d
 80093b8:	20000586 	.word	0x20000586
 80093bc:	20000587 	.word	0x20000587
 80093c0:	0800edb0 	.word	0x0800edb0
 80093c4:	0800edc0 	.word	0x0800edc0
 80093c8:	20000588 	.word	0x20000588
 80093cc:	0800edd4 	.word	0x0800edd4
 80093d0:	0800ede4 	.word	0x0800ede4
 80093d4:	30c30c31 	.word	0x30c30c31
 80093d8:	0800edf4 	.word	0x0800edf4
 80093dc:	20000580 	.word	0x20000580
 80093e0:	2000061c 	.word	0x2000061c
 80093e4:	0800ee04 	.word	0x0800ee04
 80093e8:	0800ed68 	.word	0x0800ed68
 80093ec:	0800ed30 	.word	0x0800ed30
 80093f0:	2000057d 	.word	0x2000057d

080093f4 <fsm_temp_deseada_handle>:

static void fsm_temp_deseada_handle(evento_t e) //maneja submenu_temp_deseada
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af02      	add	r7, sp, #8
 80093fa:	4603      	mov	r3, r0
 80093fc:	71fb      	strb	r3, [r7, #7]
	static uint8_t nueva_temp; //nueva temp medida por pote antes de confirmar cambio

	switch (fsm_subestado) 
 80093fe:	4b4f      	ldr	r3, [pc, #316]	@ (800953c <fsm_temp_deseada_handle+0x148>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b0a      	cmp	r3, #10
 8009404:	f200 8095 	bhi.w	8009532 <fsm_temp_deseada_handle+0x13e>
 8009408:	a201      	add	r2, pc, #4	@ (adr r2, 8009410 <fsm_temp_deseada_handle+0x1c>)
 800940a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940e:	bf00      	nop
 8009410:	0800943d 	.word	0x0800943d
 8009414:	080094fb 	.word	0x080094fb
 8009418:	0800950d 	.word	0x0800950d
 800941c:	08009533 	.word	0x08009533
 8009420:	08009533 	.word	0x08009533
 8009424:	08009533 	.word	0x08009533
 8009428:	08009533 	.word	0x08009533
 800942c:	08009533 	.word	0x08009533
 8009430:	08009533 	.word	0x08009533
 8009434:	08009533 	.word	0x08009533
 8009438:	080094d5 	.word	0x080094d5
	{
		case 0: //se lee valor ADC del canal 0 (potenciometro) 
		{ 
			nueva_temp = (adc_value[0] * 60) / 4095 + 30;
 800943c:	4b40      	ldr	r3, [pc, #256]	@ (8009540 <fsm_temp_deseada_handle+0x14c>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	4613      	mov	r3, r2
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	1a9b      	subs	r3, r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	461a      	mov	r2, r3
 800944a:	4b3e      	ldr	r3, [pc, #248]	@ (8009544 <fsm_temp_deseada_handle+0x150>)
 800944c:	fba3 1302 	umull	r1, r3, r3, r2
 8009450:	1ad2      	subs	r2, r2, r3
 8009452:	0852      	lsrs	r2, r2, #1
 8009454:	4413      	add	r3, r2
 8009456:	0adb      	lsrs	r3, r3, #11
 8009458:	b2db      	uxtb	r3, r3
 800945a:	331e      	adds	r3, #30
 800945c:	b2da      	uxtb	r2, r3
 800945e:	4b3a      	ldr	r3, [pc, #232]	@ (8009548 <fsm_temp_deseada_handle+0x154>)
 8009460:	701a      	strb	r2, [r3, #0]

			lcd_print_if_changed(0, "Edit Temp");
 8009462:	493a      	ldr	r1, [pc, #232]	@ (800954c <fsm_temp_deseada_handle+0x158>)
 8009464:	2000      	movs	r0, #0
 8009466:	f000 ff4d 	bl	800a304 <lcd_print_if_changed>
			char linea[16];
			snprintf(linea, sizeof(linea), "T: %d/%d", nueva_temp, temp_deseada);
 800946a:	4b37      	ldr	r3, [pc, #220]	@ (8009548 <fsm_temp_deseada_handle+0x154>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	4b37      	ldr	r3, [pc, #220]	@ (8009550 <fsm_temp_deseada_handle+0x15c>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f107 0008 	add.w	r0, r7, #8
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	4613      	mov	r3, r2
 800947c:	4a35      	ldr	r2, [pc, #212]	@ (8009554 <fsm_temp_deseada_handle+0x160>)
 800947e:	2110      	movs	r1, #16
 8009480:	f002 fd6c 	bl	800bf5c <sniprintf>
			// se imprime 'T: nueva / actual'
			lcd_print_if_changed(1, linea);
 8009484:	f107 0308 	add.w	r3, r7, #8
 8009488:	4619      	mov	r1, r3
 800948a:	2001      	movs	r0, #1
 800948c:	f000 ff3a 	bl	800a304 <lcd_print_if_changed>

			if (e == EVENT_BOTON1_EDGE) //se presiona boton azul
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d10c      	bne.n	80094b0 <fsm_temp_deseada_handle+0xbc>
			{
				temp_deseada = nueva_temp;
 8009496:	4b2c      	ldr	r3, [pc, #176]	@ (8009548 <fsm_temp_deseada_handle+0x154>)
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	4b2d      	ldr	r3, [pc, #180]	@ (8009550 <fsm_temp_deseada_handle+0x15c>)
 800949c:	701a      	strb	r2, [r3, #0]
				lcd_print_if_changed(0, "Guardando...");
 800949e:	492e      	ldr	r1, [pc, #184]	@ (8009558 <fsm_temp_deseada_handle+0x164>)
 80094a0:	2000      	movs	r0, #0
 80094a2:	f000 ff2f 	bl	800a304 <lcd_print_if_changed>
				eeprom_start_save();
 80094a6:	f001 fddb 	bl	800b060 <eeprom_start_save>
				fsm_subestado = 10;
 80094aa:	4b24      	ldr	r3, [pc, #144]	@ (800953c <fsm_temp_deseada_handle+0x148>)
 80094ac:	220a      	movs	r2, #10
 80094ae:	701a      	strb	r2, [r3, #0]
				//se actualiza temp_deseada, se lanza guardado a eeprom
			}

			if (e == EVENT_JOY_LEFT) //se mueve joystick hacia izq
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	2b07      	cmp	r3, #7
 80094b4:	d136      	bne.n	8009524 <fsm_temp_deseada_handle+0x130>
			{
				lcd_print_if_changed(0, "Saliendo...");
 80094b6:	4929      	ldr	r1, [pc, #164]	@ (800955c <fsm_temp_deseada_handle+0x168>)
 80094b8:	2000      	movs	r0, #0
 80094ba:	f000 ff23 	bl	800a304 <lcd_print_if_changed>
				lcd_print_if_changed(1, "");
 80094be:	4928      	ldr	r1, [pc, #160]	@ (8009560 <fsm_temp_deseada_handle+0x16c>)
 80094c0:	2001      	movs	r0, #1
 80094c2:	f000 ff1f 	bl	800a304 <lcd_print_if_changed>
				ultima_interaccion_ms = 0;
 80094c6:	4b27      	ldr	r3, [pc, #156]	@ (8009564 <fsm_temp_deseada_handle+0x170>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	601a      	str	r2, [r3, #0]
				fsm_subestado = 2;
 80094cc:	4b1b      	ldr	r3, [pc, #108]	@ (800953c <fsm_temp_deseada_handle+0x148>)
 80094ce:	2202      	movs	r2, #2
 80094d0:	701a      	strb	r2, [r3, #0]
				//se cancela edicion
			}
			break;
 80094d2:	e027      	b.n	8009524 <fsm_temp_deseada_handle+0x130>
		}

		case 10:  // esperar EEPROM
			if (eeprom_terminado) 
 80094d4:	4b24      	ldr	r3, [pc, #144]	@ (8009568 <fsm_temp_deseada_handle+0x174>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d024      	beq.n	8009528 <fsm_temp_deseada_handle+0x134>
			{
				eeprom_terminado = 0;
 80094de:	4b22      	ldr	r3, [pc, #136]	@ (8009568 <fsm_temp_deseada_handle+0x174>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	701a      	strb	r2, [r3, #0]
				lcd_print_if_changed(0, "Temp Guardada!");
 80094e4:	4921      	ldr	r1, [pc, #132]	@ (800956c <fsm_temp_deseada_handle+0x178>)
 80094e6:	2000      	movs	r0, #0
 80094e8:	f000 ff0c 	bl	800a304 <lcd_print_if_changed>
				ultima_interaccion_ms = 0;
 80094ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009564 <fsm_temp_deseada_handle+0x170>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	601a      	str	r2, [r3, #0]
				fsm_subestado = 1;
 80094f2:	4b12      	ldr	r3, [pc, #72]	@ (800953c <fsm_temp_deseada_handle+0x148>)
 80094f4:	2201      	movs	r2, #1
 80094f6:	701a      	strb	r2, [r3, #0]
				//espera confirmacion que se guardo con exito eeprom
			}
			break;
 80094f8:	e016      	b.n	8009528 <fsm_temp_deseada_handle+0x134>

		case 1:  // delay luego del guardado
			if (ultima_interaccion_ms >= 1000) 
 80094fa:	4b1a      	ldr	r3, [pc, #104]	@ (8009564 <fsm_temp_deseada_handle+0x170>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009502:	d313      	bcc.n	800952c <fsm_temp_deseada_handle+0x138>
			{
				fsm_subestado = 0;
 8009504:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <fsm_temp_deseada_handle+0x148>)
 8009506:	2200      	movs	r2, #0
 8009508:	701a      	strb	r2, [r3, #0]
				//espera un segundo y vuelve al estado 0
			}
			break;
 800950a:	e00f      	b.n	800952c <fsm_temp_deseada_handle+0x138>

		case 2:  // delay de salida
			if (ultima_interaccion_ms >= 500) 
 800950c:	4b15      	ldr	r3, [pc, #84]	@ (8009564 <fsm_temp_deseada_handle+0x170>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009514:	d30c      	bcc.n	8009530 <fsm_temp_deseada_handle+0x13c>
			{
				estado_actual = estado_fabricante;
 8009516:	4b16      	ldr	r3, [pc, #88]	@ (8009570 <fsm_temp_deseada_handle+0x17c>)
 8009518:	2202      	movs	r2, #2
 800951a:	701a      	strb	r2, [r3, #0]
				fsm_subestado = 0;
 800951c:	4b07      	ldr	r3, [pc, #28]	@ (800953c <fsm_temp_deseada_handle+0x148>)
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
				// desp de cancelar espera 500ms y vuelve a 'modo fabrica'
			}
			break;
 8009522:	e005      	b.n	8009530 <fsm_temp_deseada_handle+0x13c>
			break;
 8009524:	bf00      	nop
 8009526:	e004      	b.n	8009532 <fsm_temp_deseada_handle+0x13e>
			break;
 8009528:	bf00      	nop
 800952a:	e002      	b.n	8009532 <fsm_temp_deseada_handle+0x13e>
			break;
 800952c:	bf00      	nop
 800952e:	e000      	b.n	8009532 <fsm_temp_deseada_handle+0x13e>
			break;
 8009530:	bf00      	nop
	}
}
 8009532:	bf00      	nop
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	2000056d 	.word	0x2000056d
 8009540:	20000548 	.word	0x20000548
 8009544:	00100101 	.word	0x00100101
 8009548:	2000058c 	.word	0x2000058c
 800954c:	0800ee54 	.word	0x0800ee54
 8009550:	2000001c 	.word	0x2000001c
 8009554:	0800ee60 	.word	0x0800ee60
 8009558:	0800edf4 	.word	0x0800edf4
 800955c:	0800ed68 	.word	0x0800ed68
 8009560:	0800ed30 	.word	0x0800ed30
 8009564:	20000580 	.word	0x20000580
 8009568:	2000061c 	.word	0x2000061c
 800956c:	0800ee6c 	.word	0x0800ee6c
 8009570:	2000057d 	.word	0x2000057d

08009574 <fsm_menu_principal_handle>:

static void fsm_menu_principal_handle(evento_t e) //maneja pantalla principal del usuario
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b088      	sub	sp, #32
 8009578:	af02      	add	r7, sp, #8
 800957a:	4603      	mov	r3, r0
 800957c:	71fb      	strb	r3, [r7, #7]
	switch (fsm_subestado)
 800957e:	4b26      	ldr	r3, [pc, #152]	@ (8009618 <fsm_menu_principal_handle+0xa4>)
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d039      	beq.n	80095fa <fsm_menu_principal_handle+0x86>
 8009586:	2b02      	cmp	r3, #2
 8009588:	dc41      	bgt.n	800960e <fsm_menu_principal_handle+0x9a>
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <fsm_menu_principal_handle+0x20>
 800958e:	2b01      	cmp	r3, #1
 8009590:	d027      	beq.n	80095e2 <fsm_menu_principal_handle+0x6e>
				//entra a seleccion de cafe 
			}
			break;

	}
}
 8009592:	e03c      	b.n	800960e <fsm_menu_principal_handle+0x9a>
			mostrar_estado_leds(estado_actual);
 8009594:	4b21      	ldr	r3, [pc, #132]	@ (800961c <fsm_menu_principal_handle+0xa8>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fdd7 	bl	800814c <mostrar_estado_leds>
			if (temp_actual <= temp_deseada) //si temp actual no alcanzo la deseada
 800959e:	4b20      	ldr	r3, [pc, #128]	@ (8009620 <fsm_menu_principal_handle+0xac>)
 80095a0:	781a      	ldrb	r2, [r3, #0]
 80095a2:	4b20      	ldr	r3, [pc, #128]	@ (8009624 <fsm_menu_principal_handle+0xb0>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d817      	bhi.n	80095da <fsm_menu_principal_handle+0x66>
				lcd_print_if_changed(0, "Calentando...   ");
 80095aa:	491f      	ldr	r1, [pc, #124]	@ (8009628 <fsm_menu_principal_handle+0xb4>)
 80095ac:	2000      	movs	r0, #0
 80095ae:	f000 fea9 	bl	800a304 <lcd_print_if_changed>
				snprintf(linea, sizeof(linea), "T:%d/%d", temp_actual, temp_deseada);
 80095b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009620 <fsm_menu_principal_handle+0xac>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009624 <fsm_menu_principal_handle+0xb0>)
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	f107 0008 	add.w	r0, r7, #8
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	4613      	mov	r3, r2
 80095c4:	4a19      	ldr	r2, [pc, #100]	@ (800962c <fsm_menu_principal_handle+0xb8>)
 80095c6:	2110      	movs	r1, #16
 80095c8:	f002 fcc8 	bl	800bf5c <sniprintf>
				lcd_print_if_changed(1, linea);
 80095cc:	f107 0308 	add.w	r3, r7, #8
 80095d0:	4619      	mov	r1, r3
 80095d2:	2001      	movs	r0, #1
 80095d4:	f000 fe96 	bl	800a304 <lcd_print_if_changed>
			break;
 80095d8:	e019      	b.n	800960e <fsm_menu_principal_handle+0x9a>
				fsm_subestado = 1;
 80095da:	4b0f      	ldr	r3, [pc, #60]	@ (8009618 <fsm_menu_principal_handle+0xa4>)
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]
			break;
 80095e0:	e015      	b.n	800960e <fsm_menu_principal_handle+0x9a>
			lcd_print_if_changed(0, "Selecciona cafe ");
 80095e2:	4913      	ldr	r1, [pc, #76]	@ (8009630 <fsm_menu_principal_handle+0xbc>)
 80095e4:	2000      	movs	r0, #0
 80095e6:	f000 fe8d 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, "mueva el cursor");
 80095ea:	4912      	ldr	r1, [pc, #72]	@ (8009634 <fsm_menu_principal_handle+0xc0>)
 80095ec:	2001      	movs	r0, #1
 80095ee:	f000 fe89 	bl	800a304 <lcd_print_if_changed>
			fsm_subestado = 2;
 80095f2:	4b09      	ldr	r3, [pc, #36]	@ (8009618 <fsm_menu_principal_handle+0xa4>)
 80095f4:	2202      	movs	r2, #2
 80095f6:	701a      	strb	r2, [r3, #0]
			break;
 80095f8:	e009      	b.n	800960e <fsm_menu_principal_handle+0x9a>
			if(e != EVENT_NONE){
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <fsm_menu_principal_handle+0x98>
				estado_actual = estado_seleccion_cafe;
 8009600:	4b06      	ldr	r3, [pc, #24]	@ (800961c <fsm_menu_principal_handle+0xa8>)
 8009602:	2206      	movs	r2, #6
 8009604:	701a      	strb	r2, [r3, #0]
				fsm_subestado = 0;
 8009606:	4b04      	ldr	r3, [pc, #16]	@ (8009618 <fsm_menu_principal_handle+0xa4>)
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
			break;
 800960c:	bf00      	nop
}
 800960e:	bf00      	nop
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	2000056d 	.word	0x2000056d
 800961c:	2000057d 	.word	0x2000057d
 8009620:	20000554 	.word	0x20000554
 8009624:	2000001c 	.word	0x2000001c
 8009628:	0800ee7c 	.word	0x0800ee7c
 800962c:	0800ee90 	.word	0x0800ee90
 8009630:	0800ee98 	.word	0x0800ee98
 8009634:	0800eeac 	.word	0x0800eeac

08009638 <fsm_seleccion_cafe_handle>:

static void fsm_seleccion_cafe_handle(evento_t e) //maneja estado seleccion_cafe
{
 8009638:	b5b0      	push	{r4, r5, r7, lr}
 800963a:	b08e      	sub	sp, #56	@ 0x38
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
	const char* nombres[] = {
 8009642:	4b93      	ldr	r3, [pc, #588]	@ (8009890 <fsm_seleccion_cafe_handle+0x258>)
 8009644:	f107 0420 	add.w	r4, r7, #32
 8009648:	461d      	mov	r5, r3
 800964a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800964c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800964e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009652:	e884 0003 	stmia.w	r4, {r0, r1}
		"Pers. nuevo", "Pers. reciente"
	};
	static uint8_t TOTAL_CAFES = 6; //cantidad total de opciones de café (4 estándar + 2 personalizadas)
	char buf[17]; //Buffer para construir mensajes a mostrar en la segunda línea del LCD

	switch (fsm_subestado)
 8009656:	4b8f      	ldr	r3, [pc, #572]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b05      	cmp	r3, #5
 800965c:	f200 8114 	bhi.w	8009888 <fsm_seleccion_cafe_handle+0x250>
 8009660:	a201      	add	r2, pc, #4	@ (adr r2, 8009668 <fsm_seleccion_cafe_handle+0x30>)
 8009662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009666:	bf00      	nop
 8009668:	08009681 	.word	0x08009681
 800966c:	080096f5 	.word	0x080096f5
 8009670:	08009827 	.word	0x08009827
 8009674:	08009851 	.word	0x08009851
 8009678:	08009863 	.word	0x08009863
 800967c:	08009833 	.word	0x08009833
	{
	case 0:  // mostrar selección
		mostrar_estado_leds(estado_actual);
 8009680:	4b85      	ldr	r3, [pc, #532]	@ (8009898 <fsm_seleccion_cafe_handle+0x260>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	4618      	mov	r0, r3
 8009686:	f7fe fd61 	bl	800814c <mostrar_estado_leds>
		//activa los LEDs según el estado actual (selección de café)

		lcd_print_if_changed(0, nombres[cafe_seleccionado]);
 800968a:	4b84      	ldr	r3, [pc, #528]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	3338      	adds	r3, #56	@ 0x38
 8009692:	443b      	add	r3, r7
 8009694:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009698:	4619      	mov	r1, r3
 800969a:	2000      	movs	r0, #0
 800969c:	f000 fe32 	bl	800a304 <lcd_print_if_changed>
		//muestra el nombre del café actualmente seleccionado en la primera línea del LCD

		if (cafe_seleccionado < CAFE_PERSONALIZADO) {
 80096a0:	4b7e      	ldr	r3, [pc, #504]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d808      	bhi.n	80096ba <fsm_seleccion_cafe_handle+0x82>
			snprintf(buf, sizeof(buf), "Temp=%dC", temp_actual);
 80096a8:	4b7d      	ldr	r3, [pc, #500]	@ (80098a0 <fsm_seleccion_cafe_handle+0x268>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f107 000c 	add.w	r0, r7, #12
 80096b0:	4a7c      	ldr	r2, [pc, #496]	@ (80098a4 <fsm_seleccion_cafe_handle+0x26c>)
 80096b2:	2111      	movs	r1, #17
 80096b4:	f002 fc52 	bl	800bf5c <sniprintf>
 80096b8:	e012      	b.n	80096e0 <fsm_seleccion_cafe_handle+0xa8>
			//si es un café estándar, muestra la temp actual

		} else if (cafe_seleccionado == CAFE_PERSONALIZADO) {
 80096ba:	4b78      	ldr	r3, [pc, #480]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d107      	bne.n	80096d2 <fsm_seleccion_cafe_handle+0x9a>
			snprintf(buf, sizeof(buf), "Configura nuevo");
 80096c2:	f107 030c 	add.w	r3, r7, #12
 80096c6:	4a78      	ldr	r2, [pc, #480]	@ (80098a8 <fsm_seleccion_cafe_handle+0x270>)
 80096c8:	2111      	movs	r1, #17
 80096ca:	4618      	mov	r0, r3
 80096cc:	f002 fc46 	bl	800bf5c <sniprintf>
 80096d0:	e006      	b.n	80096e0 <fsm_seleccion_cafe_handle+0xa8>
			//si es personalizado nueo indica que se debe configurar
		} else {
			snprintf(buf, sizeof(buf), "Usar ultimo");
 80096d2:	f107 030c 	add.w	r3, r7, #12
 80096d6:	4a75      	ldr	r2, [pc, #468]	@ (80098ac <fsm_seleccion_cafe_handle+0x274>)
 80096d8:	2111      	movs	r1, #17
 80096da:	4618      	mov	r0, r3
 80096dc:	f002 fc3e 	bl	800bf5c <sniprintf>
			//si es personalizado usado indica 'usar ultimo'
		}
		
		lcd_print_if_changed(1, buf);
 80096e0:	f107 030c 	add.w	r3, r7, #12
 80096e4:	4619      	mov	r1, r3
 80096e6:	2001      	movs	r0, #1
 80096e8:	f000 fe0c 	bl	800a304 <lcd_print_if_changed>
		fsm_subestado = 1;
 80096ec:	4b69      	ldr	r3, [pc, #420]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 80096ee:	2201      	movs	r2, #1
 80096f0:	701a      	strb	r2, [r3, #0]
		break;
 80096f2:	e0c9      	b.n	8009888 <fsm_seleccion_cafe_handle+0x250>

	case 1: //esperar interacción

		if (e == EVENT_JOY_UP) //si joystick hacia arriba pasa a sig opcion cafe
 80096f4:	79fb      	ldrb	r3, [r7, #7]
 80096f6:	2b05      	cmp	r3, #5
 80096f8:	d10f      	bne.n	800971a <fsm_seleccion_cafe_handle+0xe2>
		{
			cafe_seleccionado = (cafe_seleccionado + 1) % TOTAL_CAFES;
 80096fa:	4b68      	ldr	r3, [pc, #416]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	3301      	adds	r3, #1
 8009700:	4a6b      	ldr	r2, [pc, #428]	@ (80098b0 <fsm_seleccion_cafe_handle+0x278>)
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	fb93 f1f2 	sdiv	r1, r3, r2
 8009708:	fb01 f202 	mul.w	r2, r1, r2
 800970c:	1a9b      	subs	r3, r3, r2
 800970e:	b2da      	uxtb	r2, r3
 8009710:	4b62      	ldr	r3, [pc, #392]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 8009712:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 8009714:	4b5f      	ldr	r3, [pc, #380]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
		}

		if (e == EVENT_JOY_DOWN) //si joystick hacia abajo va hacia opcion anterior
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b06      	cmp	r3, #6
 800971e:	d111      	bne.n	8009744 <fsm_seleccion_cafe_handle+0x10c>
		{
			cafe_seleccionado = (cafe_seleccionado == 0) ? TOTAL_CAFES - 1 : cafe_seleccionado - 1;
 8009720:	4b5e      	ldr	r3, [pc, #376]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d104      	bne.n	8009732 <fsm_seleccion_cafe_handle+0xfa>
 8009728:	4b61      	ldr	r3, [pc, #388]	@ (80098b0 <fsm_seleccion_cafe_handle+0x278>)
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	3b01      	subs	r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	e003      	b.n	800973a <fsm_seleccion_cafe_handle+0x102>
 8009732:	4b5a      	ldr	r3, [pc, #360]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	3b01      	subs	r3, #1
 8009738:	b2db      	uxtb	r3, r3
 800973a:	4a58      	ldr	r2, [pc, #352]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 800973c:	7013      	strb	r3, [r2, #0]
			fsm_subestado = 0;
 800973e:	4b55      	ldr	r3, [pc, #340]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
		}

		if (e == EVENT_BOTON1_EDGE)//si boton azul confirma seleccion
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d14f      	bne.n	80097ea <fsm_seleccion_cafe_handle+0x1b2>
		{
			if (cafe_seleccionado == CAFE_PERSONALIZADO) {
 800974a:	4b54      	ldr	r3, [pc, #336]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b04      	cmp	r3, #4
 8009750:	d106      	bne.n	8009760 <fsm_seleccion_cafe_handle+0x128>
				estado_actual = estado_cafe_personalizado;
 8009752:	4b51      	ldr	r3, [pc, #324]	@ (8009898 <fsm_seleccion_cafe_handle+0x260>)
 8009754:	2207      	movs	r2, #7
 8009756:	701a      	strb	r2, [r3, #0]
				fsm_subestado = 0;
 8009758:	4b4e      	ldr	r3, [pc, #312]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	e044      	b.n	80097ea <fsm_seleccion_cafe_handle+0x1b2>
				//si selecciono personalizado nuevo, se pasa a estado_cafe_personalizado
			} else if (cafe_seleccionado == CAFE_ULTIMO) {
 8009760:	4b4e      	ldr	r3, [pc, #312]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b05      	cmp	r3, #5
 8009766:	d11e      	bne.n	80097a6 <fsm_seleccion_cafe_handle+0x16e>
				//si se eligio personalizado anterior
				if (check_stock_receta(receta_personal)) {
 8009768:	4852      	ldr	r0, [pc, #328]	@ (80098b4 <fsm_seleccion_cafe_handle+0x27c>)
 800976a:	f001 faf7 	bl	800ad5c <check_stock_receta>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00d      	beq.n	8009790 <fsm_seleccion_cafe_handle+0x158>
					descontar_stock_receta(receta_personal);
 8009774:	484f      	ldr	r0, [pc, #316]	@ (80098b4 <fsm_seleccion_cafe_handle+0x27c>)
 8009776:	f001 fb27 	bl	800adc8 <descontar_stock_receta>
					lcd_print_if_changed(0, "Preparando...");
 800977a:	494f      	ldr	r1, [pc, #316]	@ (80098b8 <fsm_seleccion_cafe_handle+0x280>)
 800977c:	2000      	movs	r0, #0
 800977e:	f000 fdc1 	bl	800a304 <lcd_print_if_changed>
					ultima_interaccion_ms = 0;
 8009782:	4b4e      	ldr	r3, [pc, #312]	@ (80098bc <fsm_seleccion_cafe_handle+0x284>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
					fsm_subestado = 2;
 8009788:	4b42      	ldr	r3, [pc, #264]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 800978a:	2202      	movs	r2, #2
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	e02c      	b.n	80097ea <fsm_seleccion_cafe_handle+0x1b2>
					//si hay stock, se descuenta y pasa a subestado 2
				} else {
					lcd_print_if_changed(0, "Sin stock!");
 8009790:	494b      	ldr	r1, [pc, #300]	@ (80098c0 <fsm_seleccion_cafe_handle+0x288>)
 8009792:	2000      	movs	r0, #0
 8009794:	f000 fdb6 	bl	800a304 <lcd_print_if_changed>
					ultima_interaccion_ms = 0;
 8009798:	4b48      	ldr	r3, [pc, #288]	@ (80098bc <fsm_seleccion_cafe_handle+0x284>)
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
					fsm_subestado = 3;
 800979e:	4b3d      	ldr	r3, [pc, #244]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 80097a0:	2203      	movs	r2, #3
 80097a2:	701a      	strb	r2, [r3, #0]
 80097a4:	e021      	b.n	80097ea <fsm_seleccion_cafe_handle+0x1b2>
					//si no hay stock, se muestra sin stock y pasa a subestado 3
				}
			} else {
				if (check_stock(cafe_seleccionado)) {
 80097a6:	4b3d      	ldr	r3, [pc, #244]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f001 fa4a 	bl	800ac44 <check_stock>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <fsm_seleccion_cafe_handle+0x19e>
					descontar_stock(cafe_seleccionado);
 80097b6:	4b39      	ldr	r3, [pc, #228]	@ (800989c <fsm_seleccion_cafe_handle+0x264>)
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 fa88 	bl	800acd0 <descontar_stock>
					lcd_print_if_changed(0, "Preparando...");
 80097c0:	493d      	ldr	r1, [pc, #244]	@ (80098b8 <fsm_seleccion_cafe_handle+0x280>)
 80097c2:	2000      	movs	r0, #0
 80097c4:	f000 fd9e 	bl	800a304 <lcd_print_if_changed>
					ultima_interaccion_ms = 0;
 80097c8:	4b3c      	ldr	r3, [pc, #240]	@ (80098bc <fsm_seleccion_cafe_handle+0x284>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
					fsm_subestado = 2;
 80097ce:	4b31      	ldr	r3, [pc, #196]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 80097d0:	2202      	movs	r2, #2
 80097d2:	701a      	strb	r2, [r3, #0]
 80097d4:	e009      	b.n	80097ea <fsm_seleccion_cafe_handle+0x1b2>
					//si hay stock, se descuenta y pasa a subestado 2
				} else {
					lcd_print_if_changed(0, "Sin stock!");
 80097d6:	493a      	ldr	r1, [pc, #232]	@ (80098c0 <fsm_seleccion_cafe_handle+0x288>)
 80097d8:	2000      	movs	r0, #0
 80097da:	f000 fd93 	bl	800a304 <lcd_print_if_changed>
					ultima_interaccion_ms = 0;
 80097de:	4b37      	ldr	r3, [pc, #220]	@ (80098bc <fsm_seleccion_cafe_handle+0x284>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
					fsm_subestado = 3;
 80097e4:	4b2b      	ldr	r3, [pc, #172]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 80097e6:	2203      	movs	r2, #3
 80097e8:	701a      	strb	r2, [r3, #0]
					//si no hay stock, se muestra sin stock y pasa a subestado 3 
				}
			}
		}

		if (e == EVENT_JOY_LEFT) //si joystick hacia izq se cancela seleccion
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d10d      	bne.n	800980c <fsm_seleccion_cafe_handle+0x1d4>
		{
			lcd_print_if_changed(0, "Saliendo...");
 80097f0:	4934      	ldr	r1, [pc, #208]	@ (80098c4 <fsm_seleccion_cafe_handle+0x28c>)
 80097f2:	2000      	movs	r0, #0
 80097f4:	f000 fd86 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, "");
 80097f8:	4933      	ldr	r1, [pc, #204]	@ (80098c8 <fsm_seleccion_cafe_handle+0x290>)
 80097fa:	2001      	movs	r0, #1
 80097fc:	f000 fd82 	bl	800a304 <lcd_print_if_changed>
			ultima_interaccion_ms = 0;
 8009800:	4b2e      	ldr	r3, [pc, #184]	@ (80098bc <fsm_seleccion_cafe_handle+0x284>)
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
			fsm_subestado = 4;
 8009806:	4b23      	ldr	r3, [pc, #140]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 8009808:	2204      	movs	r2, #4
 800980a:	701a      	strb	r2, [r3, #0]
			//salida
		}

		if (temp_actual <= temp_deseada) 
 800980c:	4b24      	ldr	r3, [pc, #144]	@ (80098a0 <fsm_seleccion_cafe_handle+0x268>)
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	4b2e      	ldr	r3, [pc, #184]	@ (80098cc <fsm_seleccion_cafe_handle+0x294>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	d830      	bhi.n	800987a <fsm_seleccion_cafe_handle+0x242>
		{
			estado_actual = estado_menu_principal;
 8009818:	4b1f      	ldr	r3, [pc, #124]	@ (8009898 <fsm_seleccion_cafe_handle+0x260>)
 800981a:	2205      	movs	r2, #5
 800981c:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 800981e:	4b1d      	ldr	r3, [pc, #116]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 8009820:	2200      	movs	r2, #0
 8009822:	701a      	strb	r2, [r3, #0]
			//si la temp baja de la deseada mientras el usuario elige, se vuelve al estado anterior
		}
		break;
 8009824:	e029      	b.n	800987a <fsm_seleccion_cafe_handle+0x242>

	case 2:  //inicia guardado de config cafe en eeprom
		eeprom_start_save();
 8009826:	f001 fc1b 	bl	800b060 <eeprom_start_save>
		fsm_subestado = 5;
 800982a:	4b1a      	ldr	r3, [pc, #104]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 800982c:	2205      	movs	r2, #5
 800982e:	701a      	strb	r2, [r3, #0]
		break;
 8009830:	e02a      	b.n	8009888 <fsm_seleccion_cafe_handle+0x250>

	case 5:  //espero fin de guardado de eeprom
		if (eeprom_terminado) {
 8009832:	4b27      	ldr	r3, [pc, #156]	@ (80098d0 <fsm_seleccion_cafe_handle+0x298>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d020      	beq.n	800987e <fsm_seleccion_cafe_handle+0x246>
			eeprom_terminado = 0;
 800983c:	4b24      	ldr	r3, [pc, #144]	@ (80098d0 <fsm_seleccion_cafe_handle+0x298>)
 800983e:	2200      	movs	r2, #0
 8009840:	701a      	strb	r2, [r3, #0]
			estado_actual = estado_brewing;
 8009842:	4b15      	ldr	r3, [pc, #84]	@ (8009898 <fsm_seleccion_cafe_handle+0x260>)
 8009844:	2208      	movs	r2, #8
 8009846:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 8009848:	4b12      	ldr	r3, [pc, #72]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800984e:	e016      	b.n	800987e <fsm_seleccion_cafe_handle+0x246>

	case 3:  //mensaje de error por timeout
		if (ultima_interaccion_ms >= 1000) {
 8009850:	4b1a      	ldr	r3, [pc, #104]	@ (80098bc <fsm_seleccion_cafe_handle+0x284>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009858:	d313      	bcc.n	8009882 <fsm_seleccion_cafe_handle+0x24a>
			fsm_subestado = 0;
 800985a:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 800985c:	2200      	movs	r2, #0
 800985e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009860:	e00f      	b.n	8009882 <fsm_seleccion_cafe_handle+0x24a>

	case 4:  //salida al estado OFF
		if (ultima_interaccion_ms >= 1000) {
 8009862:	4b16      	ldr	r3, [pc, #88]	@ (80098bc <fsm_seleccion_cafe_handle+0x284>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800986a:	d30c      	bcc.n	8009886 <fsm_seleccion_cafe_handle+0x24e>
			estado_actual = estado_off;
 800986c:	4b0a      	ldr	r3, [pc, #40]	@ (8009898 <fsm_seleccion_cafe_handle+0x260>)
 800986e:	2200      	movs	r2, #0
 8009870:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 8009872:	4b08      	ldr	r3, [pc, #32]	@ (8009894 <fsm_seleccion_cafe_handle+0x25c>)
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009878:	e005      	b.n	8009886 <fsm_seleccion_cafe_handle+0x24e>
		break;
 800987a:	bf00      	nop
 800987c:	e004      	b.n	8009888 <fsm_seleccion_cafe_handle+0x250>
		break;
 800987e:	bf00      	nop
 8009880:	e002      	b.n	8009888 <fsm_seleccion_cafe_handle+0x250>
		break;
 8009882:	bf00      	nop
 8009884:	e000      	b.n	8009888 <fsm_seleccion_cafe_handle+0x250>
		break;
 8009886:	bf00      	nop
	}
}
 8009888:	bf00      	nop
 800988a:	3738      	adds	r7, #56	@ 0x38
 800988c:	46bd      	mov	sp, r7
 800988e:	bdb0      	pop	{r4, r5, r7, pc}
 8009890:	0800ef40 	.word	0x0800ef40
 8009894:	2000056d 	.word	0x2000056d
 8009898:	2000057d 	.word	0x2000057d
 800989c:	2000057c 	.word	0x2000057c
 80098a0:	20000554 	.word	0x20000554
 80098a4:	0800eebc 	.word	0x0800eebc
 80098a8:	0800eec8 	.word	0x0800eec8
 80098ac:	0800eed8 	.word	0x0800eed8
 80098b0:	2000005c 	.word	0x2000005c
 80098b4:	20000578 	.word	0x20000578
 80098b8:	0800eee4 	.word	0x0800eee4
 80098bc:	20000580 	.word	0x20000580
 80098c0:	0800eef4 	.word	0x0800eef4
 80098c4:	0800ed68 	.word	0x0800ed68
 80098c8:	0800ed30 	.word	0x0800ed30
 80098cc:	2000001c 	.word	0x2000001c
 80098d0:	2000061c 	.word	0x2000061c

080098d4 <fsm_personal_handle>:

static void fsm_personal_handle(evento_t e) //manejo estado_cafe_person
{
 80098d4:	b590      	push	{r4, r7, lr}
 80098d6:	b08b      	sub	sp, #44	@ 0x2c
 80098d8:	af02      	add	r7, sp, #8
 80098da:	4603      	mov	r3, r0
 80098dc:	71fb      	strb	r3, [r7, #7]
	static uint8_t ingrediente_idx = 0; //indice del ingrediente actualmente seleccionado (0 a 3)
	static const char* nombres[] = { "Cafe", "Leche", "Agua", "Choc" };

	char buf[17]; //buffer para construir mensajes a mostrar en el LCD (líneas de 16 caracteres + '\0')

	switch (fsm_subestado){
 80098de:	4b9b      	ldr	r3, [pc, #620]	@ (8009b4c <fsm_personal_handle+0x278>)
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	f200 816d 	bhi.w	8009bc2 <fsm_personal_handle+0x2ee>
 80098e8:	a201      	add	r2, pc, #4	@ (adr r2, 80098f0 <fsm_personal_handle+0x1c>)
 80098ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ee:	bf00      	nop
 80098f0:	08009905 	.word	0x08009905
 80098f4:	08009973 	.word	0x08009973
 80098f8:	08009b9d 	.word	0x08009b9d
 80098fc:	08009b0b 	.word	0x08009b0b
 8009900:	08009b1d 	.word	0x08009b1d
	
	case 0:  // mostrar ingrediente actual y cantidad
		snprintf(buf, sizeof(buf), "%s: %2d", nombres[ingrediente_idx], receta_tmp[ingrediente_idx]);
 8009904:	4b92      	ldr	r3, [pc, #584]	@ (8009b50 <fsm_personal_handle+0x27c>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	4b92      	ldr	r3, [pc, #584]	@ (8009b54 <fsm_personal_handle+0x280>)
 800990c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009910:	4a8f      	ldr	r2, [pc, #572]	@ (8009b50 <fsm_personal_handle+0x27c>)
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	4611      	mov	r1, r2
 8009916:	4a90      	ldr	r2, [pc, #576]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009918:	5c52      	ldrb	r2, [r2, r1]
 800991a:	f107 000c 	add.w	r0, r7, #12
 800991e:	9200      	str	r2, [sp, #0]
 8009920:	4a8e      	ldr	r2, [pc, #568]	@ (8009b5c <fsm_personal_handle+0x288>)
 8009922:	2111      	movs	r1, #17
 8009924:	f002 fb1a 	bl	800bf5c <sniprintf>
		lcd_print_if_changed(0, buf);
 8009928:	f107 030c 	add.w	r3, r7, #12
 800992c:	4619      	mov	r1, r3
 800992e:	2000      	movs	r0, #0
 8009930:	f000 fce8 	bl	800a304 <lcd_print_if_changed>
		//imprime en la primera línea qué ingrediente se está configurando y su cantidad

		uint8_t total_shots = receta_tmp[0] + receta_tmp[1] + receta_tmp[2] + receta_tmp[3];
 8009934:	4b88      	ldr	r3, [pc, #544]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009936:	781a      	ldrb	r2, [r3, #0]
 8009938:	4b87      	ldr	r3, [pc, #540]	@ (8009b58 <fsm_personal_handle+0x284>)
 800993a:	785b      	ldrb	r3, [r3, #1]
 800993c:	4413      	add	r3, r2
 800993e:	b2da      	uxtb	r2, r3
 8009940:	4b85      	ldr	r3, [pc, #532]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009942:	789b      	ldrb	r3, [r3, #2]
 8009944:	4413      	add	r3, r2
 8009946:	b2da      	uxtb	r2, r3
 8009948:	4b83      	ldr	r3, [pc, #524]	@ (8009b58 <fsm_personal_handle+0x284>)
 800994a:	78db      	ldrb	r3, [r3, #3]
 800994c:	4413      	add	r3, r2
 800994e:	777b      	strb	r3, [r7, #29]
		snprintf(buf, sizeof(buf), "Shots: %d", total_shots);
 8009950:	7f7b      	ldrb	r3, [r7, #29]
 8009952:	f107 000c 	add.w	r0, r7, #12
 8009956:	4a82      	ldr	r2, [pc, #520]	@ (8009b60 <fsm_personal_handle+0x28c>)
 8009958:	2111      	movs	r1, #17
 800995a:	f002 faff 	bl	800bf5c <sniprintf>
		lcd_print_if_changed(1, buf);
 800995e:	f107 030c 	add.w	r3, r7, #12
 8009962:	4619      	mov	r1, r3
 8009964:	2001      	movs	r0, #1
 8009966:	f000 fccd 	bl	800a304 <lcd_print_if_changed>
		//imprime en la segunda línea el total de shots ya asignados a la receta
		fsm_subestado = 1;
 800996a:	4b78      	ldr	r3, [pc, #480]	@ (8009b4c <fsm_personal_handle+0x278>)
 800996c:	2201      	movs	r2, #1
 800996e:	701a      	strb	r2, [r3, #0]
		break;
 8009970:	e127      	b.n	8009bc2 <fsm_personal_handle+0x2ee>

	case 1:  //esperar interacción
		if (e == EVENT_JOY_UP)//si joystick hacia arriba intenta aumentar shot del ingrediente actual 
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	2b05      	cmp	r3, #5
 8009976:	d12f      	bne.n	80099d8 <fsm_personal_handle+0x104>
		{
			uint8_t total = receta_tmp[0] + receta_tmp[1] + receta_tmp[2] + receta_tmp[3];
 8009978:	4b77      	ldr	r3, [pc, #476]	@ (8009b58 <fsm_personal_handle+0x284>)
 800997a:	781a      	ldrb	r2, [r3, #0]
 800997c:	4b76      	ldr	r3, [pc, #472]	@ (8009b58 <fsm_personal_handle+0x284>)
 800997e:	785b      	ldrb	r3, [r3, #1]
 8009980:	4413      	add	r3, r2
 8009982:	b2da      	uxtb	r2, r3
 8009984:	4b74      	ldr	r3, [pc, #464]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009986:	789b      	ldrb	r3, [r3, #2]
 8009988:	4413      	add	r3, r2
 800998a:	b2da      	uxtb	r2, r3
 800998c:	4b72      	ldr	r3, [pc, #456]	@ (8009b58 <fsm_personal_handle+0x284>)
 800998e:	78db      	ldrb	r3, [r3, #3]
 8009990:	4413      	add	r3, r2
 8009992:	77fb      	strb	r3, [r7, #31]
			if (receta_tmp[ingrediente_idx] < 20 &&
 8009994:	4b6e      	ldr	r3, [pc, #440]	@ (8009b50 <fsm_personal_handle+0x27c>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	4b6f      	ldr	r3, [pc, #444]	@ (8009b58 <fsm_personal_handle+0x284>)
 800999c:	5c9b      	ldrb	r3, [r3, r2]
 800999e:	2b13      	cmp	r3, #19
 80099a0:	d817      	bhi.n	80099d2 <fsm_personal_handle+0xfe>
 80099a2:	7ffb      	ldrb	r3, [r7, #31]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d814      	bhi.n	80099d2 <fsm_personal_handle+0xfe>
				total < 4 &&
				receta_tmp[ingrediente_idx] < get_stock(ingrediente_idx)) {
 80099a8:	4b69      	ldr	r3, [pc, #420]	@ (8009b50 <fsm_personal_handle+0x27c>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	4b6a      	ldr	r3, [pc, #424]	@ (8009b58 <fsm_personal_handle+0x284>)
 80099b0:	5c9c      	ldrb	r4, [r3, r2]
 80099b2:	4b67      	ldr	r3, [pc, #412]	@ (8009b50 <fsm_personal_handle+0x27c>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 fa36 	bl	800ae28 <get_stock>
 80099bc:	4603      	mov	r3, r0
				total < 4 &&
 80099be:	429c      	cmp	r4, r3
 80099c0:	d207      	bcs.n	80099d2 <fsm_personal_handle+0xfe>
				receta_tmp[ingrediente_idx]++;
 80099c2:	4b63      	ldr	r3, [pc, #396]	@ (8009b50 <fsm_personal_handle+0x27c>)
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	4a64      	ldr	r2, [pc, #400]	@ (8009b58 <fsm_personal_handle+0x284>)
 80099c8:	5cd2      	ldrb	r2, [r2, r3]
 80099ca:	3201      	adds	r2, #1
 80099cc:	b2d1      	uxtb	r1, r2
 80099ce:	4a62      	ldr	r2, [pc, #392]	@ (8009b58 <fsm_personal_handle+0x284>)
 80099d0:	54d1      	strb	r1, [r2, r3]
				//condiciones: máximo 20 por ingrediente, máximo 4 en total para la receta, no mas que stock disponible 
			}
			fsm_subestado = 0;
 80099d2:	4b5e      	ldr	r3, [pc, #376]	@ (8009b4c <fsm_personal_handle+0x278>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
		}

		if (e == EVENT_JOY_DOWN)//si joystick hacia abajo, decrementa valor del ingrediente 
 80099d8:	79fb      	ldrb	r3, [r7, #7]
 80099da:	2b06      	cmp	r3, #6
 80099dc:	d111      	bne.n	8009a02 <fsm_personal_handle+0x12e>
		{
			if (receta_tmp[ingrediente_idx] > 0) {
 80099de:	4b5c      	ldr	r3, [pc, #368]	@ (8009b50 <fsm_personal_handle+0x27c>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	4b5c      	ldr	r3, [pc, #368]	@ (8009b58 <fsm_personal_handle+0x284>)
 80099e6:	5c9b      	ldrb	r3, [r3, r2]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d007      	beq.n	80099fc <fsm_personal_handle+0x128>
				receta_tmp[ingrediente_idx]--;
 80099ec:	4b58      	ldr	r3, [pc, #352]	@ (8009b50 <fsm_personal_handle+0x27c>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	4a59      	ldr	r2, [pc, #356]	@ (8009b58 <fsm_personal_handle+0x284>)
 80099f2:	5cd2      	ldrb	r2, [r2, r3]
 80099f4:	3a01      	subs	r2, #1
 80099f6:	b2d1      	uxtb	r1, r2
 80099f8:	4a57      	ldr	r2, [pc, #348]	@ (8009b58 <fsm_personal_handle+0x284>)
 80099fa:	54d1      	strb	r1, [r2, r3]
			}
			fsm_subestado = 0;
 80099fc:	4b53      	ldr	r3, [pc, #332]	@ (8009b4c <fsm_personal_handle+0x278>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
		}

		if (e == EVENT_JOY_RIGHT) //si joystick hacia der, cambia de ingrediente
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d10f      	bne.n	8009a28 <fsm_personal_handle+0x154>
		{
			ingrediente_idx = (ingrediente_idx + 1) % 4;
 8009a08:	4b51      	ldr	r3, [pc, #324]	@ (8009b50 <fsm_personal_handle+0x27c>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	425a      	negs	r2, r3
 8009a10:	f003 0303 	and.w	r3, r3, #3
 8009a14:	f002 0203 	and.w	r2, r2, #3
 8009a18:	bf58      	it	pl
 8009a1a:	4253      	negpl	r3, r2
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8009b50 <fsm_personal_handle+0x27c>)
 8009a20:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 8009a22:	4b4a      	ldr	r3, [pc, #296]	@ (8009b4c <fsm_personal_handle+0x278>)
 8009a24:	2200      	movs	r2, #0
 8009a26:	701a      	strb	r2, [r3, #0]
		}

		if (e == EVENT_BOTON1_EDGE)//si boton azul 
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	f040 80c2 	bne.w	8009bb4 <fsm_personal_handle+0x2e0>
		{
			uint8_t total = receta_tmp[0] + receta_tmp[1] + receta_tmp[2] + receta_tmp[3];
 8009a30:	4b49      	ldr	r3, [pc, #292]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a32:	781a      	ldrb	r2, [r3, #0]
 8009a34:	4b48      	ldr	r3, [pc, #288]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a36:	785b      	ldrb	r3, [r3, #1]
 8009a38:	4413      	add	r3, r2
 8009a3a:	b2da      	uxtb	r2, r3
 8009a3c:	4b46      	ldr	r3, [pc, #280]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a3e:	789b      	ldrb	r3, [r3, #2]
 8009a40:	4413      	add	r3, r2
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	4b44      	ldr	r3, [pc, #272]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a46:	78db      	ldrb	r3, [r3, #3]
 8009a48:	4413      	add	r3, r2
 8009a4a:	77bb      	strb	r3, [r7, #30]
			//se calcula la suma total de shots
			if (total == 4 &&
 8009a4c:	7fbb      	ldrb	r3, [r7, #30]
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d14c      	bne.n	8009aec <fsm_personal_handle+0x218>
				receta_tmp[0] <= stock_cafe &&
 8009a52:	4b41      	ldr	r3, [pc, #260]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	4b42      	ldr	r3, [pc, #264]	@ (8009b64 <fsm_personal_handle+0x290>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
			if (total == 4 &&
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	dc45      	bgt.n	8009aec <fsm_personal_handle+0x218>
				receta_tmp[1] <= stock_leche &&
 8009a60:	4b3d      	ldr	r3, [pc, #244]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a62:	785b      	ldrb	r3, [r3, #1]
 8009a64:	461a      	mov	r2, r3
 8009a66:	4b40      	ldr	r3, [pc, #256]	@ (8009b68 <fsm_personal_handle+0x294>)
 8009a68:	681b      	ldr	r3, [r3, #0]
				receta_tmp[0] <= stock_cafe &&
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	dc3e      	bgt.n	8009aec <fsm_personal_handle+0x218>
				receta_tmp[2] <= stock_agua &&
 8009a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a70:	789b      	ldrb	r3, [r3, #2]
 8009a72:	461a      	mov	r2, r3
 8009a74:	4b3d      	ldr	r3, [pc, #244]	@ (8009b6c <fsm_personal_handle+0x298>)
 8009a76:	681b      	ldr	r3, [r3, #0]
				receta_tmp[1] <= stock_leche &&
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	dc37      	bgt.n	8009aec <fsm_personal_handle+0x218>
				receta_tmp[3] <= stock_chocolate) {
 8009a7c:	4b36      	ldr	r3, [pc, #216]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a7e:	78db      	ldrb	r3, [r3, #3]
 8009a80:	461a      	mov	r2, r3
 8009a82:	4b3b      	ldr	r3, [pc, #236]	@ (8009b70 <fsm_personal_handle+0x29c>)
 8009a84:	681b      	ldr	r3, [r3, #0]
				receta_tmp[2] <= stock_agua &&
 8009a86:	429a      	cmp	r2, r3
 8009a88:	dc30      	bgt.n	8009aec <fsm_personal_handle+0x218>
				//si total 4 y suf stock
				//guardar receta
				memcpy(receta_personal, receta_tmp, 4);
 8009a8a:	4b33      	ldr	r3, [pc, #204]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a39      	ldr	r2, [pc, #228]	@ (8009b74 <fsm_personal_handle+0x2a0>)
 8009a90:	6013      	str	r3, [r2, #0]
				stock_cafe      -= receta_tmp[0];
 8009a92:	4b34      	ldr	r3, [pc, #208]	@ (8009b64 <fsm_personal_handle+0x290>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a30      	ldr	r2, [pc, #192]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	1a9b      	subs	r3, r3, r2
 8009a9c:	4a31      	ldr	r2, [pc, #196]	@ (8009b64 <fsm_personal_handle+0x290>)
 8009a9e:	6013      	str	r3, [r2, #0]
				stock_leche     -= receta_tmp[1];
 8009aa0:	4b31      	ldr	r3, [pc, #196]	@ (8009b68 <fsm_personal_handle+0x294>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009aa6:	7852      	ldrb	r2, [r2, #1]
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8009b68 <fsm_personal_handle+0x294>)
 8009aac:	6013      	str	r3, [r2, #0]
				stock_agua      -= receta_tmp[2];
 8009aae:	4b2f      	ldr	r3, [pc, #188]	@ (8009b6c <fsm_personal_handle+0x298>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a29      	ldr	r2, [pc, #164]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009ab4:	7892      	ldrb	r2, [r2, #2]
 8009ab6:	1a9b      	subs	r3, r3, r2
 8009ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8009b6c <fsm_personal_handle+0x298>)
 8009aba:	6013      	str	r3, [r2, #0]
				stock_chocolate -= receta_tmp[3];
 8009abc:	4b2c      	ldr	r3, [pc, #176]	@ (8009b70 <fsm_personal_handle+0x29c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a25      	ldr	r2, [pc, #148]	@ (8009b58 <fsm_personal_handle+0x284>)
 8009ac2:	78d2      	ldrb	r2, [r2, #3]
 8009ac4:	1a9b      	subs	r3, r3, r2
 8009ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b70 <fsm_personal_handle+0x29c>)
 8009ac8:	6013      	str	r3, [r2, #0]
				//descuenta stock actual
				//actualiza seleccion seleccion
				cafe_seleccionado = CAFE_PERSONALIZADO;
 8009aca:	4b2b      	ldr	r3, [pc, #172]	@ (8009b78 <fsm_personal_handle+0x2a4>)
 8009acc:	2204      	movs	r2, #4
 8009ace:	701a      	strb	r2, [r3, #0]

				lcd_print_if_changed(0, "Guardando...");
 8009ad0:	492a      	ldr	r1, [pc, #168]	@ (8009b7c <fsm_personal_handle+0x2a8>)
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	f000 fc16 	bl	800a304 <lcd_print_if_changed>
				lcd_print_if_changed(1, "");
 8009ad8:	4929      	ldr	r1, [pc, #164]	@ (8009b80 <fsm_personal_handle+0x2ac>)
 8009ada:	2001      	movs	r0, #1
 8009adc:	f000 fc12 	bl	800a304 <lcd_print_if_changed>
				eeprom_start_save();
 8009ae0:	f001 fabe 	bl	800b060 <eeprom_start_save>
				fsm_subestado = 4;
 8009ae4:	4b19      	ldr	r3, [pc, #100]	@ (8009b4c <fsm_personal_handle+0x278>)
 8009ae6:	2204      	movs	r2, #4
 8009ae8:	701a      	strb	r2, [r3, #0]
				lcd_print_if_changed(1, "Stock/Max=4!");
				ultima_interaccion_ms = 0;
				fsm_subestado = 3;
			}
		}
		break;
 8009aea:	e063      	b.n	8009bb4 <fsm_personal_handle+0x2e0>
				lcd_print_if_changed(0, "Error!");
 8009aec:	4925      	ldr	r1, [pc, #148]	@ (8009b84 <fsm_personal_handle+0x2b0>)
 8009aee:	2000      	movs	r0, #0
 8009af0:	f000 fc08 	bl	800a304 <lcd_print_if_changed>
				lcd_print_if_changed(1, "Stock/Max=4!");
 8009af4:	4924      	ldr	r1, [pc, #144]	@ (8009b88 <fsm_personal_handle+0x2b4>)
 8009af6:	2001      	movs	r0, #1
 8009af8:	f000 fc04 	bl	800a304 <lcd_print_if_changed>
				ultima_interaccion_ms = 0;
 8009afc:	4b23      	ldr	r3, [pc, #140]	@ (8009b8c <fsm_personal_handle+0x2b8>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
				fsm_subestado = 3;
 8009b02:	4b12      	ldr	r3, [pc, #72]	@ (8009b4c <fsm_personal_handle+0x278>)
 8009b04:	2203      	movs	r2, #3
 8009b06:	701a      	strb	r2, [r3, #0]
		break;
 8009b08:	e054      	b.n	8009bb4 <fsm_personal_handle+0x2e0>

	case 3:  
		//desp de 1s de mostrar el error, vuelve al menú de edición
		if (ultima_interaccion_ms >= 1000) 
 8009b0a:	4b20      	ldr	r3, [pc, #128]	@ (8009b8c <fsm_personal_handle+0x2b8>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b12:	d351      	bcc.n	8009bb8 <fsm_personal_handle+0x2e4>
		{
			fsm_subestado = 0;
 8009b14:	4b0d      	ldr	r3, [pc, #52]	@ (8009b4c <fsm_personal_handle+0x278>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009b1a:	e04d      	b.n	8009bb8 <fsm_personal_handle+0x2e4>

	case 4:  
		//espera confirmacion de guardado EEPROM
		if (eeprom_terminado) 
 8009b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8009b90 <fsm_personal_handle+0x2bc>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d04a      	beq.n	8009bbc <fsm_personal_handle+0x2e8>
		{
			eeprom_terminado = 0;
 8009b26:	4b1a      	ldr	r3, [pc, #104]	@ (8009b90 <fsm_personal_handle+0x2bc>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	701a      	strb	r2, [r3, #0]
			lcd_print_if_changed(0, "Guardado!");
 8009b2c:	4919      	ldr	r1, [pc, #100]	@ (8009b94 <fsm_personal_handle+0x2c0>)
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f000 fbe8 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, "Preparando...");
 8009b34:	4918      	ldr	r1, [pc, #96]	@ (8009b98 <fsm_personal_handle+0x2c4>)
 8009b36:	2001      	movs	r0, #1
 8009b38:	f000 fbe4 	bl	800a304 <lcd_print_if_changed>
			ultima_interaccion_ms = 0;
 8009b3c:	4b13      	ldr	r3, [pc, #76]	@ (8009b8c <fsm_personal_handle+0x2b8>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]
			fsm_subestado = 2;
 8009b42:	4b02      	ldr	r3, [pc, #8]	@ (8009b4c <fsm_personal_handle+0x278>)
 8009b44:	2202      	movs	r2, #2
 8009b46:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009b48:	e038      	b.n	8009bbc <fsm_personal_handle+0x2e8>
 8009b4a:	bf00      	nop
 8009b4c:	2000056d 	.word	0x2000056d
 8009b50:	2000058d 	.word	0x2000058d
 8009b54:	20000060 	.word	0x20000060
 8009b58:	20000590 	.word	0x20000590
 8009b5c:	0800ef58 	.word	0x0800ef58
 8009b60:	0800ef60 	.word	0x0800ef60
 8009b64:	20000084 	.word	0x20000084
 8009b68:	20000088 	.word	0x20000088
 8009b6c:	2000008c 	.word	0x2000008c
 8009b70:	20000090 	.word	0x20000090
 8009b74:	20000578 	.word	0x20000578
 8009b78:	2000057c 	.word	0x2000057c
 8009b7c:	0800edf4 	.word	0x0800edf4
 8009b80:	0800ed30 	.word	0x0800ed30
 8009b84:	0800ef6c 	.word	0x0800ef6c
 8009b88:	0800ef74 	.word	0x0800ef74
 8009b8c:	20000580 	.word	0x20000580
 8009b90:	2000061c 	.word	0x2000061c
 8009b94:	0800ef84 	.word	0x0800ef84
 8009b98:	0800eee4 	.word	0x0800eee4

	case 2:  // delay previo a brewing
		if (ultima_interaccion_ms >= 800) 
 8009b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8009bcc <fsm_personal_handle+0x2f8>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8009ba4:	d30c      	bcc.n	8009bc0 <fsm_personal_handle+0x2ec>
		{
			estado_actual = estado_brewing;
 8009ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd0 <fsm_personal_handle+0x2fc>)
 8009ba8:	2208      	movs	r2, #8
 8009baa:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 8009bac:	4b09      	ldr	r3, [pc, #36]	@ (8009bd4 <fsm_personal_handle+0x300>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009bb2:	e005      	b.n	8009bc0 <fsm_personal_handle+0x2ec>
		break;
 8009bb4:	bf00      	nop
 8009bb6:	e004      	b.n	8009bc2 <fsm_personal_handle+0x2ee>
		break;
 8009bb8:	bf00      	nop
 8009bba:	e002      	b.n	8009bc2 <fsm_personal_handle+0x2ee>
		break;
 8009bbc:	bf00      	nop
 8009bbe:	e000      	b.n	8009bc2 <fsm_personal_handle+0x2ee>
		break;
 8009bc0:	bf00      	nop
	}
}
 8009bc2:	bf00      	nop
 8009bc4:	3724      	adds	r7, #36	@ 0x24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd90      	pop	{r4, r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20000580 	.word	0x20000580
 8009bd0:	2000057d 	.word	0x2000057d
 8009bd4:	2000056d 	.word	0x2000056d

08009bd8 <fsm_brewing_handle>:

static void fsm_brewing_handle(evento_t e)//maneja el estado brewing
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	71fb      	strb	r3, [r7, #7]
	static uint8_t ingrediente = 0; //indice del ingretinete
	static bool primera_carga = true; //se usa para evitar repetir carga de configuración del ingrediente
	static uint32_t shot_start_time = 0;//marca el inicio (en ms) del inicio del shot actual
	static bool taza_detectada = false;

	switch (fsm_subestado)
 8009be2:	4bad      	ldr	r3, [pc, #692]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2b16      	cmp	r3, #22
 8009be8:	f200 8183 	bhi.w	8009ef2 <fsm_brewing_handle+0x31a>
 8009bec:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <fsm_brewing_handle+0x1c>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009c51 	.word	0x08009c51
 8009bf8:	08009c83 	.word	0x08009c83
 8009bfc:	08009cc7 	.word	0x08009cc7
 8009c00:	08009d37 	.word	0x08009d37
 8009c04:	08009ef3 	.word	0x08009ef3
 8009c08:	08009ef3 	.word	0x08009ef3
 8009c0c:	08009ef3 	.word	0x08009ef3
 8009c10:	08009ef3 	.word	0x08009ef3
 8009c14:	08009ef3 	.word	0x08009ef3
 8009c18:	08009ef3 	.word	0x08009ef3
 8009c1c:	08009d4f 	.word	0x08009d4f
 8009c20:	08009dc1 	.word	0x08009dc1
 8009c24:	08009dfb 	.word	0x08009dfb
 8009c28:	08009ef3 	.word	0x08009ef3
 8009c2c:	08009ef3 	.word	0x08009ef3
 8009c30:	08009ef3 	.word	0x08009ef3
 8009c34:	08009ef3 	.word	0x08009ef3
 8009c38:	08009ef3 	.word	0x08009ef3
 8009c3c:	08009ef3 	.word	0x08009ef3
 8009c40:	08009ef3 	.word	0x08009ef3
 8009c44:	08009e3d 	.word	0x08009e3d
 8009c48:	08009e49 	.word	0x08009e49
 8009c4c:	08009e87 	.word	0x08009e87
	{
	case 0:  //esperar a que el usario coloque la taza
		mostrar_estado_leds(estado_actual);
 8009c50:	4b92      	ldr	r3, [pc, #584]	@ (8009e9c <fsm_brewing_handle+0x2c4>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fa79 	bl	800814c <mostrar_estado_leds>
		lcd_print_if_changed(0, "Coloque la taza"); //imprime el mensaje en pantalla
 8009c5a:	4991      	ldr	r1, [pc, #580]	@ (8009ea0 <fsm_brewing_handle+0x2c8>)
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f000 fb51 	bl	800a304 <lcd_print_if_changed>
		lcd_print_if_changed(1, "                ");
 8009c62:	4990      	ldr	r1, [pc, #576]	@ (8009ea4 <fsm_brewing_handle+0x2cc>)
 8009c64:	2001      	movs	r0, #1
 8009c66:	f000 fb4d 	bl	800a304 <lcd_print_if_changed>
		HCSR04_Trigger(); //activa el sensor ultrasonido
 8009c6a:	f000 fef5 	bl	800aa58 <HCSR04_Trigger>
		ultima_interaccion_ms = 0; //reinicia la ultima interracción con el usuario
 8009c6e:	4b8e      	ldr	r3, [pc, #568]	@ (8009ea8 <fsm_brewing_handle+0x2d0>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]
		taza_detectada = false; //setea la detección en cero hasta pasarla el subestado 1
 8009c74:	4b8d      	ldr	r3, [pc, #564]	@ (8009eac <fsm_brewing_handle+0x2d4>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	701a      	strb	r2, [r3, #0]
		fsm_subestado = 1;
 8009c7a:	4b87      	ldr	r3, [pc, #540]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	701a      	strb	r2, [r3, #0]
		break;
 8009c80:	e137      	b.n	8009ef2 <fsm_brewing_handle+0x31a>

	case 1:
		if (HCSR04_Ready()) {
 8009c82:	f000 ff1b 	bl	800aabc <HCSR04_Ready>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 8125 	beq.w	8009ed8 <fsm_brewing_handle+0x300>
			uint16_t d = HCSR04_GetLast();
 8009c8e:	f000 ff21 	bl	800aad4 <HCSR04_GetLast>
 8009c92:	4603      	mov	r3, r0
 8009c94:	81bb      	strh	r3, [r7, #12]
			if (d > 0 && d <= 3) {
 8009c96:	89bb      	ldrh	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00d      	beq.n	8009cb8 <fsm_brewing_handle+0xe0>
 8009c9c:	89bb      	ldrh	r3, [r7, #12]
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d80a      	bhi.n	8009cb8 <fsm_brewing_handle+0xe0>
				taza_detectada = true; //si detecto taza (a menos de 3cm ) comienza a preparar
 8009ca2:	4b82      	ldr	r3, [pc, #520]	@ (8009eac <fsm_brewing_handle+0x2d4>)
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]
				lcd_print_if_changed(0, "Preparando...");
 8009ca8:	4981      	ldr	r1, [pc, #516]	@ (8009eb0 <fsm_brewing_handle+0x2d8>)
 8009caa:	2000      	movs	r0, #0
 8009cac:	f000 fb2a 	bl	800a304 <lcd_print_if_changed>
				fsm_subestado = 2;
 8009cb0:	4b79      	ldr	r3, [pc, #484]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	701a      	strb	r2, [r3, #0]
			} else {
				ultima_interaccion_ms = 0; //si no detecto,reinicia el contador de interacción y va al subestado 3
				fsm_subestado = 3;
			}
		}
		break;
 8009cb6:	e10f      	b.n	8009ed8 <fsm_brewing_handle+0x300>
				ultima_interaccion_ms = 0; //si no detecto,reinicia el contador de interacción y va al subestado 3
 8009cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8009ea8 <fsm_brewing_handle+0x2d0>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
				fsm_subestado = 3;
 8009cbe:	4b76      	ldr	r3, [pc, #472]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	701a      	strb	r2, [r3, #0]
		break;
 8009cc4:	e108      	b.n	8009ed8 <fsm_brewing_handle+0x300>

	case 2:
		if (taza_detectada) {
 8009cc6:	4b79      	ldr	r3, [pc, #484]	@ (8009eac <fsm_brewing_handle+0x2d4>)
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 8106 	beq.w	8009edc <fsm_brewing_handle+0x304>
			if (cafe_seleccionado < CAFE_PERSONALIZADO) //usa receta personalizadqa si se seleccionó
 8009cd0:	4b78      	ldr	r3, [pc, #480]	@ (8009eb4 <fsm_brewing_handle+0x2dc>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d820      	bhi.n	8009d1a <fsm_brewing_handle+0x142>
				{
				shots[0] = recetas[cafe_seleccionado].cafe;
 8009cd8:	4b76      	ldr	r3, [pc, #472]	@ (8009eb4 <fsm_brewing_handle+0x2dc>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	4b76      	ldr	r3, [pc, #472]	@ (8009eb8 <fsm_brewing_handle+0x2e0>)
 8009ce0:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8009ce4:	4b75      	ldr	r3, [pc, #468]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009ce6:	701a      	strb	r2, [r3, #0]
				shots[1] = recetas[cafe_seleccionado].leche;
 8009ce8:	4b72      	ldr	r3, [pc, #456]	@ (8009eb4 <fsm_brewing_handle+0x2dc>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	4a72      	ldr	r2, [pc, #456]	@ (8009eb8 <fsm_brewing_handle+0x2e0>)
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	785a      	ldrb	r2, [r3, #1]
 8009cf4:	4b71      	ldr	r3, [pc, #452]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009cf6:	705a      	strb	r2, [r3, #1]
				shots[2] = recetas[cafe_seleccionado].agua;
 8009cf8:	4b6e      	ldr	r3, [pc, #440]	@ (8009eb4 <fsm_brewing_handle+0x2dc>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	4a6e      	ldr	r2, [pc, #440]	@ (8009eb8 <fsm_brewing_handle+0x2e0>)
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	789a      	ldrb	r2, [r3, #2]
 8009d04:	4b6d      	ldr	r3, [pc, #436]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009d06:	709a      	strb	r2, [r3, #2]
				shots[3] = recetas[cafe_seleccionado].chocolate;
 8009d08:	4b6a      	ldr	r3, [pc, #424]	@ (8009eb4 <fsm_brewing_handle+0x2dc>)
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8009eb8 <fsm_brewing_handle+0x2e0>)
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	78da      	ldrb	r2, [r3, #3]
 8009d14:	4b69      	ldr	r3, [pc, #420]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009d16:	70da      	strb	r2, [r3, #3]
 8009d18:	e003      	b.n	8009d22 <fsm_brewing_handle+0x14a>
			} else //usa la receta predefinida que se eligió
				{
				memcpy(shots, receta_personal, sizeof(shots));
 8009d1a:	4b69      	ldr	r3, [pc, #420]	@ (8009ec0 <fsm_brewing_handle+0x2e8>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a67      	ldr	r2, [pc, #412]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009d20:	6013      	str	r3, [r2, #0]
			}
			ingrediente = 0;
 8009d22:	4b68      	ldr	r3, [pc, #416]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	701a      	strb	r2, [r3, #0]
			primera_carga = true; //indica que se la va a empezar a cargar a la taza
 8009d28:	4b67      	ldr	r3, [pc, #412]	@ (8009ec8 <fsm_brewing_handle+0x2f0>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 10;
 8009d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009d30:	220a      	movs	r2, #10
 8009d32:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009d34:	e0d2      	b.n	8009edc <fsm_brewing_handle+0x304>

	case 3:  // Reintento
		if (ultima_interaccion_ms >= 1000) {
 8009d36:	4b5c      	ldr	r3, [pc, #368]	@ (8009ea8 <fsm_brewing_handle+0x2d0>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d3e:	f0c0 80cf 	bcc.w	8009ee0 <fsm_brewing_handle+0x308>
			HCSR04_Trigger(); //manda otro trigger del sensor para ver si detecta algo
 8009d42:	f000 fe89 	bl	800aa58 <HCSR04_Trigger>
			fsm_subestado = 1; //vuelve al subestado 1 para checkear lo que detecto
 8009d46:	4b54      	ldr	r3, [pc, #336]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009d4c:	e0c8      	b.n	8009ee0 <fsm_brewing_handle+0x308>

	// === Secuencia de shots ===
	case 10:
		if (primera_carga) //carga los shots de cada ingrediente en la maquina
 8009d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8009ec8 <fsm_brewing_handle+0x2f0>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d014      	beq.n	8009d80 <fsm_brewing_handle+0x1a8>
			{
			while (ingrediente < 4 && shots[ingrediente] == 0) {
 8009d56:	e005      	b.n	8009d64 <fsm_brewing_handle+0x18c>
				ingrediente++; //salta los ingredientes que no tengan l
 8009d58:	4b5a      	ldr	r3, [pc, #360]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	4b58      	ldr	r3, [pc, #352]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009d62:	701a      	strb	r2, [r3, #0]
			while (ingrediente < 4 && shots[ingrediente] == 0) {
 8009d64:	4b57      	ldr	r3, [pc, #348]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d806      	bhi.n	8009d7a <fsm_brewing_handle+0x1a2>
 8009d6c:	4b55      	ldr	r3, [pc, #340]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	4b52      	ldr	r3, [pc, #328]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009d74:	5c9b      	ldrb	r3, [r3, r2]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0ee      	beq.n	8009d58 <fsm_brewing_handle+0x180>
			}
			primera_carga = false; //indica que ya arranco a cargar si termino de iterar
 8009d7a:	4b53      	ldr	r3, [pc, #332]	@ (8009ec8 <fsm_brewing_handle+0x2f0>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
		}

		if (ingrediente >= 4) //si ya termino de iterar indica que el cafe esta listo
 8009d80:	4b50      	ldr	r3, [pc, #320]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	d90b      	bls.n	8009da0 <fsm_brewing_handle+0x1c8>
			{
			lcd_print_if_changed(0, "Cafe listo!");
 8009d88:	4950      	ldr	r1, [pc, #320]	@ (8009ecc <fsm_brewing_handle+0x2f4>)
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	f000 faba 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, "Retire la taza");
 8009d90:	494f      	ldr	r1, [pc, #316]	@ (8009ed0 <fsm_brewing_handle+0x2f8>)
 8009d92:	2001      	movs	r0, #1
 8009d94:	f000 fab6 	bl	800a304 <lcd_print_if_changed>
			fsm_subestado = 20;
 8009d98:	4b3f      	ldr	r3, [pc, #252]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009d9a:	2214      	movs	r2, #20
 8009d9c:	701a      	strb	r2, [r3, #0]
		} else {
			led_off(ingrediente + 1); //prende el led que corresponde al ingrediente
			shot_start_time = HAL_GetTick(); //inicia el tiempo del shot
			fsm_subestado = 11;
		}
		break;
 8009d9e:	e0a8      	b.n	8009ef2 <fsm_brewing_handle+0x31a>
			led_off(ingrediente + 1); //prende el led que corresponde al ingrediente
 8009da0:	4b48      	ldr	r3, [pc, #288]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fe f949 	bl	8008040 <led_off>
			shot_start_time = HAL_GetTick(); //inicia el tiempo del shot
 8009dae:	f7f7 ff63 	bl	8001c78 <HAL_GetTick>
 8009db2:	4603      	mov	r3, r0
 8009db4:	4a47      	ldr	r2, [pc, #284]	@ (8009ed4 <fsm_brewing_handle+0x2fc>)
 8009db6:	6013      	str	r3, [r2, #0]
			fsm_subestado = 11;
 8009db8:	4b37      	ldr	r3, [pc, #220]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009dba:	220b      	movs	r2, #11
 8009dbc:	701a      	strb	r2, [r3, #0]
		break;
 8009dbe:	e098      	b.n	8009ef2 <fsm_brewing_handle+0x31a>

	case 11:
		if (HAL_GetTick() - shot_start_time >= 1000) {
 8009dc0:	f7f7 ff5a 	bl	8001c78 <HAL_GetTick>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	4b43      	ldr	r3, [pc, #268]	@ (8009ed4 <fsm_brewing_handle+0x2fc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dd0:	f0c0 8088 	bcc.w	8009ee4 <fsm_brewing_handle+0x30c>
			led_on(ingrediente + 1); //apaga el led del ingrediente correspondiente
 8009dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7fe f8f9 	bl	8007fd4 <led_on>
			shots[ingrediente]--; //disminuye el stock del ingrediente
 8009de2:	4b38      	ldr	r3, [pc, #224]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	4a35      	ldr	r2, [pc, #212]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009de8:	5cd2      	ldrb	r2, [r2, r3]
 8009dea:	3a01      	subs	r2, #1
 8009dec:	b2d1      	uxtb	r1, r2
 8009dee:	4a33      	ldr	r2, [pc, #204]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009df0:	54d1      	strb	r1, [r2, r3]
			fsm_subestado = 12;
 8009df2:	4b29      	ldr	r3, [pc, #164]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009df4:	220c      	movs	r2, #12
 8009df6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009df8:	e074      	b.n	8009ee4 <fsm_brewing_handle+0x30c>

	case 12:
		if (HAL_GetTick() - shot_start_time >= 1200) {
 8009dfa:	f7f7 ff3d 	bl	8001c78 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	4b34      	ldr	r3, [pc, #208]	@ (8009ed4 <fsm_brewing_handle+0x2fc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8009e0a:	d36d      	bcc.n	8009ee8 <fsm_brewing_handle+0x310>
			if (shots[ingrediente] > 0) {
 8009e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	461a      	mov	r2, r3
 8009e12:	4b2a      	ldr	r3, [pc, #168]	@ (8009ebc <fsm_brewing_handle+0x2e4>)
 8009e14:	5c9b      	ldrb	r3, [r3, r2]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <fsm_brewing_handle+0x24a>
				fsm_subestado = 10; //vuelve a cargar mas dosis del ingrediente si es necesario
 8009e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009e1c:	220a      	movs	r2, #10
 8009e1e:	701a      	strb	r2, [r3, #0]
				ingrediente++;
				primera_carga = true; //indica de que sigue cargando ingredientes
				fsm_subestado = 10; //sigue al proximo ingrediente
			}
		}
		break;
 8009e20:	e062      	b.n	8009ee8 <fsm_brewing_handle+0x310>
				ingrediente++;
 8009e22:	4b28      	ldr	r3, [pc, #160]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	4b26      	ldr	r3, [pc, #152]	@ (8009ec4 <fsm_brewing_handle+0x2ec>)
 8009e2c:	701a      	strb	r2, [r3, #0]
				primera_carga = true; //indica de que sigue cargando ingredientes
 8009e2e:	4b26      	ldr	r3, [pc, #152]	@ (8009ec8 <fsm_brewing_handle+0x2f0>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	701a      	strb	r2, [r3, #0]
				fsm_subestado = 10; //sigue al proximo ingrediente
 8009e34:	4b18      	ldr	r3, [pc, #96]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009e36:	220a      	movs	r2, #10
 8009e38:	701a      	strb	r2, [r3, #0]
		break;
 8009e3a:	e055      	b.n	8009ee8 <fsm_brewing_handle+0x310>

	//espera retirar taza
	case 20:
		HCSR04_Trigger(); //activa el trigger para ver si el usuario retira la taza
 8009e3c:	f000 fe0c 	bl	800aa58 <HCSR04_Trigger>
		fsm_subestado = 21;
 8009e40:	4b15      	ldr	r3, [pc, #84]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009e42:	2215      	movs	r2, #21
 8009e44:	701a      	strb	r2, [r3, #0]
		break;
 8009e46:	e054      	b.n	8009ef2 <fsm_brewing_handle+0x31a>

	case 21:
		if (HCSR04_Ready()) {
 8009e48:	f000 fe38 	bl	800aabc <HCSR04_Ready>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d04c      	beq.n	8009eec <fsm_brewing_handle+0x314>
			uint16_t d = HCSR04_GetLast();
 8009e52:	f000 fe3f 	bl	800aad4 <HCSR04_GetLast>
 8009e56:	4603      	mov	r3, r0
 8009e58:	81fb      	strh	r3, [r7, #14]
			if (d > 4 || d == 0xFFFF) {
 8009e5a:	89fb      	ldrh	r3, [r7, #14]
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d804      	bhi.n	8009e6a <fsm_brewing_handle+0x292>
 8009e60:	89fb      	ldrh	r3, [r7, #14]
 8009e62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d106      	bne.n	8009e78 <fsm_brewing_handle+0x2a0>
				estado_actual = estado_menu_principal; //si retiro la taza vuelve a estado menu principal
 8009e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e9c <fsm_brewing_handle+0x2c4>)
 8009e6c:	2205      	movs	r2, #5
 8009e6e:	701a      	strb	r2, [r3, #0]
				fsm_subestado = 0;
 8009e70:	4b09      	ldr	r3, [pc, #36]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
			} else {
				ultima_interaccion_ms = 0; //si no detecto,reinicia el temporizador de ultima interacción
				fsm_subestado = 22;
			}
		}
		break;
 8009e76:	e039      	b.n	8009eec <fsm_brewing_handle+0x314>
				ultima_interaccion_ms = 0; //si no detecto,reinicia el temporizador de ultima interacción
 8009e78:	4b0b      	ldr	r3, [pc, #44]	@ (8009ea8 <fsm_brewing_handle+0x2d0>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
				fsm_subestado = 22;
 8009e7e:	4b06      	ldr	r3, [pc, #24]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009e80:	2216      	movs	r2, #22
 8009e82:	701a      	strb	r2, [r3, #0]
		break;
 8009e84:	e032      	b.n	8009eec <fsm_brewing_handle+0x314>

	case 22:
		if (ultima_interaccion_ms >= 1000) {
 8009e86:	4b08      	ldr	r3, [pc, #32]	@ (8009ea8 <fsm_brewing_handle+0x2d0>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e8e:	d32f      	bcc.n	8009ef0 <fsm_brewing_handle+0x318>
			fsm_subestado = 20; //si no detecta nada despues de 1000ms vuelve a activa el sensor
 8009e90:	4b01      	ldr	r3, [pc, #4]	@ (8009e98 <fsm_brewing_handle+0x2c0>)
 8009e92:	2214      	movs	r2, #20
 8009e94:	701a      	strb	r2, [r3, #0]
		}
		break;
 8009e96:	e02b      	b.n	8009ef0 <fsm_brewing_handle+0x318>
 8009e98:	2000056d 	.word	0x2000056d
 8009e9c:	2000057d 	.word	0x2000057d
 8009ea0:	0800ef90 	.word	0x0800ef90
 8009ea4:	0800efa0 	.word	0x0800efa0
 8009ea8:	20000580 	.word	0x20000580
 8009eac:	20000594 	.word	0x20000594
 8009eb0:	0800eee4 	.word	0x0800eee4
 8009eb4:	2000057c 	.word	0x2000057c
 8009eb8:	0800f2d4 	.word	0x0800f2d4
 8009ebc:	20000598 	.word	0x20000598
 8009ec0:	20000578 	.word	0x20000578
 8009ec4:	2000059c 	.word	0x2000059c
 8009ec8:	20000070 	.word	0x20000070
 8009ecc:	0800efb4 	.word	0x0800efb4
 8009ed0:	0800efc0 	.word	0x0800efc0
 8009ed4:	200005a0 	.word	0x200005a0
		break;
 8009ed8:	bf00      	nop
 8009eda:	e00a      	b.n	8009ef2 <fsm_brewing_handle+0x31a>
		break;
 8009edc:	bf00      	nop
 8009ede:	e008      	b.n	8009ef2 <fsm_brewing_handle+0x31a>
		break;
 8009ee0:	bf00      	nop
 8009ee2:	e006      	b.n	8009ef2 <fsm_brewing_handle+0x31a>
		break;
 8009ee4:	bf00      	nop
 8009ee6:	e004      	b.n	8009ef2 <fsm_brewing_handle+0x31a>
		break;
 8009ee8:	bf00      	nop
 8009eea:	e002      	b.n	8009ef2 <fsm_brewing_handle+0x31a>
		break;
 8009eec:	bf00      	nop
 8009eee:	e000      	b.n	8009ef2 <fsm_brewing_handle+0x31a>
		break;
 8009ef0:	bf00      	nop
	}
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop

08009efc <fsm_save_energy_handle>:

static void fsm_save_energy_handle(evento_t e) //maneja el estado de save energy
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
	switch (fsm_subestado)
 8009f06:	4b18      	ldr	r3, [pc, #96]	@ (8009f68 <fsm_save_energy_handle+0x6c>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <fsm_save_energy_handle+0x18>
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d011      	beq.n	8009f36 <fsm_save_energy_handle+0x3a>
		} else {
			__WFI(); //se mantiene en el modo save energy
		}
		break;
	}
}
 8009f12:	e024      	b.n	8009f5e <fsm_save_energy_handle+0x62>
		mostrar_estado_leds(estado_actual);
 8009f14:	4b15      	ldr	r3, [pc, #84]	@ (8009f6c <fsm_save_energy_handle+0x70>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe f917 	bl	800814c <mostrar_estado_leds>
		lcd_print_if_changed(1, "");
 8009f1e:	4914      	ldr	r1, [pc, #80]	@ (8009f70 <fsm_save_energy_handle+0x74>)
 8009f20:	2001      	movs	r0, #1
 8009f22:	f000 f9ef 	bl	800a304 <lcd_print_if_changed>
		lcd_print_if_changed(0, "Modo ahorro...  ");
 8009f26:	4913      	ldr	r1, [pc, #76]	@ (8009f74 <fsm_save_energy_handle+0x78>)
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f000 f9eb 	bl	800a304 <lcd_print_if_changed>
		fsm_subestado = 1;
 8009f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009f68 <fsm_save_energy_handle+0x6c>)
 8009f30:	2201      	movs	r2, #1
 8009f32:	701a      	strb	r2, [r3, #0]
		break;
 8009f34:	e013      	b.n	8009f5e <fsm_save_energy_handle+0x62>
		if (e != EVENT_NONE) //si detecta algo sale del modo save energy al modo off
 8009f36:	79fb      	ldrb	r3, [r7, #7]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00e      	beq.n	8009f5a <fsm_save_energy_handle+0x5e>
			lcd_print_if_changed(0, "Reactivando...  ");
 8009f3c:	490e      	ldr	r1, [pc, #56]	@ (8009f78 <fsm_save_energy_handle+0x7c>)
 8009f3e:	2000      	movs	r0, #0
 8009f40:	f000 f9e0 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, "");
 8009f44:	490a      	ldr	r1, [pc, #40]	@ (8009f70 <fsm_save_energy_handle+0x74>)
 8009f46:	2001      	movs	r0, #1
 8009f48:	f000 f9dc 	bl	800a304 <lcd_print_if_changed>
			estado_actual = estado_off;
 8009f4c:	4b07      	ldr	r3, [pc, #28]	@ (8009f6c <fsm_save_energy_handle+0x70>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 8009f52:	4b05      	ldr	r3, [pc, #20]	@ (8009f68 <fsm_save_energy_handle+0x6c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
		break;
 8009f58:	e000      	b.n	8009f5c <fsm_save_energy_handle+0x60>
			__WFI(); //se mantiene en el modo save energy
 8009f5a:	bf30      	wfi
		break;
 8009f5c:	bf00      	nop
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	2000056d 	.word	0x2000056d
 8009f6c:	2000057d 	.word	0x2000057d
 8009f70:	0800ed30 	.word	0x0800ed30
 8009f74:	0800efd0 	.word	0x0800efd0
 8009f78:	0800efe4 	.word	0x0800efe4

08009f7c <fsm_error_handle>:

static void fsm_error_handle(evento_t e) //maneja el estado de error
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	4603      	mov	r3, r0
 8009f84:	71fb      	strb	r3, [r7, #7]
	switch (fsm_subestado)
 8009f86:	4b1e      	ldr	r3, [pc, #120]	@ (800a000 <fsm_error_handle+0x84>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d024      	beq.n	8009fd8 <fsm_error_handle+0x5c>
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	dc31      	bgt.n	8009ff6 <fsm_error_handle+0x7a>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d002      	beq.n	8009f9c <fsm_error_handle+0x20>
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d00c      	beq.n	8009fb4 <fsm_error_handle+0x38>
			estado_actual = estado_diagnostico;
			fsm_subestado = 0;
		}
		break;
	}
}
 8009f9a:	e02c      	b.n	8009ff6 <fsm_error_handle+0x7a>
		lcd_print_if_changed(0, "ERROR DE HARDWARE");
 8009f9c:	4919      	ldr	r1, [pc, #100]	@ (800a004 <fsm_error_handle+0x88>)
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	f000 f9b0 	bl	800a304 <lcd_print_if_changed>
		lcd_print_if_changed(1, "Presione Azul");
 8009fa4:	4918      	ldr	r1, [pc, #96]	@ (800a008 <fsm_error_handle+0x8c>)
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	f000 f9ac 	bl	800a304 <lcd_print_if_changed>
		fsm_subestado = 1;
 8009fac:	4b14      	ldr	r3, [pc, #80]	@ (800a000 <fsm_error_handle+0x84>)
 8009fae:	2201      	movs	r2, #1
 8009fb0:	701a      	strb	r2, [r3, #0]
		break;
 8009fb2:	e020      	b.n	8009ff6 <fsm_error_handle+0x7a>
		if (e == EVENT_BOTON3_PRESS) {
 8009fb4:	79fb      	ldrb	r3, [r7, #7]
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d11a      	bne.n	8009ff0 <fsm_error_handle+0x74>
			lcd_print_if_changed(0, "Reiniciando...");
 8009fba:	4914      	ldr	r1, [pc, #80]	@ (800a00c <fsm_error_handle+0x90>)
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	f000 f9a1 	bl	800a304 <lcd_print_if_changed>
			lcd_print_if_changed(1, " ");
 8009fc2:	4913      	ldr	r1, [pc, #76]	@ (800a010 <fsm_error_handle+0x94>)
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	f000 f99d 	bl	800a304 <lcd_print_if_changed>
			ultima_interaccion_ms = 0;
 8009fca:	4b12      	ldr	r3, [pc, #72]	@ (800a014 <fsm_error_handle+0x98>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	601a      	str	r2, [r3, #0]
			fsm_subestado = 2;
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	@ (800a000 <fsm_error_handle+0x84>)
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	701a      	strb	r2, [r3, #0]
		break;
 8009fd6:	e00b      	b.n	8009ff0 <fsm_error_handle+0x74>
		if (ultima_interaccion_ms >= 1000) {
 8009fd8:	4b0e      	ldr	r3, [pc, #56]	@ (800a014 <fsm_error_handle+0x98>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009fe0:	d308      	bcc.n	8009ff4 <fsm_error_handle+0x78>
			estado_actual = estado_diagnostico;
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	@ (800a018 <fsm_error_handle+0x9c>)
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	701a      	strb	r2, [r3, #0]
			fsm_subestado = 0;
 8009fe8:	4b05      	ldr	r3, [pc, #20]	@ (800a000 <fsm_error_handle+0x84>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	701a      	strb	r2, [r3, #0]
		break;
 8009fee:	e001      	b.n	8009ff4 <fsm_error_handle+0x78>
		break;
 8009ff0:	bf00      	nop
 8009ff2:	e000      	b.n	8009ff6 <fsm_error_handle+0x7a>
		break;
 8009ff4:	bf00      	nop
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	2000056d 	.word	0x2000056d
 800a004:	0800eff8 	.word	0x0800eff8
 800a008:	0800ede4 	.word	0x0800ede4
 800a00c:	0800f00c 	.word	0x0800f00c
 800a010:	0800ec6c 	.word	0x0800ec6c
 800a014:	20000580 	.word	0x20000580
 800a018:	2000057d 	.word	0x2000057d

0800a01c <cafe_fsm_update_core>:

void cafe_fsm_update_core(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
    evento_t evento = detectar_evento(); //lee el evento actual
 800a022:	f7fe fe95 	bl	8008d50 <detectar_evento>
 800a026:	4603      	mov	r3, r0
 800a028:	71fb      	strb	r3, [r7, #7]

    if (evento != EVENT_NONE) //si se detecta un evento reinicia el contador
 800a02a:	79fb      	ldrb	r3, [r7, #7]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d002      	beq.n	800a036 <cafe_fsm_update_core+0x1a>
    	{
        ultima_interaccion_ms = 0;
 800a030:	4b3c      	ldr	r3, [pc, #240]	@ (800a124 <cafe_fsm_update_core+0x108>)
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
    }
    if (evento == EVENT_TIMEOUT && estado_actual != estado_save_energy) //si no detecto nada pasa al estado save energy (si es que ya no esta)
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	2b0a      	cmp	r3, #10
 800a03a:	d109      	bne.n	800a050 <cafe_fsm_update_core+0x34>
 800a03c:	4b3a      	ldr	r3, [pc, #232]	@ (800a128 <cafe_fsm_update_core+0x10c>)
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b09      	cmp	r3, #9
 800a042:	d005      	beq.n	800a050 <cafe_fsm_update_core+0x34>
    {
    	estado_actual = estado_save_energy;
 800a044:	4b38      	ldr	r3, [pc, #224]	@ (800a128 <cafe_fsm_update_core+0x10c>)
 800a046:	2209      	movs	r2, #9
 800a048:	701a      	strb	r2, [r3, #0]
    	fsm_subestado =0;
 800a04a:	4b38      	ldr	r3, [pc, #224]	@ (800a12c <cafe_fsm_update_core+0x110>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	701a      	strb	r2, [r3, #0]
    }
    if (evento == EVENT_BOTON2_PRESS) //si se presiona el boton 2 reinicia el sistema
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	2b03      	cmp	r3, #3
 800a054:	d109      	bne.n	800a06a <cafe_fsm_update_core+0x4e>
    {
        lcd_print_if_changed(0, "Reiniciando...");
 800a056:	4936      	ldr	r1, [pc, #216]	@ (800a130 <cafe_fsm_update_core+0x114>)
 800a058:	2000      	movs	r0, #0
 800a05a:	f000 f953 	bl	800a304 <lcd_print_if_changed>
        HAL_Delay(1000);
 800a05e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a062:	f7f7 fe13 	bl	8001c8c <HAL_Delay>
        NVIC_SystemReset();
 800a066:	f7fe fd3b 	bl	8008ae0 <__NVIC_SystemReset>
    }

    switch (estado_actual) //usa la función de cada estado dependiendo del estado actual
 800a06a:	4b2f      	ldr	r3, [pc, #188]	@ (800a128 <cafe_fsm_update_core+0x10c>)
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b0a      	cmp	r3, #10
 800a070:	d84f      	bhi.n	800a112 <cafe_fsm_update_core+0xf6>
 800a072:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <cafe_fsm_update_core+0x5c>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	0800a0af 	.word	0x0800a0af
 800a080:	0800a0b9 	.word	0x0800a0b9
 800a084:	0800a0c3 	.word	0x0800a0c3
 800a088:	0800a0cd 	.word	0x0800a0cd
 800a08c:	0800a0d7 	.word	0x0800a0d7
 800a090:	0800a0e1 	.word	0x0800a0e1
 800a094:	0800a0eb 	.word	0x0800a0eb
 800a098:	0800a0f5 	.word	0x0800a0f5
 800a09c:	0800a0ff 	.word	0x0800a0ff
 800a0a0:	0800a109 	.word	0x0800a109
    {
        case estado_off:                  fsm_off_handle(evento); break;
 800a0a4:	79fb      	ldrb	r3, [r7, #7]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fe9a 	bl	8008de0 <fsm_off_handle>
 800a0ac:	e036      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_diagnostico:          fsm_diagnostico_handle(evento); break;
 800a0ae:	79fb      	ldrb	r3, [r7, #7]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fe ff3f 	bl	8008f34 <fsm_diagnostico_handle>
 800a0b6:	e031      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_fabricante:           fsm_fabricante_handle(evento); break;
 800a0b8:	79fb      	ldrb	r3, [r7, #7]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe ff66 	bl	8008f8c <fsm_fabricante_handle>
 800a0c0:	e02c      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_submenu_stock:        fsm_stock_handle(evento); break;
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7ff f81f 	bl	8009108 <fsm_stock_handle>
 800a0ca:	e027      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_submenu_temp_deseada: fsm_temp_deseada_handle(evento); break;
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff f990 	bl	80093f4 <fsm_temp_deseada_handle>
 800a0d4:	e022      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_menu_principal:       fsm_menu_principal_handle(evento); break;
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fa4b 	bl	8009574 <fsm_menu_principal_handle>
 800a0de:	e01d      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_seleccion_cafe:       fsm_seleccion_cafe_handle(evento); break;
 800a0e0:	79fb      	ldrb	r3, [r7, #7]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7ff faa8 	bl	8009638 <fsm_seleccion_cafe_handle>
 800a0e8:	e018      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_cafe_personalizado:   fsm_personal_handle(evento); break;
 800a0ea:	79fb      	ldrb	r3, [r7, #7]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff fbf1 	bl	80098d4 <fsm_personal_handle>
 800a0f2:	e013      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_brewing:              fsm_brewing_handle(evento); break;
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fd6e 	bl	8009bd8 <fsm_brewing_handle>
 800a0fc:	e00e      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_save_energy:          fsm_save_energy_handle(evento); break;
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff fefb 	bl	8009efc <fsm_save_energy_handle>
 800a106:	e009      	b.n	800a11c <cafe_fsm_update_core+0x100>
        case estado_error:                fsm_error_handle(evento); break;
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff ff36 	bl	8009f7c <fsm_error_handle>
 800a110:	e004      	b.n	800a11c <cafe_fsm_update_core+0x100>
        default:                          fsm_error_handle(evento); break;
 800a112:	79fb      	ldrb	r3, [r7, #7]
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff ff31 	bl	8009f7c <fsm_error_handle>
 800a11a:	bf00      	nop
    }
}
 800a11c:	bf00      	nop
 800a11e:	3708      	adds	r7, #8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000580 	.word	0x20000580
 800a128:	2000057d 	.word	0x2000057d
 800a12c:	2000056d 	.word	0x2000056d
 800a130:	0800f00c 	.word	0x0800f00c

0800a134 <task_cafe_fsm_update>:

void task_cafe_fsm_update(void *parameters)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
    bool b_time_update_required = false;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]

    __asm("CPSID i"); //deshabilita las interrupciones para codigo bloqueante
 800a140:	b672      	cpsid	i
    if (G_TASK_FSM_TICK_CNT_INI < g_task_cafe_fsm_tick_cnt) //comparo
 800a142:	4b17      	ldr	r3, [pc, #92]	@ (800a1a0 <task_cafe_fsm_update+0x6c>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d006      	beq.n	800a158 <task_cafe_fsm_update+0x24>
    {
        g_task_cafe_fsm_tick_cnt--; //si hay ticks pendiente los decrementa
 800a14a:	4b15      	ldr	r3, [pc, #84]	@ (800a1a0 <task_cafe_fsm_update+0x6c>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	3b01      	subs	r3, #1
 800a150:	4a13      	ldr	r2, [pc, #76]	@ (800a1a0 <task_cafe_fsm_update+0x6c>)
 800a152:	6013      	str	r3, [r2, #0]
        b_time_update_required = true;
 800a154:	2301      	movs	r3, #1
 800a156:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i"); //rehabilita interrupciones
 800a158:	b662      	cpsie	i
    //mientras hay ticks pendiente ejecuta tareas
    if (b_time_update_required)
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01b      	beq.n	800a198 <task_cafe_fsm_update+0x64>
    {
        g_task_cafe_fsm_cnt++; //incremento contador de cilco de tareas
 800a160:	4b10      	ldr	r3, [pc, #64]	@ (800a1a4 <task_cafe_fsm_update+0x70>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3301      	adds	r3, #1
 800a166:	4a0f      	ldr	r2, [pc, #60]	@ (800a1a4 <task_cafe_fsm_update+0x70>)
 800a168:	6013      	str	r3, [r2, #0]
        ultima_interaccion_ms++;
 800a16a:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a8 <task_cafe_fsm_update+0x74>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3301      	adds	r3, #1
 800a170:	4a0d      	ldr	r2, [pc, #52]	@ (800a1a8 <task_cafe_fsm_update+0x74>)
 800a172:	6013      	str	r3, [r2, #0]
        cafe_fsm_update_core();  //activa la lógica de la FSM
 800a174:	f7ff ff52 	bl	800a01c <cafe_fsm_update_core>

       __asm("CPSID i"); //deshabilita las interrupciones para codigo bloqueante
 800a178:	b672      	cpsid	i
        if (G_TASK_FSM_TICK_CNT_INI < g_task_cafe_fsm_tick_cnt)
 800a17a:	4b09      	ldr	r3, [pc, #36]	@ (800a1a0 <task_cafe_fsm_update+0x6c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d007      	beq.n	800a192 <task_cafe_fsm_update+0x5e>
        {
            g_task_cafe_fsm_tick_cnt--;//si hay ticks pendiente los decrementa
 800a182:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <task_cafe_fsm_update+0x6c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3b01      	subs	r3, #1
 800a188:	4a05      	ldr	r2, [pc, #20]	@ (800a1a0 <task_cafe_fsm_update+0x6c>)
 800a18a:	6013      	str	r3, [r2, #0]
            b_time_update_required = true;
 800a18c:	2301      	movs	r3, #1
 800a18e:	73fb      	strb	r3, [r7, #15]
 800a190:	e001      	b.n	800a196 <task_cafe_fsm_update+0x62>
        }
        else
        {
            b_time_update_required = false;//si no quedan ticks pendientes no es necesario actualizar aún
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
        }
        __asm("CPSIE i");//rehabilita interrupciones
 800a196:	b662      	cpsie	i
    }
}
 800a198:	bf00      	nop
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20000574 	.word	0x20000574
 800a1a4:	20000570 	.word	0x20000570
 800a1a8:	20000580 	.word	0x20000580

0800a1ac <lcd_send_cmd>:
uint32_t g_task_lcd_cnt;
volatile uint32_t g_task_lcd_tick_cnt;

/********************** funciones internas bajo nivel ************************/
static void lcd_send_cmd(char cmd) //envia comando al LCD en formato 4bit (upper y lower nibble)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	71fb      	strb	r3, [r7, #7]
    char data_u = (cmd & 0xF0);
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	f023 030f 	bic.w	r3, r3, #15
 800a1bc:	73fb      	strb	r3, [r7, #15]
    char data_l = ((cmd << 4) & 0xF0);
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	011b      	lsls	r3, r3, #4
 800a1c2:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	f043 030c 	orr.w	r3, r3, #12
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	723b      	strb	r3, [r7, #8]
 800a1ce:	7bfb      	ldrb	r3, [r7, #15]
 800a1d0:	f043 0308 	orr.w	r3, r3, #8
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	727b      	strb	r3, [r7, #9]
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
 800a1da:	f043 030c 	orr.w	r3, r3, #12
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	72bb      	strb	r3, [r7, #10]
 800a1e2:	7bbb      	ldrb	r3, [r7, #14]
 800a1e4:	f043 0308 	orr.w	r3, r3, #8
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	72fb      	strb	r3, [r7, #11]
        data_u | 0x0C, data_u | 0x08,
        data_l | 0x0C, data_l | 0x08
    };
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 800a1ec:	f107 0208 	add.w	r2, r7, #8
 800a1f0:	2364      	movs	r3, #100	@ 0x64
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	214e      	movs	r1, #78	@ 0x4e
 800a1f8:	4803      	ldr	r0, [pc, #12]	@ (800a208 <lcd_send_cmd+0x5c>)
 800a1fa:	f7f9 f8bb 	bl	8003374 <HAL_I2C_Master_Transmit>
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20000300 	.word	0x20000300

0800a20c <lcd_send_data>:

static void lcd_send_data(char data) //envia datos al LCD en formato 4bit (upper y lower nibble)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af02      	add	r7, sp, #8
 800a212:	4603      	mov	r3, r0
 800a214:	71fb      	strb	r3, [r7, #7]
    char data_u = (data & 0xF0);
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	f023 030f 	bic.w	r3, r3, #15
 800a21c:	73fb      	strb	r3, [r7, #15]
    char data_l = ((data << 4) & 0xF0);
 800a21e:	79fb      	ldrb	r3, [r7, #7]
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	f043 030d 	orr.w	r3, r3, #13
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	723b      	strb	r3, [r7, #8]
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	f043 0309 	orr.w	r3, r3, #9
 800a234:	b2db      	uxtb	r3, r3
 800a236:	727b      	strb	r3, [r7, #9]
 800a238:	7bbb      	ldrb	r3, [r7, #14]
 800a23a:	f043 030d 	orr.w	r3, r3, #13
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	72bb      	strb	r3, [r7, #10]
 800a242:	7bbb      	ldrb	r3, [r7, #14]
 800a244:	f043 0309 	orr.w	r3, r3, #9
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	72fb      	strb	r3, [r7, #11]
        data_u | 0x0D, data_u | 0x09,
        data_l | 0x0D, data_l | 0x09
    };
    HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD, data_t, 4, 100);
 800a24c:	f107 0208 	add.w	r2, r7, #8
 800a250:	2364      	movs	r3, #100	@ 0x64
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	2304      	movs	r3, #4
 800a256:	214e      	movs	r1, #78	@ 0x4e
 800a258:	4803      	ldr	r0, [pc, #12]	@ (800a268 <lcd_send_data+0x5c>)
 800a25a:	f7f9 f88b 	bl	8003374 <HAL_I2C_Master_Transmit>
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20000300 	.word	0x20000300

0800a26c <lcd_put_cur>:

static void lcd_put_cur(int row, int col) //calcula direccion del cursor y envia comando correspondiente
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d104      	bne.n	800a286 <lcd_put_cur+0x1a>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	3b80      	subs	r3, #128	@ 0x80
 800a282:	b2db      	uxtb	r3, r3
 800a284:	e003      	b.n	800a28e <lcd_put_cur+0x22>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	3b40      	subs	r3, #64	@ 0x40
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(pos);
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	4618      	mov	r0, r3
 800a294:	f7ff ff8a 	bl	800a1ac <lcd_send_cmd>
}
 800a298:	bf00      	nop
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <lcd_init>:

static void lcd_init(void) //inicializa lcd paso a paso
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 800a2a4:	2032      	movs	r0, #50	@ 0x32
 800a2a6:	f7f7 fcf1 	bl	8001c8c <HAL_Delay>
    lcd_send_cmd(0x30); HAL_Delay(5);
 800a2aa:	2030      	movs	r0, #48	@ 0x30
 800a2ac:	f7ff ff7e 	bl	800a1ac <lcd_send_cmd>
 800a2b0:	2005      	movs	r0, #5
 800a2b2:	f7f7 fceb 	bl	8001c8c <HAL_Delay>
    lcd_send_cmd(0x30); HAL_Delay(1);
 800a2b6:	2030      	movs	r0, #48	@ 0x30
 800a2b8:	f7ff ff78 	bl	800a1ac <lcd_send_cmd>
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f7f7 fce5 	bl	8001c8c <HAL_Delay>
    lcd_send_cmd(0x30); HAL_Delay(10);
 800a2c2:	2030      	movs	r0, #48	@ 0x30
 800a2c4:	f7ff ff72 	bl	800a1ac <lcd_send_cmd>
 800a2c8:	200a      	movs	r0, #10
 800a2ca:	f7f7 fcdf 	bl	8001c8c <HAL_Delay>
    lcd_send_cmd(0x20); HAL_Delay(10);
 800a2ce:	2020      	movs	r0, #32
 800a2d0:	f7ff ff6c 	bl	800a1ac <lcd_send_cmd>
 800a2d4:	200a      	movs	r0, #10
 800a2d6:	f7f7 fcd9 	bl	8001c8c <HAL_Delay>

    lcd_send_cmd(0x28); // 2 líneas
 800a2da:	2028      	movs	r0, #40	@ 0x28
 800a2dc:	f7ff ff66 	bl	800a1ac <lcd_send_cmd>
    lcd_send_cmd(0x08); // display OFF
 800a2e0:	2008      	movs	r0, #8
 800a2e2:	f7ff ff63 	bl	800a1ac <lcd_send_cmd>
    lcd_send_cmd(0x01); HAL_Delay(2); // clear
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	f7ff ff60 	bl	800a1ac <lcd_send_cmd>
 800a2ec:	2002      	movs	r0, #2
 800a2ee:	f7f7 fccd 	bl	8001c8c <HAL_Delay>
    lcd_send_cmd(0x06); // entry mode
 800a2f2:	2006      	movs	r0, #6
 800a2f4:	f7ff ff5a 	bl	800a1ac <lcd_send_cmd>
    lcd_send_cmd(0x0C); // display ON
 800a2f8:	200c      	movs	r0, #12
 800a2fa:	f7ff ff57 	bl	800a1ac <lcd_send_cmd>
}
 800a2fe:	bf00      	nop
 800a300:	bd80      	pop	{r7, pc}
	...

0800a304 <lcd_print_if_changed>:
static uint8_t lcd_row = 0; //fila actual
static uint8_t lcd_index = 0; //indice del caracter a imprimir

/********************** API pública FSM LCD **********************************/
void lcd_print_if_changed(int row, const char* str)//imprime linea solo si algo cambio respecto al buffer
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
    if (row < 0 || row > 1 || str == NULL) return;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	db67      	blt.n	800a3e4 <lcd_print_if_changed+0xe0>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b01      	cmp	r3, #1
 800a318:	dc64      	bgt.n	800a3e4 <lcd_print_if_changed+0xe0>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d061      	beq.n	800a3e4 <lcd_print_if_changed+0xe0>
    char temp[17];
    snprintf(temp, sizeof(temp), "%-16s", str);  // alineado a 16 chars
 800a320:	f107 0008 	add.w	r0, r7, #8
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	4a31      	ldr	r2, [pc, #196]	@ (800a3ec <lcd_print_if_changed+0xe8>)
 800a328:	2111      	movs	r1, #17
 800a32a:	f001 fe17 	bl	800bf5c <sniprintf>
    //formetea string a 16 caracteres 

    if (strncmp(lcd_shadow[row], temp, 16) != 0)
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	4613      	mov	r3, r2
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	4413      	add	r3, r2
 800a336:	4a2e      	ldr	r2, [pc, #184]	@ (800a3f0 <lcd_print_if_changed+0xec>)
 800a338:	4413      	add	r3, r2
 800a33a:	f107 0108 	add.w	r1, r7, #8
 800a33e:	2210      	movs	r2, #16
 800a340:	4618      	mov	r0, r3
 800a342:	f001 ff71 	bl	800c228 <strncmp>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d04c      	beq.n	800a3e6 <lcd_print_if_changed+0xe2>
    {
        strncpy(lcd_shadow[row], temp, 17);
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	4613      	mov	r3, r2
 800a350:	011b      	lsls	r3, r3, #4
 800a352:	4413      	add	r3, r2
 800a354:	4a26      	ldr	r2, [pc, #152]	@ (800a3f0 <lcd_print_if_changed+0xec>)
 800a356:	4413      	add	r3, r2
 800a358:	f107 0108 	add.w	r1, r7, #8
 800a35c:	2211      	movs	r2, #17
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 ff74 	bl	800c24c <strncpy>

        for (int i = 0; i < LCD_MAX_QUEUE; i++) {
 800a364:	2300      	movs	r3, #0
 800a366:	61fb      	str	r3, [r7, #28]
 800a368:	e038      	b.n	800a3dc <lcd_print_if_changed+0xd8>
            if (!lcd_queue[i].activo) {
 800a36a:	4922      	ldr	r1, [pc, #136]	@ (800a3f4 <lcd_print_if_changed+0xf0>)
 800a36c:	69fa      	ldr	r2, [r7, #28]
 800a36e:	4613      	mov	r3, r2
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	4413      	add	r3, r2
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	4413      	add	r3, r2
 800a378:	440b      	add	r3, r1
 800a37a:	3312      	adds	r3, #18
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	f083 0301 	eor.w	r3, r3, #1
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d026      	beq.n	800a3d6 <lcd_print_if_changed+0xd2>
                //si es diferente lo guarda dentro de la cola
                strncpy(lcd_queue[i].buffer, temp, 17);
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	4613      	mov	r3, r2
 800a38c:	00db      	lsls	r3, r3, #3
 800a38e:	4413      	add	r3, r2
 800a390:	005b      	lsls	r3, r3, #1
 800a392:	4413      	add	r3, r2
 800a394:	4a17      	ldr	r2, [pc, #92]	@ (800a3f4 <lcd_print_if_changed+0xf0>)
 800a396:	4413      	add	r3, r2
 800a398:	f107 0108 	add.w	r1, r7, #8
 800a39c:	2211      	movs	r2, #17
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 ff54 	bl	800c24c <strncpy>
                lcd_queue[i].row = row;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	b2d8      	uxtb	r0, r3
 800a3a8:	4912      	ldr	r1, [pc, #72]	@ (800a3f4 <lcd_print_if_changed+0xf0>)
 800a3aa:	69fa      	ldr	r2, [r7, #28]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	4413      	add	r3, r2
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	4413      	add	r3, r2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	3311      	adds	r3, #17
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	701a      	strb	r2, [r3, #0]
                lcd_queue[i].activo = true;
 800a3be:	490d      	ldr	r1, [pc, #52]	@ (800a3f4 <lcd_print_if_changed+0xf0>)
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	4413      	add	r3, r2
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3312      	adds	r3, #18
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	701a      	strb	r2, [r3, #0]
                break;
 800a3d4:	e007      	b.n	800a3e6 <lcd_print_if_changed+0xe2>
        for (int i = 0; i < LCD_MAX_QUEUE; i++) {
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	ddc3      	ble.n	800a36a <lcd_print_if_changed+0x66>
 800a3e2:	e000      	b.n	800a3e6 <lcd_print_if_changed+0xe2>
    if (row < 0 || row > 1 || str == NULL) return;
 800a3e4:	bf00      	nop
            }
        }
    }
}
 800a3e6:	3720      	adds	r7, #32
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	0800f04c 	.word	0x0800f04c
 800a3f0:	200005d4 	.word	0x200005d4
 800a3f4:	200005ac 	.word	0x200005ac

0800a3f8 <lcd_fsm_update>:

void lcd_fsm_update(void)//implementacion central
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
    switch (lcd_estado)
 800a3fe:	4b37      	ldr	r3, [pc, #220]	@ (800a4dc <lcd_fsm_update+0xe4>)
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d04f      	beq.n	800a4a6 <lcd_fsm_update+0xae>
 800a406:	2b02      	cmp	r3, #2
 800a408:	dc63      	bgt.n	800a4d2 <lcd_fsm_update+0xda>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <lcd_fsm_update+0x1c>
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d03f      	beq.n	800a492 <lcd_fsm_update+0x9a>
            } else {
                lcd_estado = LCD_IDLE;
            }
            break;
    }
}
 800a412:	e05e      	b.n	800a4d2 <lcd_fsm_update+0xda>
            for (int i = 0; i < LCD_MAX_QUEUE; i++) {
 800a414:	2300      	movs	r3, #0
 800a416:	607b      	str	r3, [r7, #4]
 800a418:	e037      	b.n	800a48a <lcd_fsm_update+0x92>
                if (lcd_queue[i].activo) {
 800a41a:	4931      	ldr	r1, [pc, #196]	@ (800a4e0 <lcd_fsm_update+0xe8>)
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	4613      	mov	r3, r2
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	4413      	add	r3, r2
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	4413      	add	r3, r2
 800a428:	440b      	add	r3, r1
 800a42a:	3312      	adds	r3, #18
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d028      	beq.n	800a484 <lcd_fsm_update+0x8c>
                    lcd_row = lcd_queue[i].row;
 800a432:	492b      	ldr	r1, [pc, #172]	@ (800a4e0 <lcd_fsm_update+0xe8>)
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	4613      	mov	r3, r2
 800a438:	00db      	lsls	r3, r3, #3
 800a43a:	4413      	add	r3, r2
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	4413      	add	r3, r2
 800a440:	440b      	add	r3, r1
 800a442:	3311      	adds	r3, #17
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	4b27      	ldr	r3, [pc, #156]	@ (800a4e4 <lcd_fsm_update+0xec>)
 800a448:	701a      	strb	r2, [r3, #0]
                    lcd_str = lcd_queue[i].buffer;
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	4613      	mov	r3, r2
 800a44e:	00db      	lsls	r3, r3, #3
 800a450:	4413      	add	r3, r2
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	4413      	add	r3, r2
 800a456:	4a22      	ldr	r2, [pc, #136]	@ (800a4e0 <lcd_fsm_update+0xe8>)
 800a458:	4413      	add	r3, r2
 800a45a:	4a23      	ldr	r2, [pc, #140]	@ (800a4e8 <lcd_fsm_update+0xf0>)
 800a45c:	6013      	str	r3, [r2, #0]
                    lcd_index = 0;
 800a45e:	4b23      	ldr	r3, [pc, #140]	@ (800a4ec <lcd_fsm_update+0xf4>)
 800a460:	2200      	movs	r2, #0
 800a462:	701a      	strb	r2, [r3, #0]
                    lcd_estado = LCD_SET_CURSOR;
 800a464:	4b1d      	ldr	r3, [pc, #116]	@ (800a4dc <lcd_fsm_update+0xe4>)
 800a466:	2201      	movs	r2, #1
 800a468:	701a      	strb	r2, [r3, #0]
                    lcd_queue[i].activo = false;
 800a46a:	491d      	ldr	r1, [pc, #116]	@ (800a4e0 <lcd_fsm_update+0xe8>)
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	4413      	add	r3, r2
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	4413      	add	r3, r2
 800a478:	440b      	add	r3, r1
 800a47a:	3312      	adds	r3, #18
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
                    break;
 800a480:	bf00      	nop
            break;
 800a482:	e026      	b.n	800a4d2 <lcd_fsm_update+0xda>
            for (int i = 0; i < LCD_MAX_QUEUE; i++) {
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	3301      	adds	r3, #1
 800a488:	607b      	str	r3, [r7, #4]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	ddc4      	ble.n	800a41a <lcd_fsm_update+0x22>
            break;
 800a490:	e01f      	b.n	800a4d2 <lcd_fsm_update+0xda>
            lcd_put_cur(lcd_row, 0);
 800a492:	4b14      	ldr	r3, [pc, #80]	@ (800a4e4 <lcd_fsm_update+0xec>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2100      	movs	r1, #0
 800a498:	4618      	mov	r0, r3
 800a49a:	f7ff fee7 	bl	800a26c <lcd_put_cur>
            lcd_estado = LCD_PRINTING;
 800a49e:	4b0f      	ldr	r3, [pc, #60]	@ (800a4dc <lcd_fsm_update+0xe4>)
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	701a      	strb	r2, [r3, #0]
            break;
 800a4a4:	e015      	b.n	800a4d2 <lcd_fsm_update+0xda>
            if (lcd_index < 16) {
 800a4a6:	4b11      	ldr	r3, [pc, #68]	@ (800a4ec <lcd_fsm_update+0xf4>)
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b0f      	cmp	r3, #15
 800a4ac:	d80d      	bhi.n	800a4ca <lcd_fsm_update+0xd2>
                lcd_send_data(lcd_str[lcd_index++]);
 800a4ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e8 <lcd_fsm_update+0xf0>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4ec <lcd_fsm_update+0xf4>)
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	1c59      	adds	r1, r3, #1
 800a4b8:	b2c8      	uxtb	r0, r1
 800a4ba:	490c      	ldr	r1, [pc, #48]	@ (800a4ec <lcd_fsm_update+0xf4>)
 800a4bc:	7008      	strb	r0, [r1, #0]
 800a4be:	4413      	add	r3, r2
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff fea2 	bl	800a20c <lcd_send_data>
            break;
 800a4c8:	e002      	b.n	800a4d0 <lcd_fsm_update+0xd8>
                lcd_estado = LCD_IDLE;
 800a4ca:	4b04      	ldr	r3, [pc, #16]	@ (800a4dc <lcd_fsm_update+0xe4>)
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	701a      	strb	r2, [r3, #0]
            break;
 800a4d0:	bf00      	nop
}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	200005f6 	.word	0x200005f6
 800a4e0:	200005ac 	.word	0x200005ac
 800a4e4:	200005fc 	.word	0x200005fc
 800a4e8:	200005f8 	.word	0x200005f8
 800a4ec:	200005fd 	.word	0x200005fd

0800a4f0 <lcd_test>:

void lcd_test(void) //limpia pantalla y muestra ok
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	f7ff fe59 	bl	800a1ac <lcd_send_cmd>
    HAL_Delay(5);
 800a4fa:	2005      	movs	r0, #5
 800a4fc:	f7f7 fbc6 	bl	8001c8c <HAL_Delay>
    lcd_send_data('O');
 800a500:	204f      	movs	r0, #79	@ 0x4f
 800a502:	f7ff fe83 	bl	800a20c <lcd_send_data>
    lcd_send_data('K');
 800a506:	204b      	movs	r0, #75	@ 0x4b
 800a508:	f7ff fe80 	bl	800a20c <lcd_send_data>
    lcd_send_data('!');
 800a50c:	2021      	movs	r0, #33	@ 0x21
 800a50e:	f7ff fe7d 	bl	800a20c <lcd_send_data>
    //es bloqueante
}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <task_lcd_init>:

/********************** tareas de sistema (init/update) **********************/

void task_lcd_init(void *params)//inicializa el lcd
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	6078      	str	r0, [r7, #4]
    lcd_init();
 800a520:	f7ff febe 	bl	800a2a0 <lcd_init>
    LOGGER_INFO(" ");
 800a524:	b672      	cpsid	i
 800a526:	4b6d      	ldr	r3, [pc, #436]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a6d      	ldr	r2, [pc, #436]	@ (800a6e0 <task_lcd_init+0x1c8>)
 800a52c:	213f      	movs	r1, #63	@ 0x3f
 800a52e:	4618      	mov	r0, r3
 800a530:	f001 fd14 	bl	800bf5c <sniprintf>
 800a534:	4603      	mov	r3, r0
 800a536:	4a6b      	ldr	r2, [pc, #428]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	4b68      	ldr	r3, [pc, #416]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fd fbe8 	bl	8007d14 <logger_log_print_>
 800a544:	b662      	cpsie	i
 800a546:	b672      	cpsid	i
 800a548:	4b64      	ldr	r3, [pc, #400]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a66      	ldr	r2, [pc, #408]	@ (800a6e8 <task_lcd_init+0x1d0>)
 800a54e:	213f      	movs	r1, #63	@ 0x3f
 800a550:	4618      	mov	r0, r3
 800a552:	f001 fd03 	bl	800bf5c <sniprintf>
 800a556:	4603      	mov	r3, r0
 800a558:	4a62      	ldr	r2, [pc, #392]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	4b5f      	ldr	r3, [pc, #380]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4618      	mov	r0, r3
 800a562:	f7fd fbd7 	bl	8007d14 <logger_log_print_>
 800a566:	b662      	cpsie	i
 800a568:	b672      	cpsid	i
 800a56a:	4b5c      	ldr	r3, [pc, #368]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a5f      	ldr	r2, [pc, #380]	@ (800a6ec <task_lcd_init+0x1d4>)
 800a570:	213f      	movs	r1, #63	@ 0x3f
 800a572:	4618      	mov	r0, r3
 800a574:	f001 fcf2 	bl	800bf5c <sniprintf>
 800a578:	4603      	mov	r3, r0
 800a57a:	4a5a      	ldr	r2, [pc, #360]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a57c:	6013      	str	r3, [r2, #0]
 800a57e:	4b57      	ldr	r3, [pc, #348]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4618      	mov	r0, r3
 800a584:	f7fd fbc6 	bl	8007d14 <logger_log_print_>
 800a588:	b662      	cpsie	i
    LOGGER_INFO("  %s is running - %s", GET_NAME(task_lcd_init), p_task_lcd);
 800a58a:	b672      	cpsid	i
 800a58c:	4b53      	ldr	r3, [pc, #332]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a53      	ldr	r2, [pc, #332]	@ (800a6e0 <task_lcd_init+0x1c8>)
 800a592:	213f      	movs	r1, #63	@ 0x3f
 800a594:	4618      	mov	r0, r3
 800a596:	f001 fce1 	bl	800bf5c <sniprintf>
 800a59a:	4603      	mov	r3, r0
 800a59c:	4a51      	ldr	r2, [pc, #324]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a59e:	6013      	str	r3, [r2, #0]
 800a5a0:	4b4e      	ldr	r3, [pc, #312]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fd fbb5 	bl	8007d14 <logger_log_print_>
 800a5aa:	b662      	cpsie	i
 800a5ac:	b672      	cpsid	i
 800a5ae:	4b4b      	ldr	r3, [pc, #300]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	4b4f      	ldr	r3, [pc, #316]	@ (800a6f0 <task_lcd_init+0x1d8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	4b4e      	ldr	r3, [pc, #312]	@ (800a6f4 <task_lcd_init+0x1dc>)
 800a5ba:	4a4f      	ldr	r2, [pc, #316]	@ (800a6f8 <task_lcd_init+0x1e0>)
 800a5bc:	213f      	movs	r1, #63	@ 0x3f
 800a5be:	f001 fccd 	bl	800bf5c <sniprintf>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	4a47      	ldr	r2, [pc, #284]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	4b44      	ldr	r3, [pc, #272]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fd fba1 	bl	8007d14 <logger_log_print_>
 800a5d2:	b662      	cpsie	i
 800a5d4:	b672      	cpsid	i
 800a5d6:	4b41      	ldr	r3, [pc, #260]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a44      	ldr	r2, [pc, #272]	@ (800a6ec <task_lcd_init+0x1d4>)
 800a5dc:	213f      	movs	r1, #63	@ 0x3f
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fcbc 	bl	800bf5c <sniprintf>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4a3f      	ldr	r2, [pc, #252]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	4b3c      	ldr	r3, [pc, #240]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fd fb90 	bl	8007d14 <logger_log_print_>
 800a5f4:	b662      	cpsie	i
    LOGGER_INFO("  %s is a %s", GET_NAME(task_lcd_update), p_task_lcd_);
 800a5f6:	b672      	cpsid	i
 800a5f8:	4b38      	ldr	r3, [pc, #224]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a38      	ldr	r2, [pc, #224]	@ (800a6e0 <task_lcd_init+0x1c8>)
 800a5fe:	213f      	movs	r1, #63	@ 0x3f
 800a600:	4618      	mov	r0, r3
 800a602:	f001 fcab 	bl	800bf5c <sniprintf>
 800a606:	4603      	mov	r3, r0
 800a608:	4a36      	ldr	r2, [pc, #216]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	4b33      	ldr	r3, [pc, #204]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4618      	mov	r0, r3
 800a612:	f7fd fb7f 	bl	8007d14 <logger_log_print_>
 800a616:	b662      	cpsie	i
 800a618:	b672      	cpsid	i
 800a61a:	4b30      	ldr	r3, [pc, #192]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a61c:	6818      	ldr	r0, [r3, #0]
 800a61e:	4b37      	ldr	r3, [pc, #220]	@ (800a6fc <task_lcd_init+0x1e4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	9300      	str	r3, [sp, #0]
 800a624:	4b36      	ldr	r3, [pc, #216]	@ (800a700 <task_lcd_init+0x1e8>)
 800a626:	4a37      	ldr	r2, [pc, #220]	@ (800a704 <task_lcd_init+0x1ec>)
 800a628:	213f      	movs	r1, #63	@ 0x3f
 800a62a:	f001 fc97 	bl	800bf5c <sniprintf>
 800a62e:	4603      	mov	r3, r0
 800a630:	4a2c      	ldr	r2, [pc, #176]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	4b29      	ldr	r3, [pc, #164]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fd fb6b 	bl	8007d14 <logger_log_print_>
 800a63e:	b662      	cpsie	i
 800a640:	b672      	cpsid	i
 800a642:	4b26      	ldr	r3, [pc, #152]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a29      	ldr	r2, [pc, #164]	@ (800a6ec <task_lcd_init+0x1d4>)
 800a648:	213f      	movs	r1, #63	@ 0x3f
 800a64a:	4618      	mov	r0, r3
 800a64c:	f001 fc86 	bl	800bf5c <sniprintf>
 800a650:	4603      	mov	r3, r0
 800a652:	4a24      	ldr	r2, [pc, #144]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	4b21      	ldr	r3, [pc, #132]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fd fb5a 	bl	8007d14 <logger_log_print_>
 800a660:	b662      	cpsie	i
    g_task_lcd_cnt = G_TASK_LCD_CNT_INI;
 800a662:	4b29      	ldr	r3, [pc, #164]	@ (800a708 <task_lcd_init+0x1f0>)
 800a664:	2200      	movs	r2, #0
 800a666:	601a      	str	r2, [r3, #0]
    LOGGER_INFO("   %s = %lu", GET_NAME(g_task_lcd_cnt), g_task_lcd_cnt);
 800a668:	b672      	cpsid	i
 800a66a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a1c      	ldr	r2, [pc, #112]	@ (800a6e0 <task_lcd_init+0x1c8>)
 800a670:	213f      	movs	r1, #63	@ 0x3f
 800a672:	4618      	mov	r0, r3
 800a674:	f001 fc72 	bl	800bf5c <sniprintf>
 800a678:	4603      	mov	r3, r0
 800a67a:	4a1a      	ldr	r2, [pc, #104]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	4b17      	ldr	r3, [pc, #92]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4618      	mov	r0, r3
 800a684:	f7fd fb46 	bl	8007d14 <logger_log_print_>
 800a688:	b662      	cpsie	i
 800a68a:	b672      	cpsid	i
 800a68c:	4b13      	ldr	r3, [pc, #76]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	4b1d      	ldr	r3, [pc, #116]	@ (800a708 <task_lcd_init+0x1f0>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	4b1d      	ldr	r3, [pc, #116]	@ (800a70c <task_lcd_init+0x1f4>)
 800a698:	4a1d      	ldr	r2, [pc, #116]	@ (800a710 <task_lcd_init+0x1f8>)
 800a69a:	213f      	movs	r1, #63	@ 0x3f
 800a69c:	f001 fc5e 	bl	800bf5c <sniprintf>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	4a10      	ldr	r2, [pc, #64]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fd fb32 	bl	8007d14 <logger_log_print_>
 800a6b0:	b662      	cpsie	i
 800a6b2:	b672      	cpsid	i
 800a6b4:	4b09      	ldr	r3, [pc, #36]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a0c      	ldr	r2, [pc, #48]	@ (800a6ec <task_lcd_init+0x1d4>)
 800a6ba:	213f      	movs	r1, #63	@ 0x3f
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f001 fc4d 	bl	800bf5c <sniprintf>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	4a07      	ldr	r2, [pc, #28]	@ (800a6e4 <task_lcd_init+0x1cc>)
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	4b04      	ldr	r3, [pc, #16]	@ (800a6dc <task_lcd_init+0x1c4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fd fb21 	bl	8007d14 <logger_log_print_>
 800a6d2:	b662      	cpsie	i
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	0800f2d0 	.word	0x0800f2d0
 800a6e0:	0800f054 	.word	0x0800f054
 800a6e4:	20000534 	.word	0x20000534
 800a6e8:	0800f05c 	.word	0x0800f05c
 800a6ec:	0800f060 	.word	0x0800f060
 800a6f0:	20000074 	.word	0x20000074
 800a6f4:	0800f064 	.word	0x0800f064
 800a6f8:	0800f074 	.word	0x0800f074
 800a6fc:	20000078 	.word	0x20000078
 800a700:	0800f08c 	.word	0x0800f08c
 800a704:	0800f09c 	.word	0x0800f09c
 800a708:	200005a4 	.word	0x200005a4
 800a70c:	0800f0ac 	.word	0x0800f0ac
 800a710:	0800f0bc 	.word	0x0800f0bc

0800a714 <task_lcd_update>:

void task_lcd_update(void *params)//actualizar lcd 
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
    bool b_time_update_required = false; //flag se activa si hay ticks pendientes
 800a71c:	2300      	movs	r3, #0
 800a71e:	73fb      	strb	r3, [r7, #15]

    __asm("CPSID i"); //deshabilita interrupciones para codigo bloqueante 
 800a720:	b672      	cpsid	i
    if (G_TASK_LCD_CNT_INI < g_task_lcd_tick_cnt) //compara
 800a722:	4b15      	ldr	r3, [pc, #84]	@ (800a778 <task_lcd_update+0x64>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d006      	beq.n	800a738 <task_lcd_update+0x24>
    {
        g_task_lcd_tick_cnt--; //si hay ticks pendientes decrementa
 800a72a:	4b13      	ldr	r3, [pc, #76]	@ (800a778 <task_lcd_update+0x64>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	3b01      	subs	r3, #1
 800a730:	4a11      	ldr	r2, [pc, #68]	@ (800a778 <task_lcd_update+0x64>)
 800a732:	6013      	str	r3, [r2, #0]
        b_time_update_required = true;
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i"); //habilita interrupciones
 800a738:	b662      	cpsie	i

    if (b_time_update_required) 
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d016      	beq.n	800a76e <task_lcd_update+0x5a>
    {
        g_task_lcd_cnt++;//incrementar contador de ciclo de tareas 
 800a740:	4b0e      	ldr	r3, [pc, #56]	@ (800a77c <task_lcd_update+0x68>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3301      	adds	r3, #1
 800a746:	4a0d      	ldr	r2, [pc, #52]	@ (800a77c <task_lcd_update+0x68>)
 800a748:	6013      	str	r3, [r2, #0]

        lcd_fsm_update(); //rechequear si hay tick pendiente
 800a74a:	f7ff fe55 	bl	800a3f8 <lcd_fsm_update>

        __asm("CPSID i"); //dehabilito interrupciones
 800a74e:	b672      	cpsid	i
        if (G_TASK_LCD_CNT_INI < g_task_lcd_tick_cnt) //comparo
 800a750:	4b09      	ldr	r3, [pc, #36]	@ (800a778 <task_lcd_update+0x64>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d007      	beq.n	800a768 <task_lcd_update+0x54>
        {
            g_task_lcd_tick_cnt--;//si hay ticks pendientes decrementa 
 800a758:	4b07      	ldr	r3, [pc, #28]	@ (800a778 <task_lcd_update+0x64>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4a06      	ldr	r2, [pc, #24]	@ (800a778 <task_lcd_update+0x64>)
 800a760:	6013      	str	r3, [r2, #0]
            b_time_update_required = true;
 800a762:	2301      	movs	r3, #1
 800a764:	73fb      	strb	r3, [r7, #15]
 800a766:	e001      	b.n	800a76c <task_lcd_update+0x58>
        }
        else
        {
            b_time_update_required = false; //si no hay ticks pendientes no es necesario actualizar aun
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
        }
        __asm("CPSIE i");//rehabilitar interrupciones
 800a76c:	b662      	cpsie	i
    }
}
 800a76e:	bf00      	nop
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	200005a8 	.word	0x200005a8
 800a77c:	200005a4 	.word	0x200005a4

0800a780 <task_sensor_ultrasonico_init>:
/********************** FSM ultrasónico ******************************/
static volatile sensor_estado_t sensor_estado = SENSOR_IDLE;

/********************** inicialización del sensor *********************/
void task_sensor_ultrasonico_init(void *params) //inicializa sensor
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b08a      	sub	sp, #40	@ 0x28
 800a784:	af02      	add	r7, sp, #8
 800a786:	6078      	str	r0, [r7, #4]
    // GPIO TRIG 
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a788:	f107 0310 	add.w	r3, r7, #16
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	605a      	str	r2, [r3, #4]
 800a792:	609a      	str	r2, [r3, #8]
 800a794:	60da      	str	r2, [r3, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a796:	4b85      	ldr	r3, [pc, #532]	@ (800a9ac <task_sensor_ultrasonico_init+0x22c>)
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	4a84      	ldr	r2, [pc, #528]	@ (800a9ac <task_sensor_ultrasonico_init+0x22c>)
 800a79c:	f043 0310 	orr.w	r3, r3, #16
 800a7a0:	6193      	str	r3, [r2, #24]
 800a7a2:	4b82      	ldr	r3, [pc, #520]	@ (800a9ac <task_sensor_ultrasonico_init+0x22c>)
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	f003 0310 	and.w	r3, r3, #16
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRIG_PIN;
 800a7ae:	2380      	movs	r3, #128	@ 0x80
 800a7b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TRIG_GPIO, &GPIO_InitStruct);
 800a7ba:	f107 0310 	add.w	r3, r7, #16
 800a7be:	4619      	mov	r1, r3
 800a7c0:	487b      	ldr	r0, [pc, #492]	@ (800a9b0 <task_sensor_ultrasonico_init+0x230>)
 800a7c2:	f7f8 faa9 	bl	8002d18 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(TRIG_GPIO, TRIG_PIN, GPIO_PIN_RESET);
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	2180      	movs	r1, #128	@ 0x80
 800a7ca:	4879      	ldr	r0, [pc, #484]	@ (800a9b0 <task_sensor_ultrasonico_init+0x230>)
 800a7cc:	f7f8 fc3f 	bl	800304e <HAL_GPIO_WritePin>

    // timer en modo input capture
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	4878      	ldr	r0, [pc, #480]	@ (800a9b4 <task_sensor_ultrasonico_init+0x234>)
 800a7d4:	f7fc f8a6 	bl	8006924 <HAL_TIM_IC_Start_IT>
    __HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800a7d8:	4b76      	ldr	r3, [pc, #472]	@ (800a9b4 <task_sensor_ultrasonico_init+0x234>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	6a1a      	ldr	r2, [r3, #32]
 800a7de:	4b75      	ldr	r3, [pc, #468]	@ (800a9b4 <task_sensor_ultrasonico_init+0x234>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 020a 	bic.w	r2, r2, #10
 800a7e6:	621a      	str	r2, [r3, #32]
 800a7e8:	4b72      	ldr	r3, [pc, #456]	@ (800a9b4 <task_sensor_ultrasonico_init+0x234>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	4b71      	ldr	r3, [pc, #452]	@ (800a9b4 <task_sensor_ultrasonico_init+0x234>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6a12      	ldr	r2, [r2, #32]
 800a7f2:	621a      	str	r2, [r3, #32]

    // log
    LOGGER_INFO(" ");
 800a7f4:	b672      	cpsid	i
 800a7f6:	4b70      	ldr	r3, [pc, #448]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a70      	ldr	r2, [pc, #448]	@ (800a9bc <task_sensor_ultrasonico_init+0x23c>)
 800a7fc:	213f      	movs	r1, #63	@ 0x3f
 800a7fe:	4618      	mov	r0, r3
 800a800:	f001 fbac 	bl	800bf5c <sniprintf>
 800a804:	4603      	mov	r3, r0
 800a806:	4a6e      	ldr	r2, [pc, #440]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	4b6b      	ldr	r3, [pc, #428]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fd fa80 	bl	8007d14 <logger_log_print_>
 800a814:	b662      	cpsie	i
 800a816:	b672      	cpsid	i
 800a818:	4b67      	ldr	r3, [pc, #412]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a69      	ldr	r2, [pc, #420]	@ (800a9c4 <task_sensor_ultrasonico_init+0x244>)
 800a81e:	213f      	movs	r1, #63	@ 0x3f
 800a820:	4618      	mov	r0, r3
 800a822:	f001 fb9b 	bl	800bf5c <sniprintf>
 800a826:	4603      	mov	r3, r0
 800a828:	4a65      	ldr	r2, [pc, #404]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	4b62      	ldr	r3, [pc, #392]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f7fd fa6f 	bl	8007d14 <logger_log_print_>
 800a836:	b662      	cpsie	i
 800a838:	b672      	cpsid	i
 800a83a:	4b5f      	ldr	r3, [pc, #380]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a62      	ldr	r2, [pc, #392]	@ (800a9c8 <task_sensor_ultrasonico_init+0x248>)
 800a840:	213f      	movs	r1, #63	@ 0x3f
 800a842:	4618      	mov	r0, r3
 800a844:	f001 fb8a 	bl	800bf5c <sniprintf>
 800a848:	4603      	mov	r3, r0
 800a84a:	4a5d      	ldr	r2, [pc, #372]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	4b5a      	ldr	r3, [pc, #360]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4618      	mov	r0, r3
 800a854:	f7fd fa5e 	bl	8007d14 <logger_log_print_>
 800a858:	b662      	cpsie	i
    LOGGER_INFO("  %s is running - %s", GET_NAME(task_sensor_ultrasonico_init), p_task_sensor);
 800a85a:	b672      	cpsid	i
 800a85c:	4b56      	ldr	r3, [pc, #344]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a56      	ldr	r2, [pc, #344]	@ (800a9bc <task_sensor_ultrasonico_init+0x23c>)
 800a862:	213f      	movs	r1, #63	@ 0x3f
 800a864:	4618      	mov	r0, r3
 800a866:	f001 fb79 	bl	800bf5c <sniprintf>
 800a86a:	4603      	mov	r3, r0
 800a86c:	4a54      	ldr	r2, [pc, #336]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	4b51      	ldr	r3, [pc, #324]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4618      	mov	r0, r3
 800a876:	f7fd fa4d 	bl	8007d14 <logger_log_print_>
 800a87a:	b662      	cpsie	i
 800a87c:	b672      	cpsid	i
 800a87e:	4b4e      	ldr	r3, [pc, #312]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	4b52      	ldr	r3, [pc, #328]	@ (800a9cc <task_sensor_ultrasonico_init+0x24c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	9300      	str	r3, [sp, #0]
 800a888:	4b51      	ldr	r3, [pc, #324]	@ (800a9d0 <task_sensor_ultrasonico_init+0x250>)
 800a88a:	4a52      	ldr	r2, [pc, #328]	@ (800a9d4 <task_sensor_ultrasonico_init+0x254>)
 800a88c:	213f      	movs	r1, #63	@ 0x3f
 800a88e:	f001 fb65 	bl	800bf5c <sniprintf>
 800a892:	4603      	mov	r3, r0
 800a894:	4a4a      	ldr	r2, [pc, #296]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	4b47      	ldr	r3, [pc, #284]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fd fa39 	bl	8007d14 <logger_log_print_>
 800a8a2:	b662      	cpsie	i
 800a8a4:	b672      	cpsid	i
 800a8a6:	4b44      	ldr	r3, [pc, #272]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a47      	ldr	r2, [pc, #284]	@ (800a9c8 <task_sensor_ultrasonico_init+0x248>)
 800a8ac:	213f      	movs	r1, #63	@ 0x3f
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 fb54 	bl	800bf5c <sniprintf>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	4a42      	ldr	r2, [pc, #264]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	4b3f      	ldr	r3, [pc, #252]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fd fa28 	bl	8007d14 <logger_log_print_>
 800a8c4:	b662      	cpsie	i
    LOGGER_INFO("  %s is a %s", GET_NAME(task_sensor_update), p_task_sensor_);
 800a8c6:	b672      	cpsid	i
 800a8c8:	4b3b      	ldr	r3, [pc, #236]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a3b      	ldr	r2, [pc, #236]	@ (800a9bc <task_sensor_ultrasonico_init+0x23c>)
 800a8ce:	213f      	movs	r1, #63	@ 0x3f
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 fb43 	bl	800bf5c <sniprintf>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4a39      	ldr	r2, [pc, #228]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a8da:	6013      	str	r3, [r2, #0]
 800a8dc:	4b36      	ldr	r3, [pc, #216]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fd fa17 	bl	8007d14 <logger_log_print_>
 800a8e6:	b662      	cpsie	i
 800a8e8:	b672      	cpsid	i
 800a8ea:	4b33      	ldr	r3, [pc, #204]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	4b3a      	ldr	r3, [pc, #232]	@ (800a9d8 <task_sensor_ultrasonico_init+0x258>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	4b39      	ldr	r3, [pc, #228]	@ (800a9dc <task_sensor_ultrasonico_init+0x25c>)
 800a8f6:	4a3a      	ldr	r2, [pc, #232]	@ (800a9e0 <task_sensor_ultrasonico_init+0x260>)
 800a8f8:	213f      	movs	r1, #63	@ 0x3f
 800a8fa:	f001 fb2f 	bl	800bf5c <sniprintf>
 800a8fe:	4603      	mov	r3, r0
 800a900:	4a2f      	ldr	r2, [pc, #188]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	4b2c      	ldr	r3, [pc, #176]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fd fa03 	bl	8007d14 <logger_log_print_>
 800a90e:	b662      	cpsie	i
 800a910:	b672      	cpsid	i
 800a912:	4b29      	ldr	r3, [pc, #164]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a2c      	ldr	r2, [pc, #176]	@ (800a9c8 <task_sensor_ultrasonico_init+0x248>)
 800a918:	213f      	movs	r1, #63	@ 0x3f
 800a91a:	4618      	mov	r0, r3
 800a91c:	f001 fb1e 	bl	800bf5c <sniprintf>
 800a920:	4603      	mov	r3, r0
 800a922:	4a27      	ldr	r2, [pc, #156]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a924:	6013      	str	r3, [r2, #0]
 800a926:	4b24      	ldr	r3, [pc, #144]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fd f9f2 	bl	8007d14 <logger_log_print_>
 800a930:	b662      	cpsie	i
    g_task_sensor_cnt = G_TASK_SENSOR_CNT_INI;
 800a932:	4b2c      	ldr	r3, [pc, #176]	@ (800a9e4 <task_sensor_ultrasonico_init+0x264>)
 800a934:	2200      	movs	r2, #0
 800a936:	601a      	str	r2, [r3, #0]
    LOGGER_INFO("   %s = %lu", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 800a938:	b672      	cpsid	i
 800a93a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1f      	ldr	r2, [pc, #124]	@ (800a9bc <task_sensor_ultrasonico_init+0x23c>)
 800a940:	213f      	movs	r1, #63	@ 0x3f
 800a942:	4618      	mov	r0, r3
 800a944:	f001 fb0a 	bl	800bf5c <sniprintf>
 800a948:	4603      	mov	r3, r0
 800a94a:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4618      	mov	r0, r3
 800a954:	f7fd f9de 	bl	8007d14 <logger_log_print_>
 800a958:	b662      	cpsie	i
 800a95a:	b672      	cpsid	i
 800a95c:	4b16      	ldr	r3, [pc, #88]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	4b20      	ldr	r3, [pc, #128]	@ (800a9e4 <task_sensor_ultrasonico_init+0x264>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	4b20      	ldr	r3, [pc, #128]	@ (800a9e8 <task_sensor_ultrasonico_init+0x268>)
 800a968:	4a20      	ldr	r2, [pc, #128]	@ (800a9ec <task_sensor_ultrasonico_init+0x26c>)
 800a96a:	213f      	movs	r1, #63	@ 0x3f
 800a96c:	f001 faf6 	bl	800bf5c <sniprintf>
 800a970:	4603      	mov	r3, r0
 800a972:	4a13      	ldr	r2, [pc, #76]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	4b10      	ldr	r3, [pc, #64]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fd f9ca 	bl	8007d14 <logger_log_print_>
 800a980:	b662      	cpsie	i
 800a982:	b672      	cpsid	i
 800a984:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a0f      	ldr	r2, [pc, #60]	@ (800a9c8 <task_sensor_ultrasonico_init+0x248>)
 800a98a:	213f      	movs	r1, #63	@ 0x3f
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 fae5 	bl	800bf5c <sniprintf>
 800a992:	4603      	mov	r3, r0
 800a994:	4a0a      	ldr	r2, [pc, #40]	@ (800a9c0 <task_sensor_ultrasonico_init+0x240>)
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	4b07      	ldr	r3, [pc, #28]	@ (800a9b8 <task_sensor_ultrasonico_init+0x238>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fd f9b9 	bl	8007d14 <logger_log_print_>
 800a9a2:	b662      	cpsie	i
}
 800a9a4:	bf00      	nop
 800a9a6:	3720      	adds	r7, #32
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	40021000 	.word	0x40021000
 800a9b0:	40011000 	.word	0x40011000
 800a9b4:	200003a8 	.word	0x200003a8
 800a9b8:	0800f2d0 	.word	0x0800f2d0
 800a9bc:	0800f0f8 	.word	0x0800f0f8
 800a9c0:	20000534 	.word	0x20000534
 800a9c4:	0800f100 	.word	0x0800f100
 800a9c8:	0800f104 	.word	0x0800f104
 800a9cc:	2000007c 	.word	0x2000007c
 800a9d0:	0800f108 	.word	0x0800f108
 800a9d4:	0800f128 	.word	0x0800f128
 800a9d8:	20000080 	.word	0x20000080
 800a9dc:	0800f140 	.word	0x0800f140
 800a9e0:	0800f154 	.word	0x0800f154
 800a9e4:	20000600 	.word	0x20000600
 800a9e8:	0800f164 	.word	0x0800f164
 800a9ec:	0800f178 	.word	0x0800f178

0800a9f0 <task_sensor_ultrasonico_update>:

/********************** función periódica del sistema *****************/
void task_sensor_ultrasonico_update(void *params) //actualiza sensor
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
    bool b_time_update_required = false; 
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]

    __asm("CPSID i"); //deshabilito interrupciones para codigo bloqueante
 800a9fc:	b672      	cpsid	i
    if (G_TASK_SENSOR_CNT_INI < g_task_sensor_tick_cnt) //compara
 800a9fe:	4b14      	ldr	r3, [pc, #80]	@ (800aa50 <task_sensor_ultrasonico_update+0x60>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d006      	beq.n	800aa14 <task_sensor_ultrasonico_update+0x24>
    {
        g_task_sensor_tick_cnt--; //si hay ticks pendientes decrementa
 800aa06:	4b12      	ldr	r3, [pc, #72]	@ (800aa50 <task_sensor_ultrasonico_update+0x60>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	4a10      	ldr	r2, [pc, #64]	@ (800aa50 <task_sensor_ultrasonico_update+0x60>)
 800aa0e:	6013      	str	r3, [r2, #0]
        b_time_update_required = true;
 800aa10:	2301      	movs	r3, #1
 800aa12:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");// rehabilito interrupciones
 800aa14:	b662      	cpsie	i

    if (b_time_update_required)
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d014      	beq.n	800aa46 <task_sensor_ultrasonico_update+0x56>
    {
        g_task_sensor_cnt++; // incremento contador de ciclos de tarea 
 800aa1c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa54 <task_sensor_ultrasonico_update+0x64>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3301      	adds	r3, #1
 800aa22:	4a0c      	ldr	r2, [pc, #48]	@ (800aa54 <task_sensor_ultrasonico_update+0x64>)
 800aa24:	6013      	str	r3, [r2, #0]

        __asm("CPSID i");// deshabilito interrupciones 
 800aa26:	b672      	cpsid	i

        if (G_TASK_SENSOR_CNT_INI < g_task_sensor_tick_cnt) //comparar
 800aa28:	4b09      	ldr	r3, [pc, #36]	@ (800aa50 <task_sensor_ultrasonico_update+0x60>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <task_sensor_ultrasonico_update+0x50>
        {
            g_task_sensor_tick_cnt--; //si hay ticks pendientes decrementa
 800aa30:	4b07      	ldr	r3, [pc, #28]	@ (800aa50 <task_sensor_ultrasonico_update+0x60>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	4a06      	ldr	r2, [pc, #24]	@ (800aa50 <task_sensor_ultrasonico_update+0x60>)
 800aa38:	6013      	str	r3, [r2, #0]
            b_time_update_required = true;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	73fb      	strb	r3, [r7, #15]
 800aa3e:	e001      	b.n	800aa44 <task_sensor_ultrasonico_update+0x54>
        }
        else
        {
            b_time_update_required = false; //si no hay ticks pendientes no hace falta actualizar aun
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
        }
        __asm("CPSIE i"); //rehabilito interrupciones
 800aa44:	b662      	cpsie	i
    }
}
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bc80      	pop	{r7}
 800aa4e:	4770      	bx	lr
 800aa50:	20000604 	.word	0x20000604
 800aa54:	20000600 	.word	0x20000600

0800aa58 <HCSR04_Trigger>:

/********************** API pública de medición ************************/
void HCSR04_Trigger(void) //lanza pulso ultrasonico
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
    if (sensor_estado != SENSOR_IDLE) return;
 800aa5e:	4b13      	ldr	r3, [pc, #76]	@ (800aaac <HCSR04_Trigger+0x54>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d11c      	bne.n	800aaa2 <HCSR04_Trigger+0x4a>
    //verifica que el sensor este en idle

    flag_ready = false;
 800aa68:	4b11      	ldr	r3, [pc, #68]	@ (800aab0 <HCSR04_Trigger+0x58>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	701a      	strb	r2, [r3, #0]
    sensor_estado = SENSOR_WAIT_ECHO_START;
 800aa6e:	4b0f      	ldr	r3, [pc, #60]	@ (800aaac <HCSR04_Trigger+0x54>)
 800aa70:	2201      	movs	r2, #1
 800aa72:	701a      	strb	r2, [r3, #0]
    //cambia estado a esperando eco
    HAL_GPIO_WritePin(TRIG_GPIO, TRIG_PIN, GPIO_PIN_SET);
 800aa74:	2201      	movs	r2, #1
 800aa76:	2180      	movs	r1, #128	@ 0x80
 800aa78:	480e      	ldr	r0, [pc, #56]	@ (800aab4 <HCSR04_Trigger+0x5c>)
 800aa7a:	f7f8 fae8 	bl	800304e <HAL_GPIO_WritePin>
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim1);
 800aa7e:	4b0e      	ldr	r3, [pc, #56]	@ (800aab8 <HCSR04_Trigger+0x60>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa84:	607b      	str	r3, [r7, #4]
    //activa TRIG 10 us
    while ((__HAL_TIM_GET_COUNTER(&htim1) - start) < 10);  // delay_us(10)
 800aa86:	bf00      	nop
 800aa88:	4b0b      	ldr	r3, [pc, #44]	@ (800aab8 <HCSR04_Trigger+0x60>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	2b09      	cmp	r3, #9
 800aa94:	d9f8      	bls.n	800aa88 <HCSR04_Trigger+0x30>
    HAL_GPIO_WritePin(TRIG_GPIO, TRIG_PIN, GPIO_PIN_RESET);
 800aa96:	2200      	movs	r2, #0
 800aa98:	2180      	movs	r1, #128	@ 0x80
 800aa9a:	4806      	ldr	r0, [pc, #24]	@ (800aab4 <HCSR04_Trigger+0x5c>)
 800aa9c:	f7f8 fad7 	bl	800304e <HAL_GPIO_WritePin>
 800aaa0:	e000      	b.n	800aaa4 <HCSR04_Trigger+0x4c>
    if (sensor_estado != SENSOR_IDLE) return;
 800aaa2:	bf00      	nop
    //lo vuelve a apagar para iniciar la medicion
}
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000613 	.word	0x20000613
 800aab0:	20000612 	.word	0x20000612
 800aab4:	40011000 	.word	0x40011000
 800aab8:	200003a8 	.word	0x200003a8

0800aabc <HCSR04_Ready>:

bool HCSR04_Ready(void) //retorna true si hay medicion lista
{
 800aabc:	b480      	push	{r7}
 800aabe:	af00      	add	r7, sp, #0
    return flag_ready;
 800aac0:	4b03      	ldr	r3, [pc, #12]	@ (800aad0 <HCSR04_Ready+0x14>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	b2db      	uxtb	r3, r3
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bc80      	pop	{r7}
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20000612 	.word	0x20000612

0800aad4 <HCSR04_GetLast>:

uint16_t HCSR04_GetLast(void) //retorna ultima distancia medida
{
 800aad4:	b480      	push	{r7}
 800aad6:	af00      	add	r7, sp, #0
    flag_ready = false;
 800aad8:	4b04      	ldr	r3, [pc, #16]	@ (800aaec <HCSR04_GetLast+0x18>)
 800aada:	2200      	movs	r2, #0
 800aadc:	701a      	strb	r2, [r3, #0]
    return dist;
 800aade:	4b04      	ldr	r3, [pc, #16]	@ (800aaf0 <HCSR04_GetLast+0x1c>)
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	b29b      	uxth	r3, r3
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bc80      	pop	{r7}
 800aaea:	4770      	bx	lr
 800aaec:	20000612 	.word	0x20000612
 800aaf0:	20000610 	.word	0x20000610

0800aaf4 <HAL_TIM_IC_CaptureCallback>:

/********************** interrupción de captura TIM ********************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //llamada por interrupcion cuando se detecta flanco (rise o fall) en canal del timer
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
    if (htim->Channel != HAL_TIM_ACTIVE_CHANNEL_1) return;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7f1b      	ldrb	r3, [r3, #28]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d169      	bne.n	800abd8 <HAL_TIM_IC_CaptureCallback+0xe4>

    switch (sensor_estado) {
 800ab04:	4b36      	ldr	r3, [pc, #216]	@ (800abe0 <HAL_TIM_IC_CaptureCallback+0xec>)
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d002      	beq.n	800ab14 <HAL_TIM_IC_CaptureCallback+0x20>
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d01b      	beq.n	800ab4a <HAL_TIM_IC_CaptureCallback+0x56>
            sensor_estado = SENSOR_IDLE;
            break;
            //si esta esperando 'flanco de bajada', guarda t_end, calcula delta (duracion el pulso), y la convierte a distancia,marca 'ready', vuelve a 'idle'

        default:
            break;
 800ab12:	e062      	b.n	800abda <HAL_TIM_IC_CaptureCallback+0xe6>
            t_ini = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800ab14:	2100      	movs	r1, #0
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7fc f9f8 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	4a31      	ldr	r2, [pc, #196]	@ (800abe4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800ab20:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6a1a      	ldr	r2, [r3, #32]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f022 020a 	bic.w	r2, r2, #10
 800ab30:	621a      	str	r2, [r3, #32]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6a1a      	ldr	r2, [r3, #32]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0202 	orr.w	r2, r2, #2
 800ab40:	621a      	str	r2, [r3, #32]
            sensor_estado = SENSOR_WAIT_ECHO_END;
 800ab42:	4b27      	ldr	r3, [pc, #156]	@ (800abe0 <HAL_TIM_IC_CaptureCallback+0xec>)
 800ab44:	2202      	movs	r2, #2
 800ab46:	701a      	strb	r2, [r3, #0]
            break;
 800ab48:	e047      	b.n	800abda <HAL_TIM_IC_CaptureCallback+0xe6>
            t_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7fc f9dd 	bl	8006f0c <HAL_TIM_ReadCapturedValue>
 800ab52:	4603      	mov	r3, r0
 800ab54:	4a24      	ldr	r2, [pc, #144]	@ (800abe8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800ab56:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6a1a      	ldr	r2, [r3, #32]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f022 020a 	bic.w	r2, r2, #10
 800ab66:	621a      	str	r2, [r3, #32]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6a12      	ldr	r2, [r2, #32]
 800ab72:	621a      	str	r2, [r3, #32]
            uint32_t delta = (t_end >= t_ini) ? (t_end - t_ini) : (0xFFFF - t_ini + t_end);
 800ab74:	4b1c      	ldr	r3, [pc, #112]	@ (800abe8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	4b1a      	ldr	r3, [pc, #104]	@ (800abe4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d305      	bcc.n	800ab8c <HAL_TIM_IC_CaptureCallback+0x98>
 800ab80:	4b19      	ldr	r3, [pc, #100]	@ (800abe8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	4b17      	ldr	r3, [pc, #92]	@ (800abe4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	e007      	b.n	800ab9c <HAL_TIM_IC_CaptureCallback+0xa8>
 800ab8c:	4b16      	ldr	r3, [pc, #88]	@ (800abe8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	4b14      	ldr	r3, [pc, #80]	@ (800abe4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800ab9a:	33ff      	adds	r3, #255	@ 0xff
 800ab9c:	60fb      	str	r3, [r7, #12]
            dist = (uint16_t)((delta * 0.0343f) / 2.0f);  // distancia en cm
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7f6 f828 	bl	8000bf4 <__aeabi_ui2f>
 800aba4:	4603      	mov	r3, r0
 800aba6:	4911      	ldr	r1, [pc, #68]	@ (800abec <HAL_TIM_IC_CaptureCallback+0xf8>)
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f6 f87b 	bl	8000ca4 <__aeabi_fmul>
 800abae:	4603      	mov	r3, r0
 800abb0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7f6 f929 	bl	8000e0c <__aeabi_fdiv>
 800abba:	4603      	mov	r3, r0
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7f6 f9c1 	bl	8000f44 <__aeabi_f2uiz>
 800abc2:	4603      	mov	r3, r0
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	4b0a      	ldr	r3, [pc, #40]	@ (800abf0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800abc8:	801a      	strh	r2, [r3, #0]
            flag_ready = true;
 800abca:	4b0a      	ldr	r3, [pc, #40]	@ (800abf4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800abcc:	2201      	movs	r2, #1
 800abce:	701a      	strb	r2, [r3, #0]
            sensor_estado = SENSOR_IDLE;
 800abd0:	4b03      	ldr	r3, [pc, #12]	@ (800abe0 <HAL_TIM_IC_CaptureCallback+0xec>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
            break;
 800abd6:	e000      	b.n	800abda <HAL_TIM_IC_CaptureCallback+0xe6>
    if (htim->Channel != HAL_TIM_ACTIVE_CHANNEL_1) return;
 800abd8:	bf00      	nop
    }
}
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000613 	.word	0x20000613
 800abe4:	20000608 	.word	0x20000608
 800abe8:	2000060c 	.word	0x2000060c
 800abec:	3d0c7e28 	.word	0x3d0c7e28
 800abf0:	20000610 	.word	0x20000610
 800abf4:	20000612 	.word	0x20000612

0800abf8 <sensor_ultrasonico_test>:

/********************** autotest del sensor ****************************/
bool sensor_ultrasonico_test(void) //lanza disparo
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
    HCSR04_Trigger();
 800abfe:	f7ff ff2b 	bl	800aa58 <HCSR04_Trigger>
    HAL_Delay(100); //espera 100ms 
 800ac02:	2064      	movs	r0, #100	@ 0x64
 800ac04:	f7f7 f842 	bl	8001c8c <HAL_Delay>
    if (!HCSR04_Ready()) return false;
 800ac08:	f7ff ff58 	bl	800aabc <HCSR04_Ready>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	f083 0301 	eor.w	r3, r3, #1
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <sensor_ultrasonico_test+0x24>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e00f      	b.n	800ac3c <sensor_ultrasonico_test+0x44>
    uint16_t d = HCSR04_GetLast();
 800ac1c:	f7ff ff5a 	bl	800aad4 <HCSR04_GetLast>
 800ac20:	4603      	mov	r3, r0
 800ac22:	80fb      	strh	r3, [r7, #6]
    return (d > 0 && d < 200); //chequea si recibio valor valido entre 1 y 200 cm 
 800ac24:	88fb      	ldrh	r3, [r7, #6]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d004      	beq.n	800ac34 <sensor_ultrasonico_test+0x3c>
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ac2e:	d801      	bhi.n	800ac34 <sensor_ultrasonico_test+0x3c>
 800ac30:	2301      	movs	r3, #1
 800ac32:	e000      	b.n	800ac36 <sensor_ultrasonico_test+0x3e>
 800ac34:	2300      	movs	r3, #0
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	b2db      	uxtb	r3, r3
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <check_stock>:
    [CAFE_DOBLE]     = {2, 0, 2, 0},
    [CAFE_AMERICANO] = {1, 0, 2, 0}
}; //define arreglo constante con receta de cada tipo de cafe, cada entrada especifica cuantas cantidades de ingredientes necesita {cafe,leche,agua,choco}

bool check_stock(tipo_de_cafe tipo)//chequea si suficiente stock para un tipo de cafe dado 
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
    if (tipo < CAFE_LATTE || tipo > CAFE_AMERICANO) return false;
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d901      	bls.n	800ac58 <check_stock+0x14>
 800ac54:	2300      	movs	r3, #0
 800ac56:	e02c      	b.n	800acb2 <check_stock+0x6e>

    return  stock_cafe     >= recetas[tipo].cafe &&
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	4a18      	ldr	r2, [pc, #96]	@ (800acbc <check_stock+0x78>)
 800ac5c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800ac60:	461a      	mov	r2, r3
 800ac62:	4b17      	ldr	r3, [pc, #92]	@ (800acc0 <check_stock+0x7c>)
 800ac64:	681b      	ldr	r3, [r3, #0]
            stock_leche    >= recetas[tipo].leche &&
            stock_agua     >= recetas[tipo].agua &&
 800ac66:	429a      	cmp	r2, r3
 800ac68:	dc1f      	bgt.n	800acaa <check_stock+0x66>
            stock_leche    >= recetas[tipo].leche &&
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	4a13      	ldr	r2, [pc, #76]	@ (800acbc <check_stock+0x78>)
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	785b      	ldrb	r3, [r3, #1]
 800ac74:	461a      	mov	r2, r3
 800ac76:	4b13      	ldr	r3, [pc, #76]	@ (800acc4 <check_stock+0x80>)
 800ac78:	681b      	ldr	r3, [r3, #0]
    return  stock_cafe     >= recetas[tipo].cafe &&
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	dc15      	bgt.n	800acaa <check_stock+0x66>
            stock_agua     >= recetas[tipo].agua &&
 800ac7e:	79fb      	ldrb	r3, [r7, #7]
 800ac80:	4a0e      	ldr	r2, [pc, #56]	@ (800acbc <check_stock+0x78>)
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	789b      	ldrb	r3, [r3, #2]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	4b0f      	ldr	r3, [pc, #60]	@ (800acc8 <check_stock+0x84>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
            stock_leche    >= recetas[tipo].leche &&
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	dc0b      	bgt.n	800acaa <check_stock+0x66>
            stock_chocolate>= recetas[tipo].chocolate;
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	4a09      	ldr	r2, [pc, #36]	@ (800acbc <check_stock+0x78>)
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	78db      	ldrb	r3, [r3, #3]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	4b0b      	ldr	r3, [pc, #44]	@ (800accc <check_stock+0x88>)
 800aca0:	681b      	ldr	r3, [r3, #0]
            stock_agua     >= recetas[tipo].agua &&
 800aca2:	429a      	cmp	r2, r3
 800aca4:	dc01      	bgt.n	800acaa <check_stock+0x66>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e000      	b.n	800acac <check_stock+0x68>
 800acaa:	2300      	movs	r3, #0
 800acac:	f003 0301 	and.w	r3, r3, #1
 800acb0:	b2db      	uxtb	r3, r3

    //retorna true sii hay suficiente de todos los ingredientes
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bc80      	pop	{r7}
 800acba:	4770      	bx	lr
 800acbc:	0800f2d4 	.word	0x0800f2d4
 800acc0:	20000084 	.word	0x20000084
 800acc4:	20000088 	.word	0x20000088
 800acc8:	2000008c 	.word	0x2000008c
 800accc:	20000090 	.word	0x20000090

0800acd0 <descontar_stock>:

void descontar_stock(tipo_de_cafe tipo)//descuenta del stock ingredientes usados por tipo de cafe indicado
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	4603      	mov	r3, r0
 800acd8:	71fb      	strb	r3, [r7, #7]
    if (!check_stock(tipo)) return;
 800acda:	79fb      	ldrb	r3, [r7, #7]
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff ffb1 	bl	800ac44 <check_stock>
 800ace2:	4603      	mov	r3, r0
 800ace4:	f083 0301 	eor.w	r3, r3, #1
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d127      	bne.n	800ad3e <descontar_stock+0x6e>
    //verifica haya stock suficiente, si no hay sale sin hacer nada

    stock_cafe      -= recetas[tipo].cafe;
 800acee:	4b16      	ldr	r3, [pc, #88]	@ (800ad48 <descontar_stock+0x78>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	79fa      	ldrb	r2, [r7, #7]
 800acf4:	4915      	ldr	r1, [pc, #84]	@ (800ad4c <descontar_stock+0x7c>)
 800acf6:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	4a12      	ldr	r2, [pc, #72]	@ (800ad48 <descontar_stock+0x78>)
 800acfe:	6013      	str	r3, [r2, #0]
    stock_leche     -= recetas[tipo].leche;
 800ad00:	4b13      	ldr	r3, [pc, #76]	@ (800ad50 <descontar_stock+0x80>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	4911      	ldr	r1, [pc, #68]	@ (800ad4c <descontar_stock+0x7c>)
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	440b      	add	r3, r1
 800ad0c:	785b      	ldrb	r3, [r3, #1]
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	4a0f      	ldr	r2, [pc, #60]	@ (800ad50 <descontar_stock+0x80>)
 800ad12:	6013      	str	r3, [r2, #0]
    stock_agua      -= recetas[tipo].agua;
 800ad14:	4b0f      	ldr	r3, [pc, #60]	@ (800ad54 <descontar_stock+0x84>)
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	490c      	ldr	r1, [pc, #48]	@ (800ad4c <descontar_stock+0x7c>)
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	789b      	ldrb	r3, [r3, #2]
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	4a0b      	ldr	r2, [pc, #44]	@ (800ad54 <descontar_stock+0x84>)
 800ad26:	6013      	str	r3, [r2, #0]
    stock_chocolate -= recetas[tipo].chocolate;
 800ad28:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <descontar_stock+0x88>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	4907      	ldr	r1, [pc, #28]	@ (800ad4c <descontar_stock+0x7c>)
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	440b      	add	r3, r1
 800ad34:	78db      	ldrb	r3, [r3, #3]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	4a07      	ldr	r2, [pc, #28]	@ (800ad58 <descontar_stock+0x88>)
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	e000      	b.n	800ad40 <descontar_stock+0x70>
    if (!check_stock(tipo)) return;
 800ad3e:	bf00      	nop
    //resta cantidades correspondientes al stock actual
}
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20000084 	.word	0x20000084
 800ad4c:	0800f2d4 	.word	0x0800f2d4
 800ad50:	20000088 	.word	0x20000088
 800ad54:	2000008c 	.word	0x2000008c
 800ad58:	20000090 	.word	0x20000090

0800ad5c <check_stock_receta>:

bool check_stock_receta(uint8_t receta[4]) //verifica si hay stock suficiente para personalizado
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
    return receta[0] <= stock_cafe &&
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	4b13      	ldr	r3, [pc, #76]	@ (800adb8 <check_stock_receta+0x5c>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
           receta[1] <= stock_leche &&
           receta[2] <= stock_agua &&
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	dc19      	bgt.n	800ada6 <check_stock_receta+0x4a>
           receta[1] <= stock_leche &&
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	3301      	adds	r3, #1
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	4b10      	ldr	r3, [pc, #64]	@ (800adbc <check_stock_receta+0x60>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
    return receta[0] <= stock_cafe &&
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	dc11      	bgt.n	800ada6 <check_stock_receta+0x4a>
           receta[2] <= stock_agua &&
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3302      	adds	r3, #2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	@ (800adc0 <check_stock_receta+0x64>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
           receta[1] <= stock_leche &&
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	dc09      	bgt.n	800ada6 <check_stock_receta+0x4a>
           receta[3] <= stock_chocolate;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3303      	adds	r3, #3
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	@ (800adc4 <check_stock_receta+0x68>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
           receta[2] <= stock_agua &&
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	dc01      	bgt.n	800ada6 <check_stock_receta+0x4a>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <check_stock_receta+0x4c>
 800ada6:	2300      	movs	r3, #0
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	b2db      	uxtb	r3, r3
    //verifica que haya suficiente de cada ingrediente, devuelve true si alcanza
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bc80      	pop	{r7}
 800adb6:	4770      	bx	lr
 800adb8:	20000084 	.word	0x20000084
 800adbc:	20000088 	.word	0x20000088
 800adc0:	2000008c 	.word	0x2000008c
 800adc4:	20000090 	.word	0x20000090

0800adc8 <descontar_stock_receta>:

void descontar_stock_receta(uint8_t receta[4]) //descuenta stock para personalizado
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
    stock_cafe      -= receta[0];
 800add0:	4b11      	ldr	r3, [pc, #68]	@ (800ae18 <descontar_stock_receta+0x50>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7812      	ldrb	r2, [r2, #0]
 800add8:	1a9b      	subs	r3, r3, r2
 800adda:	4a0f      	ldr	r2, [pc, #60]	@ (800ae18 <descontar_stock_receta+0x50>)
 800addc:	6013      	str	r3, [r2, #0]
    stock_leche     -= receta[1];
 800adde:	4b0f      	ldr	r3, [pc, #60]	@ (800ae1c <descontar_stock_receta+0x54>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	3201      	adds	r2, #1
 800ade6:	7812      	ldrb	r2, [r2, #0]
 800ade8:	1a9b      	subs	r3, r3, r2
 800adea:	4a0c      	ldr	r2, [pc, #48]	@ (800ae1c <descontar_stock_receta+0x54>)
 800adec:	6013      	str	r3, [r2, #0]
    stock_agua      -= receta[2];
 800adee:	4b0c      	ldr	r3, [pc, #48]	@ (800ae20 <descontar_stock_receta+0x58>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	3202      	adds	r2, #2
 800adf6:	7812      	ldrb	r2, [r2, #0]
 800adf8:	1a9b      	subs	r3, r3, r2
 800adfa:	4a09      	ldr	r2, [pc, #36]	@ (800ae20 <descontar_stock_receta+0x58>)
 800adfc:	6013      	str	r3, [r2, #0]
    stock_chocolate -= receta[3];
 800adfe:	4b09      	ldr	r3, [pc, #36]	@ (800ae24 <descontar_stock_receta+0x5c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	3203      	adds	r2, #3
 800ae06:	7812      	ldrb	r2, [r2, #0]
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	4a06      	ldr	r2, [pc, #24]	@ (800ae24 <descontar_stock_receta+0x5c>)
 800ae0c:	6013      	str	r3, [r2, #0]
    //resta valores corresponientes de stock
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bc80      	pop	{r7}
 800ae16:	4770      	bx	lr
 800ae18:	20000084 	.word	0x20000084
 800ae1c:	20000088 	.word	0x20000088
 800ae20:	2000008c 	.word	0x2000008c
 800ae24:	20000090 	.word	0x20000090

0800ae28 <get_stock>:

uint8_t get_stock(uint8_t idx)//devuelve valor actual de stock para ingrediente dado segun su indice 
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]
    switch (idx) {
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d81b      	bhi.n	800ae70 <get_stock+0x48>
 800ae38:	a201      	add	r2, pc, #4	@ (adr r2, 800ae40 <get_stock+0x18>)
 800ae3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3e:	bf00      	nop
 800ae40:	0800ae51 	.word	0x0800ae51
 800ae44:	0800ae59 	.word	0x0800ae59
 800ae48:	0800ae61 	.word	0x0800ae61
 800ae4c:	0800ae69 	.word	0x0800ae69
        case 0: return stock_cafe;  //cafe
 800ae50:	4b0a      	ldr	r3, [pc, #40]	@ (800ae7c <get_stock+0x54>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	e00c      	b.n	800ae72 <get_stock+0x4a>
        case 1: return stock_leche; //leche
 800ae58:	4b09      	ldr	r3, [pc, #36]	@ (800ae80 <get_stock+0x58>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	e008      	b.n	800ae72 <get_stock+0x4a>
        case 2: return stock_agua;  //agua 
 800ae60:	4b08      	ldr	r3, [pc, #32]	@ (800ae84 <get_stock+0x5c>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	e004      	b.n	800ae72 <get_stock+0x4a>
        case 3: return stock_chocolate; //choco
 800ae68:	4b07      	ldr	r3, [pc, #28]	@ (800ae88 <get_stock+0x60>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	e000      	b.n	800ae72 <get_stock+0x4a>
        default: return 0; //indice no valido
 800ae70:	2300      	movs	r3, #0
    }
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bc80      	pop	{r7}
 800ae7a:	4770      	bx	lr
 800ae7c:	20000084 	.word	0x20000084
 800ae80:	20000088 	.word	0x20000088
 800ae84:	2000008c 	.word	0x2000008c
 800ae88:	20000090 	.word	0x20000090

0800ae8c <eeprom_test>:
volatile uint8_t eeprom_guardando = 0; //flag: se esta escribiendo
static eeprom_fsm_t eeprom_fsm;

/********************** funciones privadas ************************************/
bool eeprom_test(void) //prueba basica de lectura/escritura 
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af04      	add	r7, sp, #16
    uint8_t test_val = 0xAB, read_val = 0;
 800ae92:	23ab      	movs	r3, #171	@ 0xab
 800ae94:	71fb      	strb	r3, [r7, #7]
 800ae96:	2300      	movs	r3, #0
 800ae98:	71bb      	strb	r3, [r7, #6]

    if (HAL_I2C_Mem_Write(&hi2c2, EEPROM_I2C_ADDR, 0x01FF, I2C_MEMADD_SIZE_16BIT, &test_val, 1, 50) != HAL_OK)
 800ae9a:	2332      	movs	r3, #50	@ 0x32
 800ae9c:	9302      	str	r3, [sp, #8]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	9301      	str	r3, [sp, #4]
 800aea2:	1dfb      	adds	r3, r7, #7
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	2310      	movs	r3, #16
 800aea8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aeac:	21a0      	movs	r1, #160	@ 0xa0
 800aeae:	4814      	ldr	r0, [pc, #80]	@ (800af00 <eeprom_test+0x74>)
 800aeb0:	f7f8 fb5e 	bl	8003570 <HAL_I2C_Mem_Write>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <eeprom_test+0x32>
        return false;
 800aeba:	2300      	movs	r3, #0
 800aebc:	e01b      	b.n	800aef6 <eeprom_test+0x6a>

    HAL_Delay(5); // tiempo de espera de escritura
 800aebe:	2005      	movs	r0, #5
 800aec0:	f7f6 fee4 	bl	8001c8c <HAL_Delay>

    if (HAL_I2C_Mem_Read(&hi2c2, EEPROM_I2C_ADDR, 0x01FF, I2C_MEMADD_SIZE_16BIT, &read_val, 1, 50) != HAL_OK)
 800aec4:	2332      	movs	r3, #50	@ 0x32
 800aec6:	9302      	str	r3, [sp, #8]
 800aec8:	2301      	movs	r3, #1
 800aeca:	9301      	str	r3, [sp, #4]
 800aecc:	1dbb      	adds	r3, r7, #6
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	2310      	movs	r3, #16
 800aed2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800aed6:	21a0      	movs	r1, #160	@ 0xa0
 800aed8:	4809      	ldr	r0, [pc, #36]	@ (800af00 <eeprom_test+0x74>)
 800aeda:	f7f8 fc43 	bl	8003764 <HAL_I2C_Mem_Read>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <eeprom_test+0x5c>
        return false;
 800aee4:	2300      	movs	r3, #0
 800aee6:	e006      	b.n	800aef6 <eeprom_test+0x6a>

    return read_val == test_val; // solo retorna true si se escribio y leyó bien
 800aee8:	79ba      	ldrb	r2, [r7, #6]
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	bf0c      	ite	eq
 800aef0:	2301      	moveq	r3, #1
 800aef2:	2300      	movne	r3, #0
 800aef4:	b2db      	uxtb	r3, r3
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20000354 	.word	0x20000354

0800af04 <aplicar_config>:

static void aplicar_config(ConfigEEPROM *cfg) //copia datos del buffer (temp,selec cafe,stock,personaliz) al sistema global 
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
    temp_deseada = cfg->temp_deseada;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	781a      	ldrb	r2, [r3, #0]
 800af10:	4b12      	ldr	r3, [pc, #72]	@ (800af5c <aplicar_config+0x58>)
 800af12:	701a      	strb	r2, [r3, #0]
    cafe_seleccionado = cfg->cafe_seleccionado;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	785a      	ldrb	r2, [r3, #1]
 800af18:	4b11      	ldr	r3, [pc, #68]	@ (800af60 <aplicar_config+0x5c>)
 800af1a:	701a      	strb	r2, [r3, #0]

    stock_cafe      = cfg->stock[0];
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	789b      	ldrb	r3, [r3, #2]
 800af20:	461a      	mov	r2, r3
 800af22:	4b10      	ldr	r3, [pc, #64]	@ (800af64 <aplicar_config+0x60>)
 800af24:	601a      	str	r2, [r3, #0]
    stock_leche     = cfg->stock[1];
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	461a      	mov	r2, r3
 800af2c:	4b0e      	ldr	r3, [pc, #56]	@ (800af68 <aplicar_config+0x64>)
 800af2e:	601a      	str	r2, [r3, #0]
    stock_agua      = cfg->stock[2];
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	791b      	ldrb	r3, [r3, #4]
 800af34:	461a      	mov	r2, r3
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <aplicar_config+0x68>)
 800af38:	601a      	str	r2, [r3, #0]
    stock_chocolate = cfg->stock[3];
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	795b      	ldrb	r3, [r3, #5]
 800af3e:	461a      	mov	r2, r3
 800af40:	4b0b      	ldr	r3, [pc, #44]	@ (800af70 <aplicar_config+0x6c>)
 800af42:	601a      	str	r2, [r3, #0]

    memcpy(receta_personal, cfg->receta_personal, 4);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	3306      	adds	r3, #6
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	4b09      	ldr	r3, [pc, #36]	@ (800af74 <aplicar_config+0x70>)
 800af4e:	601a      	str	r2, [r3, #0]
     //te guarda el último cafe seleccionado, si coincide con ser el personalizado te lo guarda, si no es así se pierde
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	bc80      	pop	{r7}
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	2000001c 	.word	0x2000001c
 800af60:	2000057c 	.word	0x2000057c
 800af64:	20000084 	.word	0x20000084
 800af68:	20000088 	.word	0x20000088
 800af6c:	2000008c 	.word	0x2000008c
 800af70:	20000090 	.word	0x20000090
 800af74:	20000578 	.word	0x20000578

0800af78 <eeprom_load_config>:

/********************** funciones públicas ************************************/
void eeprom_load_config(void) //cargar configuración desde EEPROM 
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af04      	add	r7, sp, #16
    ConfigEEPROM leida;
    //intenta leer toda la estructura desde EEPROM
    if (HAL_I2C_Mem_Read(&hi2c2, EEPROM_I2C_ADDR, EEPROM_CONFIG_ADDR,
 800af7e:	2305      	movs	r3, #5
 800af80:	9302      	str	r3, [sp, #8]
 800af82:	230a      	movs	r3, #10
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	1d3b      	adds	r3, r7, #4
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	2310      	movs	r3, #16
 800af8c:	2200      	movs	r2, #0
 800af8e:	21a0      	movs	r1, #160	@ 0xa0
 800af90:	482b      	ldr	r0, [pc, #172]	@ (800b040 <eeprom_load_config+0xc8>)
 800af92:	f7f8 fbe7 	bl	8003764 <HAL_I2C_Mem_Read>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d015      	beq.n	800afc8 <eeprom_load_config+0x50>
                         I2C_MEMADD_SIZE_16BIT, (uint8_t*)&leida,
                         sizeof(leida), EEPROM_TIMEOUT) != HAL_OK) {
        // si hay falla/error: carga valores por defecto
        temp_deseada = 60;
 800af9c:	4b29      	ldr	r3, [pc, #164]	@ (800b044 <eeprom_load_config+0xcc>)
 800af9e:	223c      	movs	r2, #60	@ 0x3c
 800afa0:	701a      	strb	r2, [r3, #0]
        cafe_seleccionado = CAFE_LATTE;
 800afa2:	4b29      	ldr	r3, [pc, #164]	@ (800b048 <eeprom_load_config+0xd0>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	701a      	strb	r2, [r3, #0]
        stock_cafe = stock_leche = stock_agua = stock_chocolate = 10;
 800afa8:	4b28      	ldr	r3, [pc, #160]	@ (800b04c <eeprom_load_config+0xd4>)
 800afaa:	220a      	movs	r2, #10
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	4b27      	ldr	r3, [pc, #156]	@ (800b04c <eeprom_load_config+0xd4>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a27      	ldr	r2, [pc, #156]	@ (800b050 <eeprom_load_config+0xd8>)
 800afb4:	6013      	str	r3, [r2, #0]
 800afb6:	4b26      	ldr	r3, [pc, #152]	@ (800b050 <eeprom_load_config+0xd8>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a26      	ldr	r2, [pc, #152]	@ (800b054 <eeprom_load_config+0xdc>)
 800afbc:	6013      	str	r3, [r2, #0]
 800afbe:	4b25      	ldr	r3, [pc, #148]	@ (800b054 <eeprom_load_config+0xdc>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a25      	ldr	r2, [pc, #148]	@ (800b058 <eeprom_load_config+0xe0>)
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	e037      	b.n	800b038 <eeprom_load_config+0xc0>
        return;
    }
    //validaciones básicas: temp en rango valido;tipo cafe dentro de num valida; stocks<20;
    temp_deseada       = (leida.temp_deseada >= 20 && leida.temp_deseada <= 90) ? leida.temp_deseada : 60;
 800afc8:	793b      	ldrb	r3, [r7, #4]
 800afca:	2b13      	cmp	r3, #19
 800afcc:	d904      	bls.n	800afd8 <eeprom_load_config+0x60>
 800afce:	793b      	ldrb	r3, [r7, #4]
 800afd0:	2b5a      	cmp	r3, #90	@ 0x5a
 800afd2:	d801      	bhi.n	800afd8 <eeprom_load_config+0x60>
 800afd4:	793b      	ldrb	r3, [r7, #4]
 800afd6:	e000      	b.n	800afda <eeprom_load_config+0x62>
 800afd8:	233c      	movs	r3, #60	@ 0x3c
 800afda:	4a1a      	ldr	r2, [pc, #104]	@ (800b044 <eeprom_load_config+0xcc>)
 800afdc:	7013      	strb	r3, [r2, #0]
    cafe_seleccionado  = (leida.cafe_seleccionado <= CAFE_AMERICANO) ? leida.cafe_seleccionado : CAFE_LATTE;
 800afde:	797b      	ldrb	r3, [r7, #5]
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d801      	bhi.n	800afe8 <eeprom_load_config+0x70>
 800afe4:	797b      	ldrb	r3, [r7, #5]
 800afe6:	e000      	b.n	800afea <eeprom_load_config+0x72>
 800afe8:	2300      	movs	r3, #0
 800afea:	4a17      	ldr	r2, [pc, #92]	@ (800b048 <eeprom_load_config+0xd0>)
 800afec:	7013      	strb	r3, [r2, #0]

    stock_cafe         = (leida.stock[0] <= 20) ? leida.stock[0] : 10;
 800afee:	79bb      	ldrb	r3, [r7, #6]
 800aff0:	2b14      	cmp	r3, #20
 800aff2:	d801      	bhi.n	800aff8 <eeprom_load_config+0x80>
 800aff4:	79bb      	ldrb	r3, [r7, #6]
 800aff6:	e000      	b.n	800affa <eeprom_load_config+0x82>
 800aff8:	230a      	movs	r3, #10
 800affa:	4a17      	ldr	r2, [pc, #92]	@ (800b058 <eeprom_load_config+0xe0>)
 800affc:	6013      	str	r3, [r2, #0]
    stock_leche        = (leida.stock[1] <= 20) ? leida.stock[1] : 10;
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	2b14      	cmp	r3, #20
 800b002:	d801      	bhi.n	800b008 <eeprom_load_config+0x90>
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	e000      	b.n	800b00a <eeprom_load_config+0x92>
 800b008:	230a      	movs	r3, #10
 800b00a:	4a12      	ldr	r2, [pc, #72]	@ (800b054 <eeprom_load_config+0xdc>)
 800b00c:	6013      	str	r3, [r2, #0]
    stock_agua         = (leida.stock[2] <= 20) ? leida.stock[2] : 10;
 800b00e:	7a3b      	ldrb	r3, [r7, #8]
 800b010:	2b14      	cmp	r3, #20
 800b012:	d801      	bhi.n	800b018 <eeprom_load_config+0xa0>
 800b014:	7a3b      	ldrb	r3, [r7, #8]
 800b016:	e000      	b.n	800b01a <eeprom_load_config+0xa2>
 800b018:	230a      	movs	r3, #10
 800b01a:	4a0d      	ldr	r2, [pc, #52]	@ (800b050 <eeprom_load_config+0xd8>)
 800b01c:	6013      	str	r3, [r2, #0]
    stock_chocolate    = (leida.stock[3] <= 20) ? leida.stock[3] : 10;
 800b01e:	7a7b      	ldrb	r3, [r7, #9]
 800b020:	2b14      	cmp	r3, #20
 800b022:	d801      	bhi.n	800b028 <eeprom_load_config+0xb0>
 800b024:	7a7b      	ldrb	r3, [r7, #9]
 800b026:	e000      	b.n	800b02a <eeprom_load_config+0xb2>
 800b028:	230a      	movs	r3, #10
 800b02a:	4a08      	ldr	r2, [pc, #32]	@ (800b04c <eeprom_load_config+0xd4>)
 800b02c:	6013      	str	r3, [r2, #0]

    memcpy(receta_personal, leida.receta_personal, 4);
 800b02e:	f8d7 300a 	ldr.w	r3, [r7, #10]
 800b032:	461a      	mov	r2, r3
 800b034:	4b09      	ldr	r3, [pc, #36]	@ (800b05c <eeprom_load_config+0xe4>)
 800b036:	601a      	str	r2, [r3, #0]
}
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20000354 	.word	0x20000354
 800b044:	2000001c 	.word	0x2000001c
 800b048:	2000057c 	.word	0x2000057c
 800b04c:	20000090 	.word	0x20000090
 800b050:	2000008c 	.word	0x2000008c
 800b054:	20000088 	.word	0x20000088
 800b058:	20000084 	.word	0x20000084
 800b05c:	20000578 	.word	0x20000578

0800b060 <eeprom_start_save>:

void eeprom_start_save(void) //guardar configuración (solo si cambia) 
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
    if (eeprom_fsm.state != EEPROM_STATE_IDLE) return;
 800b066:	4b20      	ldr	r3, [pc, #128]	@ (800b0e8 <eeprom_start_save+0x88>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d136      	bne.n	800b0dc <eeprom_start_save+0x7c>
   //arma una nueva estructura con los valores actuales
    ConfigEEPROM nueva = {
 800b06e:	4b1f      	ldr	r3, [pc, #124]	@ (800b0ec <eeprom_start_save+0x8c>)
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	713b      	strb	r3, [r7, #4]
 800b074:	4b1e      	ldr	r3, [pc, #120]	@ (800b0f0 <eeprom_start_save+0x90>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	717b      	strb	r3, [r7, #5]
 800b07a:	4b1e      	ldr	r3, [pc, #120]	@ (800b0f4 <eeprom_start_save+0x94>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	b2db      	uxtb	r3, r3
 800b080:	71bb      	strb	r3, [r7, #6]
 800b082:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f8 <eeprom_start_save+0x98>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	71fb      	strb	r3, [r7, #7]
 800b08a:	4b1c      	ldr	r3, [pc, #112]	@ (800b0fc <eeprom_start_save+0x9c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	723b      	strb	r3, [r7, #8]
 800b092:	4b1b      	ldr	r3, [pc, #108]	@ (800b100 <eeprom_start_save+0xa0>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	727b      	strb	r3, [r7, #9]
        .temp_deseada = temp_deseada,
        .cafe_seleccionado = cafe_seleccionado,
        .stock = { stock_cafe, stock_leche, stock_agua, stock_chocolate },
        .receta_personal = {
            receta_personal[0],
 800b09a:	4b1a      	ldr	r3, [pc, #104]	@ (800b104 <eeprom_start_save+0xa4>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
    ConfigEEPROM nueva = {
 800b09e:	72bb      	strb	r3, [r7, #10]
            receta_personal[1],
 800b0a0:	4b18      	ldr	r3, [pc, #96]	@ (800b104 <eeprom_start_save+0xa4>)
 800b0a2:	785b      	ldrb	r3, [r3, #1]
    ConfigEEPROM nueva = {
 800b0a4:	72fb      	strb	r3, [r7, #11]
            receta_personal[2],
 800b0a6:	4b17      	ldr	r3, [pc, #92]	@ (800b104 <eeprom_start_save+0xa4>)
 800b0a8:	789b      	ldrb	r3, [r3, #2]
    ConfigEEPROM nueva = {
 800b0aa:	733b      	strb	r3, [r7, #12]
            receta_personal[3]
 800b0ac:	4b15      	ldr	r3, [pc, #84]	@ (800b104 <eeprom_start_save+0xa4>)
 800b0ae:	78db      	ldrb	r3, [r3, #3]
    ConfigEEPROM nueva = {
 800b0b0:	737b      	strb	r3, [r7, #13]
        }
    };
    //copia esa estructura al buffer e inicia proceso de guardado
    memcpy(eeprom_fsm.buffer, &nueva, sizeof(ConfigEEPROM));
 800b0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e8 <eeprom_start_save+0x88>)
 800b0b4:	1c9a      	adds	r2, r3, #2
 800b0b6:	1d3b      	adds	r3, r7, #4
 800b0b8:	cb03      	ldmia	r3!, {r0, r1}
 800b0ba:	6010      	str	r0, [r2, #0]
 800b0bc:	6051      	str	r1, [r2, #4]
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	8113      	strh	r3, [r2, #8]
    eeprom_fsm.index = 0;
 800b0c2:	4b09      	ldr	r3, [pc, #36]	@ (800b0e8 <eeprom_start_save+0x88>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	705a      	strb	r2, [r3, #1]
    eeprom_guardando = 1;
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b108 <eeprom_start_save+0xa8>)
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	701a      	strb	r2, [r3, #0]
    eeprom_terminado = 0;
 800b0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b10c <eeprom_start_save+0xac>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	701a      	strb	r2, [r3, #0]

    eeprom_fsm.state = EEPROM_STATE_START_WRITE;
 800b0d4:	4b04      	ldr	r3, [pc, #16]	@ (800b0e8 <eeprom_start_save+0x88>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	e000      	b.n	800b0de <eeprom_start_save+0x7e>
    if (eeprom_fsm.state != EEPROM_STATE_IDLE) return;
 800b0dc:	bf00      	nop
}
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000620 	.word	0x20000620
 800b0ec:	2000001c 	.word	0x2000001c
 800b0f0:	2000057c 	.word	0x2000057c
 800b0f4:	20000084 	.word	0x20000084
 800b0f8:	20000088 	.word	0x20000088
 800b0fc:	2000008c 	.word	0x2000008c
 800b100:	20000090 	.word	0x20000090
 800b104:	20000578 	.word	0x20000578
 800b108:	2000061e 	.word	0x2000061e
 800b10c:	2000061c 	.word	0x2000061c

0800b110 <eeprom_save_update>:

void eeprom_save_update(void) //escribe un byte del buffer a la eeprom, avanza al indice y cuando termina marca eeprom terminado
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af04      	add	r7, sp, #16
    switch (eeprom_fsm.state) {
 800b116:	4b22      	ldr	r3, [pc, #136]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d02f      	beq.n	800b17e <eeprom_save_update+0x6e>
 800b11e:	2b03      	cmp	r3, #3
 800b120:	dc37      	bgt.n	800b192 <eeprom_save_update+0x82>
 800b122:	2b01      	cmp	r3, #1
 800b124:	d002      	beq.n	800b12c <eeprom_save_update+0x1c>
 800b126:	2b02      	cmp	r3, #2
 800b128:	d004      	beq.n	800b134 <eeprom_save_update+0x24>
            eeprom_terminado = 1; //marca que termino
            eeprom_fsm.state = EEPROM_STATE_IDLE; //estado pasivo
            break;

        default:
            break;
 800b12a:	e032      	b.n	800b192 <eeprom_save_update+0x82>
            eeprom_fsm.state = EEPROM_STATE_WRITING;
 800b12c:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b12e:	2202      	movs	r2, #2
 800b130:	701a      	strb	r2, [r3, #0]
            break;
 800b132:	e031      	b.n	800b198 <eeprom_save_update+0x88>
                                  EEPROM_CONFIG_ADDR + eeprom_fsm.index,
 800b134:	4b1a      	ldr	r3, [pc, #104]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b136:	785b      	ldrb	r3, [r3, #1]
            if (HAL_I2C_Mem_Write(&hi2c2, EEPROM_I2C_ADDR,
 800b138:	4619      	mov	r1, r3
                                  &eeprom_fsm.buffer[eeprom_fsm.index], 1,
 800b13a:	4b19      	ldr	r3, [pc, #100]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b13c:	785b      	ldrb	r3, [r3, #1]
 800b13e:	461a      	mov	r2, r3
            if (HAL_I2C_Mem_Write(&hi2c2, EEPROM_I2C_ADDR,
 800b140:	4b17      	ldr	r3, [pc, #92]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b142:	4413      	add	r3, r2
 800b144:	3302      	adds	r3, #2
 800b146:	2205      	movs	r2, #5
 800b148:	9202      	str	r2, [sp, #8]
 800b14a:	2201      	movs	r2, #1
 800b14c:	9201      	str	r2, [sp, #4]
 800b14e:	9300      	str	r3, [sp, #0]
 800b150:	2310      	movs	r3, #16
 800b152:	460a      	mov	r2, r1
 800b154:	21a0      	movs	r1, #160	@ 0xa0
 800b156:	4813      	ldr	r0, [pc, #76]	@ (800b1a4 <eeprom_save_update+0x94>)
 800b158:	f7f8 fa0a 	bl	8003570 <HAL_I2C_Mem_Write>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d119      	bne.n	800b196 <eeprom_save_update+0x86>
                eeprom_fsm.index++; //si se pudo incremente indice
 800b162:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	3301      	adds	r3, #1
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b16c:	705a      	strb	r2, [r3, #1]
                if (eeprom_fsm.index >= sizeof(ConfigEEPROM)) {
 800b16e:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b170:	785b      	ldrb	r3, [r3, #1]
 800b172:	2b09      	cmp	r3, #9
 800b174:	d90f      	bls.n	800b196 <eeprom_save_update+0x86>
                    eeprom_fsm.state = EEPROM_STATE_WRITE_DONE;
 800b176:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b178:	2203      	movs	r2, #3
 800b17a:	701a      	strb	r2, [r3, #0]
            break;
 800b17c:	e00b      	b.n	800b196 <eeprom_save_update+0x86>
            eeprom_guardando = 0; //deja de estar guardando
 800b17e:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a8 <eeprom_save_update+0x98>)
 800b180:	2200      	movs	r2, #0
 800b182:	701a      	strb	r2, [r3, #0]
            eeprom_terminado = 1; //marca que termino
 800b184:	4b09      	ldr	r3, [pc, #36]	@ (800b1ac <eeprom_save_update+0x9c>)
 800b186:	2201      	movs	r2, #1
 800b188:	701a      	strb	r2, [r3, #0]
            eeprom_fsm.state = EEPROM_STATE_IDLE; //estado pasivo
 800b18a:	4b05      	ldr	r3, [pc, #20]	@ (800b1a0 <eeprom_save_update+0x90>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	701a      	strb	r2, [r3, #0]
            break;
 800b190:	e002      	b.n	800b198 <eeprom_save_update+0x88>
            break;
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <eeprom_save_update+0x88>
            break;
 800b196:	bf00      	nop
    }
}
 800b198:	bf00      	nop
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000620 	.word	0x20000620
 800b1a4:	20000354 	.word	0x20000354
 800b1a8:	2000061e 	.word	0x2000061e
 800b1ac:	2000061c 	.word	0x2000061c

0800b1b0 <eeprom_start_read>:

void eeprom_start_read(void) //inicia lectura no bloqueante del buffer(resetea indice y estados) 
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	af00      	add	r7, sp, #0
    if (eeprom_fsm.state != EEPROM_STATE_IDLE) return;
 800b1b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e0 <eeprom_start_read+0x30>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10c      	bne.n	800b1d6 <eeprom_start_read+0x26>
    //si esta leyendo o terminado evitar reinicio
    eeprom_fsm.index = 0;
 800b1bc:	4b08      	ldr	r3, [pc, #32]	@ (800b1e0 <eeprom_start_read+0x30>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	705a      	strb	r2, [r3, #1]
    eeprom_leyendo = 1;
 800b1c2:	4b08      	ldr	r3, [pc, #32]	@ (800b1e4 <eeprom_start_read+0x34>)
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	701a      	strb	r2, [r3, #0]
    eeprom_terminado = 0;
 800b1c8:	4b07      	ldr	r3, [pc, #28]	@ (800b1e8 <eeprom_start_read+0x38>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]

    eeprom_fsm.state = EEPROM_STATE_START_READ;
 800b1ce:	4b04      	ldr	r3, [pc, #16]	@ (800b1e0 <eeprom_start_read+0x30>)
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	e000      	b.n	800b1d8 <eeprom_start_read+0x28>
    if (eeprom_fsm.state != EEPROM_STATE_IDLE) return;
 800b1d6:	bf00      	nop
}
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bc80      	pop	{r7}
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	20000620 	.word	0x20000620
 800b1e4:	2000061d 	.word	0x2000061d
 800b1e8:	2000061c 	.word	0x2000061c

0800b1ec <eeprom_update>:

void eeprom_update(void) //update info 
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af04      	add	r7, sp, #16
    switch (eeprom_fsm.state) {
 800b1f2:	4b23      	ldr	r3, [pc, #140]	@ (800b280 <eeprom_update+0x94>)
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	2b06      	cmp	r3, #6
 800b1f8:	d032      	beq.n	800b260 <eeprom_update+0x74>
 800b1fa:	2b06      	cmp	r3, #6
 800b1fc:	dc3a      	bgt.n	800b274 <eeprom_update+0x88>
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d002      	beq.n	800b208 <eeprom_update+0x1c>
 800b202:	2b05      	cmp	r3, #5
 800b204:	d004      	beq.n	800b210 <eeprom_update+0x24>
            eeprom_terminado = 1; //ya termino
            eeprom_fsm.state = EEPROM_STATE_IDLE; //cambia a estado pasivo
            break;

        default:
            break;
 800b206:	e035      	b.n	800b274 <eeprom_update+0x88>
            eeprom_fsm.state = EEPROM_STATE_READING;
 800b208:	4b1d      	ldr	r3, [pc, #116]	@ (800b280 <eeprom_update+0x94>)
 800b20a:	2205      	movs	r2, #5
 800b20c:	701a      	strb	r2, [r3, #0]
            break;
 800b20e:	e034      	b.n	800b27a <eeprom_update+0x8e>
                                 EEPROM_CONFIG_ADDR + eeprom_fsm.index,
 800b210:	4b1b      	ldr	r3, [pc, #108]	@ (800b280 <eeprom_update+0x94>)
 800b212:	785b      	ldrb	r3, [r3, #1]
            if (HAL_I2C_Mem_Read(&hi2c2, EEPROM_I2C_ADDR,
 800b214:	4619      	mov	r1, r3
                                 &eeprom_fsm.buffer[eeprom_fsm.index], 1,
 800b216:	4b1a      	ldr	r3, [pc, #104]	@ (800b280 <eeprom_update+0x94>)
 800b218:	785b      	ldrb	r3, [r3, #1]
 800b21a:	461a      	mov	r2, r3
            if (HAL_I2C_Mem_Read(&hi2c2, EEPROM_I2C_ADDR,
 800b21c:	4b18      	ldr	r3, [pc, #96]	@ (800b280 <eeprom_update+0x94>)
 800b21e:	4413      	add	r3, r2
 800b220:	3302      	adds	r3, #2
 800b222:	2205      	movs	r2, #5
 800b224:	9202      	str	r2, [sp, #8]
 800b226:	2201      	movs	r2, #1
 800b228:	9201      	str	r2, [sp, #4]
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	2310      	movs	r3, #16
 800b22e:	460a      	mov	r2, r1
 800b230:	21a0      	movs	r1, #160	@ 0xa0
 800b232:	4814      	ldr	r0, [pc, #80]	@ (800b284 <eeprom_update+0x98>)
 800b234:	f7f8 fa96 	bl	8003764 <HAL_I2C_Mem_Read>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d11c      	bne.n	800b278 <eeprom_update+0x8c>
                eeprom_fsm.index++;
 800b23e:	4b10      	ldr	r3, [pc, #64]	@ (800b280 <eeprom_update+0x94>)
 800b240:	785b      	ldrb	r3, [r3, #1]
 800b242:	3301      	adds	r3, #1
 800b244:	b2da      	uxtb	r2, r3
 800b246:	4b0e      	ldr	r3, [pc, #56]	@ (800b280 <eeprom_update+0x94>)
 800b248:	705a      	strb	r2, [r3, #1]
                if (eeprom_fsm.index >= sizeof(ConfigEEPROM)) {
 800b24a:	4b0d      	ldr	r3, [pc, #52]	@ (800b280 <eeprom_update+0x94>)
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	2b09      	cmp	r3, #9
 800b250:	d912      	bls.n	800b278 <eeprom_update+0x8c>
                    aplicar_config((ConfigEEPROM*)eeprom_fsm.buffer);
 800b252:	480d      	ldr	r0, [pc, #52]	@ (800b288 <eeprom_update+0x9c>)
 800b254:	f7ff fe56 	bl	800af04 <aplicar_config>
                    eeprom_fsm.state = EEPROM_STATE_READ_DONE;
 800b258:	4b09      	ldr	r3, [pc, #36]	@ (800b280 <eeprom_update+0x94>)
 800b25a:	2206      	movs	r2, #6
 800b25c:	701a      	strb	r2, [r3, #0]
            break;
 800b25e:	e00b      	b.n	800b278 <eeprom_update+0x8c>
            eeprom_leyendo = 0; //ya no esta leyendo
 800b260:	4b0a      	ldr	r3, [pc, #40]	@ (800b28c <eeprom_update+0xa0>)
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
            eeprom_terminado = 1; //ya termino
 800b266:	4b0a      	ldr	r3, [pc, #40]	@ (800b290 <eeprom_update+0xa4>)
 800b268:	2201      	movs	r2, #1
 800b26a:	701a      	strb	r2, [r3, #0]
            eeprom_fsm.state = EEPROM_STATE_IDLE; //cambia a estado pasivo
 800b26c:	4b04      	ldr	r3, [pc, #16]	@ (800b280 <eeprom_update+0x94>)
 800b26e:	2200      	movs	r2, #0
 800b270:	701a      	strb	r2, [r3, #0]
            break;
 800b272:	e002      	b.n	800b27a <eeprom_update+0x8e>
            break;
 800b274:	bf00      	nop
 800b276:	e000      	b.n	800b27a <eeprom_update+0x8e>
            break;
 800b278:	bf00      	nop
    }
}
 800b27a:	bf00      	nop
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20000620 	.word	0x20000620
 800b284:	20000354 	.word	0x20000354
 800b288:	20000622 	.word	0x20000622
 800b28c:	2000061d 	.word	0x2000061d
 800b290:	2000061c 	.word	0x2000061c

0800b294 <task_system_init>:

/********************** tareas ************************************************/
void task_system_init(void *param)//inicializa tarea el sist 
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af02      	add	r7, sp, #8
 800b29a:	6078      	str	r0, [r7, #4]
    //inicializa el estado de la fsm desde eeprom
    eeprom_fsm.state = EEPROM_STATE_IDLE;
 800b29c:	4b77      	ldr	r3, [pc, #476]	@ (800b47c <task_system_init+0x1e8>)
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
    eeprom_fsm.index = 0;
 800b2a2:	4b76      	ldr	r3, [pc, #472]	@ (800b47c <task_system_init+0x1e8>)
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	705a      	strb	r2, [r3, #1]
    //verifica si eeprom responde bien
    if (!eeprom_test()) {
 800b2a8:	f7ff fdf0 	bl	800ae8c <eeprom_test>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	f083 0301 	eor.w	r3, r3, #1
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <task_system_init+0x2a>
        LOGGER_ERROR("EEPROM no detectada");
 800b2b8:	4871      	ldr	r0, [pc, #452]	@ (800b480 <task_system_init+0x1ec>)
 800b2ba:	f000 ffad 	bl	800c218 <puts>
    }
    //carga la config guardada desde eeprom en bloque
    eeprom_load_config();
 800b2be:	f7ff fe5b 	bl	800af78 <eeprom_load_config>

    LOGGER_INFO(" ");
 800b2c2:	b672      	cpsid	i
 800b2c4:	4b6f      	ldr	r3, [pc, #444]	@ (800b484 <task_system_init+0x1f0>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a6f      	ldr	r2, [pc, #444]	@ (800b488 <task_system_init+0x1f4>)
 800b2ca:	213f      	movs	r1, #63	@ 0x3f
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f000 fe45 	bl	800bf5c <sniprintf>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4a6d      	ldr	r2, [pc, #436]	@ (800b48c <task_system_init+0x1f8>)
 800b2d6:	6013      	str	r3, [r2, #0]
 800b2d8:	4b6a      	ldr	r3, [pc, #424]	@ (800b484 <task_system_init+0x1f0>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fc fd19 	bl	8007d14 <logger_log_print_>
 800b2e2:	b662      	cpsie	i
 800b2e4:	b672      	cpsid	i
 800b2e6:	4b67      	ldr	r3, [pc, #412]	@ (800b484 <task_system_init+0x1f0>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a69      	ldr	r2, [pc, #420]	@ (800b490 <task_system_init+0x1fc>)
 800b2ec:	213f      	movs	r1, #63	@ 0x3f
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fe34 	bl	800bf5c <sniprintf>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	4a65      	ldr	r2, [pc, #404]	@ (800b48c <task_system_init+0x1f8>)
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	4b62      	ldr	r3, [pc, #392]	@ (800b484 <task_system_init+0x1f0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fc fd08 	bl	8007d14 <logger_log_print_>
 800b304:	b662      	cpsie	i
 800b306:	b672      	cpsid	i
 800b308:	4b5e      	ldr	r3, [pc, #376]	@ (800b484 <task_system_init+0x1f0>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a61      	ldr	r2, [pc, #388]	@ (800b494 <task_system_init+0x200>)
 800b30e:	213f      	movs	r1, #63	@ 0x3f
 800b310:	4618      	mov	r0, r3
 800b312:	f000 fe23 	bl	800bf5c <sniprintf>
 800b316:	4603      	mov	r3, r0
 800b318:	4a5c      	ldr	r2, [pc, #368]	@ (800b48c <task_system_init+0x1f8>)
 800b31a:	6013      	str	r3, [r2, #0]
 800b31c:	4b59      	ldr	r3, [pc, #356]	@ (800b484 <task_system_init+0x1f0>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4618      	mov	r0, r3
 800b322:	f7fc fcf7 	bl	8007d14 <logger_log_print_>
 800b326:	b662      	cpsie	i
    LOGGER_INFO("  %s is running - %s", GET_NAME(task_system_init), p_task_system);
 800b328:	b672      	cpsid	i
 800b32a:	4b56      	ldr	r3, [pc, #344]	@ (800b484 <task_system_init+0x1f0>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a56      	ldr	r2, [pc, #344]	@ (800b488 <task_system_init+0x1f4>)
 800b330:	213f      	movs	r1, #63	@ 0x3f
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fe12 	bl	800bf5c <sniprintf>
 800b338:	4603      	mov	r3, r0
 800b33a:	4a54      	ldr	r2, [pc, #336]	@ (800b48c <task_system_init+0x1f8>)
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	4b51      	ldr	r3, [pc, #324]	@ (800b484 <task_system_init+0x1f0>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7fc fce6 	bl	8007d14 <logger_log_print_>
 800b348:	b662      	cpsie	i
 800b34a:	b672      	cpsid	i
 800b34c:	4b4d      	ldr	r3, [pc, #308]	@ (800b484 <task_system_init+0x1f0>)
 800b34e:	6818      	ldr	r0, [r3, #0]
 800b350:	4b51      	ldr	r3, [pc, #324]	@ (800b498 <task_system_init+0x204>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	4b51      	ldr	r3, [pc, #324]	@ (800b49c <task_system_init+0x208>)
 800b358:	4a51      	ldr	r2, [pc, #324]	@ (800b4a0 <task_system_init+0x20c>)
 800b35a:	213f      	movs	r1, #63	@ 0x3f
 800b35c:	f000 fdfe 	bl	800bf5c <sniprintf>
 800b360:	4603      	mov	r3, r0
 800b362:	4a4a      	ldr	r2, [pc, #296]	@ (800b48c <task_system_init+0x1f8>)
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	4b47      	ldr	r3, [pc, #284]	@ (800b484 <task_system_init+0x1f0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fc fcd2 	bl	8007d14 <logger_log_print_>
 800b370:	b662      	cpsie	i
 800b372:	b672      	cpsid	i
 800b374:	4b43      	ldr	r3, [pc, #268]	@ (800b484 <task_system_init+0x1f0>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a46      	ldr	r2, [pc, #280]	@ (800b494 <task_system_init+0x200>)
 800b37a:	213f      	movs	r1, #63	@ 0x3f
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 fded 	bl	800bf5c <sniprintf>
 800b382:	4603      	mov	r3, r0
 800b384:	4a41      	ldr	r2, [pc, #260]	@ (800b48c <task_system_init+0x1f8>)
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	4b3e      	ldr	r3, [pc, #248]	@ (800b484 <task_system_init+0x1f0>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fc fcc1 	bl	8007d14 <logger_log_print_>
 800b392:	b662      	cpsie	i
    LOGGER_INFO("  %s is a %s", GET_NAME(task_system_update), p_task_system_);
 800b394:	b672      	cpsid	i
 800b396:	4b3b      	ldr	r3, [pc, #236]	@ (800b484 <task_system_init+0x1f0>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a3b      	ldr	r2, [pc, #236]	@ (800b488 <task_system_init+0x1f4>)
 800b39c:	213f      	movs	r1, #63	@ 0x3f
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 fddc 	bl	800bf5c <sniprintf>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	4a39      	ldr	r2, [pc, #228]	@ (800b48c <task_system_init+0x1f8>)
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	4b36      	ldr	r3, [pc, #216]	@ (800b484 <task_system_init+0x1f0>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fc fcb0 	bl	8007d14 <logger_log_print_>
 800b3b4:	b662      	cpsie	i
 800b3b6:	b672      	cpsid	i
 800b3b8:	4b32      	ldr	r3, [pc, #200]	@ (800b484 <task_system_init+0x1f0>)
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	4b39      	ldr	r3, [pc, #228]	@ (800b4a4 <task_system_init+0x210>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	4b39      	ldr	r3, [pc, #228]	@ (800b4a8 <task_system_init+0x214>)
 800b3c4:	4a39      	ldr	r2, [pc, #228]	@ (800b4ac <task_system_init+0x218>)
 800b3c6:	213f      	movs	r1, #63	@ 0x3f
 800b3c8:	f000 fdc8 	bl	800bf5c <sniprintf>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	4a2f      	ldr	r2, [pc, #188]	@ (800b48c <task_system_init+0x1f8>)
 800b3d0:	6013      	str	r3, [r2, #0]
 800b3d2:	4b2c      	ldr	r3, [pc, #176]	@ (800b484 <task_system_init+0x1f0>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fc fc9c 	bl	8007d14 <logger_log_print_>
 800b3dc:	b662      	cpsie	i
 800b3de:	b672      	cpsid	i
 800b3e0:	4b28      	ldr	r3, [pc, #160]	@ (800b484 <task_system_init+0x1f0>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a2b      	ldr	r2, [pc, #172]	@ (800b494 <task_system_init+0x200>)
 800b3e6:	213f      	movs	r1, #63	@ 0x3f
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 fdb7 	bl	800bf5c <sniprintf>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	4a26      	ldr	r2, [pc, #152]	@ (800b48c <task_system_init+0x1f8>)
 800b3f2:	6013      	str	r3, [r2, #0]
 800b3f4:	4b23      	ldr	r3, [pc, #140]	@ (800b484 <task_system_init+0x1f0>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fc fc8b 	bl	8007d14 <logger_log_print_>
 800b3fe:	b662      	cpsie	i
    //inicializa contador de ejecuciones de la tarea
    g_task_system_cnt = G_TASK_SYSTEM_CNT_INI;
 800b400:	4b2b      	ldr	r3, [pc, #172]	@ (800b4b0 <task_system_init+0x21c>)
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
    LOGGER_INFO("   %s = %lu", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 800b406:	b672      	cpsid	i
 800b408:	4b1e      	ldr	r3, [pc, #120]	@ (800b484 <task_system_init+0x1f0>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a1e      	ldr	r2, [pc, #120]	@ (800b488 <task_system_init+0x1f4>)
 800b40e:	213f      	movs	r1, #63	@ 0x3f
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fda3 	bl	800bf5c <sniprintf>
 800b416:	4603      	mov	r3, r0
 800b418:	4a1c      	ldr	r2, [pc, #112]	@ (800b48c <task_system_init+0x1f8>)
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	4b19      	ldr	r3, [pc, #100]	@ (800b484 <task_system_init+0x1f0>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f7fc fc77 	bl	8007d14 <logger_log_print_>
 800b426:	b662      	cpsie	i
 800b428:	b672      	cpsid	i
 800b42a:	4b16      	ldr	r3, [pc, #88]	@ (800b484 <task_system_init+0x1f0>)
 800b42c:	6818      	ldr	r0, [r3, #0]
 800b42e:	4b20      	ldr	r3, [pc, #128]	@ (800b4b0 <task_system_init+0x21c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	4b1f      	ldr	r3, [pc, #124]	@ (800b4b4 <task_system_init+0x220>)
 800b436:	4a20      	ldr	r2, [pc, #128]	@ (800b4b8 <task_system_init+0x224>)
 800b438:	213f      	movs	r1, #63	@ 0x3f
 800b43a:	f000 fd8f 	bl	800bf5c <sniprintf>
 800b43e:	4603      	mov	r3, r0
 800b440:	4a12      	ldr	r2, [pc, #72]	@ (800b48c <task_system_init+0x1f8>)
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	4b0f      	ldr	r3, [pc, #60]	@ (800b484 <task_system_init+0x1f0>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fc fc63 	bl	8007d14 <logger_log_print_>
 800b44e:	b662      	cpsie	i
 800b450:	b672      	cpsid	i
 800b452:	4b0c      	ldr	r3, [pc, #48]	@ (800b484 <task_system_init+0x1f0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a0f      	ldr	r2, [pc, #60]	@ (800b494 <task_system_init+0x200>)
 800b458:	213f      	movs	r1, #63	@ 0x3f
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 fd7e 	bl	800bf5c <sniprintf>
 800b460:	4603      	mov	r3, r0
 800b462:	4a0a      	ldr	r2, [pc, #40]	@ (800b48c <task_system_init+0x1f8>)
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	4b07      	ldr	r3, [pc, #28]	@ (800b484 <task_system_init+0x1f0>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fc fc52 	bl	8007d14 <logger_log_print_>
 800b470:	b662      	cpsie	i
}
 800b472:	bf00      	nop
 800b474:	3708      	adds	r7, #8
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20000620 	.word	0x20000620
 800b480:	0800f1b4 	.word	0x0800f1b4
 800b484:	0800f2d0 	.word	0x0800f2d0
 800b488:	0800f1d0 	.word	0x0800f1d0
 800b48c:	20000534 	.word	0x20000534
 800b490:	0800f1d8 	.word	0x0800f1d8
 800b494:	0800f1dc 	.word	0x0800f1dc
 800b498:	20000094 	.word	0x20000094
 800b49c:	0800f1e0 	.word	0x0800f1e0
 800b4a0:	0800f1f4 	.word	0x0800f1f4
 800b4a4:	20000098 	.word	0x20000098
 800b4a8:	0800f20c 	.word	0x0800f20c
 800b4ac:	0800f220 	.word	0x0800f220
 800b4b0:	20000614 	.word	0x20000614
 800b4b4:	0800f230 	.word	0x0800f230
 800b4b8:	0800f244 	.word	0x0800f244

0800b4bc <task_system_update>:

void task_system_update(void *param)//ejecuta periodicamente tarea del sist 
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
    bool b_time_update_required = false;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]

    __asm("CPSID i");//desactiva interrupciones para evitar codigo bloqueante
 800b4c8:	b672      	cpsid	i
    if (G_TASK_SYSTEM_TICK_CNT_INI < g_task_system_tick_cnt) //compara
 800b4ca:	4b16      	ldr	r3, [pc, #88]	@ (800b524 <task_system_update+0x68>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d006      	beq.n	800b4e0 <task_system_update+0x24>
    {
        g_task_system_tick_cnt--; //si hay ticks pendientes lo decrementa
 800b4d2:	4b14      	ldr	r3, [pc, #80]	@ (800b524 <task_system_update+0x68>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	4a12      	ldr	r2, [pc, #72]	@ (800b524 <task_system_update+0x68>)
 800b4da:	6013      	str	r3, [r2, #0]
        b_time_update_required = true;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i"); //reactiva interrupciones
 800b4e0:	b662      	cpsie	i
    
    /*mientras haya ticks pendientes ejecutar tareas*/
    if (b_time_update_required) {
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d018      	beq.n	800b51a <task_system_update+0x5e>
        /*contador de ciclos y tiempo total*/
        g_task_system_cnt++;
 800b4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b528 <task_system_update+0x6c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	4a0e      	ldr	r2, [pc, #56]	@ (800b528 <task_system_update+0x6c>)
 800b4f0:	6013      	str	r3, [r2, #0]

        eeprom_update();
 800b4f2:	f7ff fe7b 	bl	800b1ec <eeprom_update>
        eeprom_save_update();
 800b4f6:	f7ff fe0b 	bl	800b110 <eeprom_save_update>

        __asm("CPSID i"); //desactiva interrupciopciones
 800b4fa:	b672      	cpsid	i
        if (G_TASK_SYSTEM_TICK_CNT_INI < g_task_system_tick_cnt) //compara
 800b4fc:	4b09      	ldr	r3, [pc, #36]	@ (800b524 <task_system_update+0x68>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d007      	beq.n	800b514 <task_system_update+0x58>
        {
            g_task_system_tick_cnt--; //si hay ticks pendientes lo decrementa
 800b504:	4b07      	ldr	r3, [pc, #28]	@ (800b524 <task_system_update+0x68>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	3b01      	subs	r3, #1
 800b50a:	4a06      	ldr	r2, [pc, #24]	@ (800b524 <task_system_update+0x68>)
 800b50c:	6013      	str	r3, [r2, #0]
            b_time_update_required = true;
 800b50e:	2301      	movs	r3, #1
 800b510:	73fb      	strb	r3, [r7, #15]
 800b512:	e001      	b.n	800b518 <task_system_update+0x5c>
        } else {
            b_time_update_required = false;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
        }
        __asm("CPSIE i");//reactiva interrupciones
 800b518:	b662      	cpsie	i
    }
}
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000618 	.word	0x20000618
 800b528:	20000614 	.word	0x20000614

0800b52c <__cvt>:
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b532:	461d      	mov	r5, r3
 800b534:	bfbb      	ittet	lt
 800b536:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b53a:	461d      	movlt	r5, r3
 800b53c:	2300      	movge	r3, #0
 800b53e:	232d      	movlt	r3, #45	@ 0x2d
 800b540:	b088      	sub	sp, #32
 800b542:	4614      	mov	r4, r2
 800b544:	bfb8      	it	lt
 800b546:	4614      	movlt	r4, r2
 800b548:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b54a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b54c:	7013      	strb	r3, [r2, #0]
 800b54e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b550:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b554:	f023 0820 	bic.w	r8, r3, #32
 800b558:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b55c:	d005      	beq.n	800b56a <__cvt+0x3e>
 800b55e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b562:	d100      	bne.n	800b566 <__cvt+0x3a>
 800b564:	3601      	adds	r6, #1
 800b566:	2302      	movs	r3, #2
 800b568:	e000      	b.n	800b56c <__cvt+0x40>
 800b56a:	2303      	movs	r3, #3
 800b56c:	aa07      	add	r2, sp, #28
 800b56e:	9204      	str	r2, [sp, #16]
 800b570:	aa06      	add	r2, sp, #24
 800b572:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b576:	e9cd 3600 	strd	r3, r6, [sp]
 800b57a:	4622      	mov	r2, r4
 800b57c:	462b      	mov	r3, r5
 800b57e:	f000 ff43 	bl	800c408 <_dtoa_r>
 800b582:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b586:	4607      	mov	r7, r0
 800b588:	d119      	bne.n	800b5be <__cvt+0x92>
 800b58a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b58c:	07db      	lsls	r3, r3, #31
 800b58e:	d50e      	bpl.n	800b5ae <__cvt+0x82>
 800b590:	eb00 0906 	add.w	r9, r0, r6
 800b594:	2200      	movs	r2, #0
 800b596:	2300      	movs	r3, #0
 800b598:	4620      	mov	r0, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f5 fa04 	bl	80009a8 <__aeabi_dcmpeq>
 800b5a0:	b108      	cbz	r0, 800b5a6 <__cvt+0x7a>
 800b5a2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b5a6:	2230      	movs	r2, #48	@ 0x30
 800b5a8:	9b07      	ldr	r3, [sp, #28]
 800b5aa:	454b      	cmp	r3, r9
 800b5ac:	d31e      	bcc.n	800b5ec <__cvt+0xc0>
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	9b07      	ldr	r3, [sp, #28]
 800b5b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b5b4:	1bdb      	subs	r3, r3, r7
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	b008      	add	sp, #32
 800b5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b5c2:	eb00 0906 	add.w	r9, r0, r6
 800b5c6:	d1e5      	bne.n	800b594 <__cvt+0x68>
 800b5c8:	7803      	ldrb	r3, [r0, #0]
 800b5ca:	2b30      	cmp	r3, #48	@ 0x30
 800b5cc:	d10a      	bne.n	800b5e4 <__cvt+0xb8>
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7f5 f9e7 	bl	80009a8 <__aeabi_dcmpeq>
 800b5da:	b918      	cbnz	r0, 800b5e4 <__cvt+0xb8>
 800b5dc:	f1c6 0601 	rsb	r6, r6, #1
 800b5e0:	f8ca 6000 	str.w	r6, [sl]
 800b5e4:	f8da 3000 	ldr.w	r3, [sl]
 800b5e8:	4499      	add	r9, r3
 800b5ea:	e7d3      	b.n	800b594 <__cvt+0x68>
 800b5ec:	1c59      	adds	r1, r3, #1
 800b5ee:	9107      	str	r1, [sp, #28]
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	e7d9      	b.n	800b5a8 <__cvt+0x7c>

0800b5f4 <__exponent>:
 800b5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5f6:	2900      	cmp	r1, #0
 800b5f8:	bfb6      	itet	lt
 800b5fa:	232d      	movlt	r3, #45	@ 0x2d
 800b5fc:	232b      	movge	r3, #43	@ 0x2b
 800b5fe:	4249      	neglt	r1, r1
 800b600:	2909      	cmp	r1, #9
 800b602:	7002      	strb	r2, [r0, #0]
 800b604:	7043      	strb	r3, [r0, #1]
 800b606:	dd29      	ble.n	800b65c <__exponent+0x68>
 800b608:	f10d 0307 	add.w	r3, sp, #7
 800b60c:	461d      	mov	r5, r3
 800b60e:	270a      	movs	r7, #10
 800b610:	fbb1 f6f7 	udiv	r6, r1, r7
 800b614:	461a      	mov	r2, r3
 800b616:	fb07 1416 	mls	r4, r7, r6, r1
 800b61a:	3430      	adds	r4, #48	@ 0x30
 800b61c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b620:	460c      	mov	r4, r1
 800b622:	2c63      	cmp	r4, #99	@ 0x63
 800b624:	4631      	mov	r1, r6
 800b626:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b62a:	dcf1      	bgt.n	800b610 <__exponent+0x1c>
 800b62c:	3130      	adds	r1, #48	@ 0x30
 800b62e:	1e94      	subs	r4, r2, #2
 800b630:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b634:	4623      	mov	r3, r4
 800b636:	1c41      	adds	r1, r0, #1
 800b638:	42ab      	cmp	r3, r5
 800b63a:	d30a      	bcc.n	800b652 <__exponent+0x5e>
 800b63c:	f10d 0309 	add.w	r3, sp, #9
 800b640:	1a9b      	subs	r3, r3, r2
 800b642:	42ac      	cmp	r4, r5
 800b644:	bf88      	it	hi
 800b646:	2300      	movhi	r3, #0
 800b648:	3302      	adds	r3, #2
 800b64a:	4403      	add	r3, r0
 800b64c:	1a18      	subs	r0, r3, r0
 800b64e:	b003      	add	sp, #12
 800b650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b652:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b656:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b65a:	e7ed      	b.n	800b638 <__exponent+0x44>
 800b65c:	2330      	movs	r3, #48	@ 0x30
 800b65e:	3130      	adds	r1, #48	@ 0x30
 800b660:	7083      	strb	r3, [r0, #2]
 800b662:	70c1      	strb	r1, [r0, #3]
 800b664:	1d03      	adds	r3, r0, #4
 800b666:	e7f1      	b.n	800b64c <__exponent+0x58>

0800b668 <_printf_float>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	b091      	sub	sp, #68	@ 0x44
 800b66e:	460c      	mov	r4, r1
 800b670:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b674:	4616      	mov	r6, r2
 800b676:	461f      	mov	r7, r3
 800b678:	4605      	mov	r5, r0
 800b67a:	f000 fe03 	bl	800c284 <_localeconv_r>
 800b67e:	6803      	ldr	r3, [r0, #0]
 800b680:	4618      	mov	r0, r3
 800b682:	9308      	str	r3, [sp, #32]
 800b684:	f7f4 fd64 	bl	8000150 <strlen>
 800b688:	2300      	movs	r3, #0
 800b68a:	930e      	str	r3, [sp, #56]	@ 0x38
 800b68c:	f8d8 3000 	ldr.w	r3, [r8]
 800b690:	9009      	str	r0, [sp, #36]	@ 0x24
 800b692:	3307      	adds	r3, #7
 800b694:	f023 0307 	bic.w	r3, r3, #7
 800b698:	f103 0208 	add.w	r2, r3, #8
 800b69c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b6a0:	f8d4 b000 	ldr.w	fp, [r4]
 800b6a4:	f8c8 2000 	str.w	r2, [r8]
 800b6a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b6ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b6b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6b2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b6b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b6be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b6c2:	4b9c      	ldr	r3, [pc, #624]	@ (800b934 <_printf_float+0x2cc>)
 800b6c4:	f7f5 f9a2 	bl	8000a0c <__aeabi_dcmpun>
 800b6c8:	bb70      	cbnz	r0, 800b728 <_printf_float+0xc0>
 800b6ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6d2:	4b98      	ldr	r3, [pc, #608]	@ (800b934 <_printf_float+0x2cc>)
 800b6d4:	f7f5 f97c 	bl	80009d0 <__aeabi_dcmple>
 800b6d8:	bb30      	cbnz	r0, 800b728 <_printf_float+0xc0>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4640      	mov	r0, r8
 800b6e0:	4649      	mov	r1, r9
 800b6e2:	f7f5 f96b 	bl	80009bc <__aeabi_dcmplt>
 800b6e6:	b110      	cbz	r0, 800b6ee <_printf_float+0x86>
 800b6e8:	232d      	movs	r3, #45	@ 0x2d
 800b6ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6ee:	4a92      	ldr	r2, [pc, #584]	@ (800b938 <_printf_float+0x2d0>)
 800b6f0:	4b92      	ldr	r3, [pc, #584]	@ (800b93c <_printf_float+0x2d4>)
 800b6f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b6f6:	bf94      	ite	ls
 800b6f8:	4690      	movls	r8, r2
 800b6fa:	4698      	movhi	r8, r3
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	f04f 0900 	mov.w	r9, #0
 800b702:	6123      	str	r3, [r4, #16]
 800b704:	f02b 0304 	bic.w	r3, fp, #4
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	4633      	mov	r3, r6
 800b70c:	4621      	mov	r1, r4
 800b70e:	4628      	mov	r0, r5
 800b710:	9700      	str	r7, [sp, #0]
 800b712:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b714:	f000 f9d4 	bl	800bac0 <_printf_common>
 800b718:	3001      	adds	r0, #1
 800b71a:	f040 8090 	bne.w	800b83e <_printf_float+0x1d6>
 800b71e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b722:	b011      	add	sp, #68	@ 0x44
 800b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b728:	4642      	mov	r2, r8
 800b72a:	464b      	mov	r3, r9
 800b72c:	4640      	mov	r0, r8
 800b72e:	4649      	mov	r1, r9
 800b730:	f7f5 f96c 	bl	8000a0c <__aeabi_dcmpun>
 800b734:	b148      	cbz	r0, 800b74a <_printf_float+0xe2>
 800b736:	464b      	mov	r3, r9
 800b738:	2b00      	cmp	r3, #0
 800b73a:	bfb8      	it	lt
 800b73c:	232d      	movlt	r3, #45	@ 0x2d
 800b73e:	4a80      	ldr	r2, [pc, #512]	@ (800b940 <_printf_float+0x2d8>)
 800b740:	bfb8      	it	lt
 800b742:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b746:	4b7f      	ldr	r3, [pc, #508]	@ (800b944 <_printf_float+0x2dc>)
 800b748:	e7d3      	b.n	800b6f2 <_printf_float+0x8a>
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b750:	1c5a      	adds	r2, r3, #1
 800b752:	d13f      	bne.n	800b7d4 <_printf_float+0x16c>
 800b754:	2306      	movs	r3, #6
 800b756:	6063      	str	r3, [r4, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	9206      	str	r2, [sp, #24]
 800b762:	aa0e      	add	r2, sp, #56	@ 0x38
 800b764:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b768:	aa0d      	add	r2, sp, #52	@ 0x34
 800b76a:	9203      	str	r2, [sp, #12]
 800b76c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b770:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b774:	6863      	ldr	r3, [r4, #4]
 800b776:	4642      	mov	r2, r8
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	4628      	mov	r0, r5
 800b77c:	464b      	mov	r3, r9
 800b77e:	910a      	str	r1, [sp, #40]	@ 0x28
 800b780:	f7ff fed4 	bl	800b52c <__cvt>
 800b784:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b786:	4680      	mov	r8, r0
 800b788:	2947      	cmp	r1, #71	@ 0x47
 800b78a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b78c:	d128      	bne.n	800b7e0 <_printf_float+0x178>
 800b78e:	1cc8      	adds	r0, r1, #3
 800b790:	db02      	blt.n	800b798 <_printf_float+0x130>
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	4299      	cmp	r1, r3
 800b796:	dd40      	ble.n	800b81a <_printf_float+0x1b2>
 800b798:	f1aa 0a02 	sub.w	sl, sl, #2
 800b79c:	fa5f fa8a 	uxtb.w	sl, sl
 800b7a0:	4652      	mov	r2, sl
 800b7a2:	3901      	subs	r1, #1
 800b7a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b7a8:	910d      	str	r1, [sp, #52]	@ 0x34
 800b7aa:	f7ff ff23 	bl	800b5f4 <__exponent>
 800b7ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7b0:	4681      	mov	r9, r0
 800b7b2:	1813      	adds	r3, r2, r0
 800b7b4:	2a01      	cmp	r2, #1
 800b7b6:	6123      	str	r3, [r4, #16]
 800b7b8:	dc02      	bgt.n	800b7c0 <_printf_float+0x158>
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	07d2      	lsls	r2, r2, #31
 800b7be:	d501      	bpl.n	800b7c4 <_printf_float+0x15c>
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	6123      	str	r3, [r4, #16]
 800b7c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d09e      	beq.n	800b70a <_printf_float+0xa2>
 800b7cc:	232d      	movs	r3, #45	@ 0x2d
 800b7ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7d2:	e79a      	b.n	800b70a <_printf_float+0xa2>
 800b7d4:	2947      	cmp	r1, #71	@ 0x47
 800b7d6:	d1bf      	bne.n	800b758 <_printf_float+0xf0>
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1bd      	bne.n	800b758 <_printf_float+0xf0>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e7ba      	b.n	800b756 <_printf_float+0xee>
 800b7e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b7e4:	d9dc      	bls.n	800b7a0 <_printf_float+0x138>
 800b7e6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b7ea:	d118      	bne.n	800b81e <_printf_float+0x1b6>
 800b7ec:	2900      	cmp	r1, #0
 800b7ee:	6863      	ldr	r3, [r4, #4]
 800b7f0:	dd0b      	ble.n	800b80a <_printf_float+0x1a2>
 800b7f2:	6121      	str	r1, [r4, #16]
 800b7f4:	b913      	cbnz	r3, 800b7fc <_printf_float+0x194>
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	07d0      	lsls	r0, r2, #31
 800b7fa:	d502      	bpl.n	800b802 <_printf_float+0x19a>
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	440b      	add	r3, r1
 800b800:	6123      	str	r3, [r4, #16]
 800b802:	f04f 0900 	mov.w	r9, #0
 800b806:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b808:	e7dc      	b.n	800b7c4 <_printf_float+0x15c>
 800b80a:	b913      	cbnz	r3, 800b812 <_printf_float+0x1aa>
 800b80c:	6822      	ldr	r2, [r4, #0]
 800b80e:	07d2      	lsls	r2, r2, #31
 800b810:	d501      	bpl.n	800b816 <_printf_float+0x1ae>
 800b812:	3302      	adds	r3, #2
 800b814:	e7f4      	b.n	800b800 <_printf_float+0x198>
 800b816:	2301      	movs	r3, #1
 800b818:	e7f2      	b.n	800b800 <_printf_float+0x198>
 800b81a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b820:	4299      	cmp	r1, r3
 800b822:	db05      	blt.n	800b830 <_printf_float+0x1c8>
 800b824:	6823      	ldr	r3, [r4, #0]
 800b826:	6121      	str	r1, [r4, #16]
 800b828:	07d8      	lsls	r0, r3, #31
 800b82a:	d5ea      	bpl.n	800b802 <_printf_float+0x19a>
 800b82c:	1c4b      	adds	r3, r1, #1
 800b82e:	e7e7      	b.n	800b800 <_printf_float+0x198>
 800b830:	2900      	cmp	r1, #0
 800b832:	bfcc      	ite	gt
 800b834:	2201      	movgt	r2, #1
 800b836:	f1c1 0202 	rsble	r2, r1, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	e7e0      	b.n	800b800 <_printf_float+0x198>
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	055a      	lsls	r2, r3, #21
 800b842:	d407      	bmi.n	800b854 <_printf_float+0x1ec>
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	4642      	mov	r2, r8
 800b848:	4631      	mov	r1, r6
 800b84a:	4628      	mov	r0, r5
 800b84c:	47b8      	blx	r7
 800b84e:	3001      	adds	r0, #1
 800b850:	d12b      	bne.n	800b8aa <_printf_float+0x242>
 800b852:	e764      	b.n	800b71e <_printf_float+0xb6>
 800b854:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b858:	f240 80dc 	bls.w	800ba14 <_printf_float+0x3ac>
 800b85c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b860:	2200      	movs	r2, #0
 800b862:	2300      	movs	r3, #0
 800b864:	f7f5 f8a0 	bl	80009a8 <__aeabi_dcmpeq>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d033      	beq.n	800b8d4 <_printf_float+0x26c>
 800b86c:	2301      	movs	r3, #1
 800b86e:	4631      	mov	r1, r6
 800b870:	4628      	mov	r0, r5
 800b872:	4a35      	ldr	r2, [pc, #212]	@ (800b948 <_printf_float+0x2e0>)
 800b874:	47b8      	blx	r7
 800b876:	3001      	adds	r0, #1
 800b878:	f43f af51 	beq.w	800b71e <_printf_float+0xb6>
 800b87c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b880:	4543      	cmp	r3, r8
 800b882:	db02      	blt.n	800b88a <_printf_float+0x222>
 800b884:	6823      	ldr	r3, [r4, #0]
 800b886:	07d8      	lsls	r0, r3, #31
 800b888:	d50f      	bpl.n	800b8aa <_printf_float+0x242>
 800b88a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b88e:	4631      	mov	r1, r6
 800b890:	4628      	mov	r0, r5
 800b892:	47b8      	blx	r7
 800b894:	3001      	adds	r0, #1
 800b896:	f43f af42 	beq.w	800b71e <_printf_float+0xb6>
 800b89a:	f04f 0900 	mov.w	r9, #0
 800b89e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b8a2:	f104 0a1a 	add.w	sl, r4, #26
 800b8a6:	45c8      	cmp	r8, r9
 800b8a8:	dc09      	bgt.n	800b8be <_printf_float+0x256>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	079b      	lsls	r3, r3, #30
 800b8ae:	f100 8102 	bmi.w	800bab6 <_printf_float+0x44e>
 800b8b2:	68e0      	ldr	r0, [r4, #12]
 800b8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8b6:	4298      	cmp	r0, r3
 800b8b8:	bfb8      	it	lt
 800b8ba:	4618      	movlt	r0, r3
 800b8bc:	e731      	b.n	800b722 <_printf_float+0xba>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	47b8      	blx	r7
 800b8c8:	3001      	adds	r0, #1
 800b8ca:	f43f af28 	beq.w	800b71e <_printf_float+0xb6>
 800b8ce:	f109 0901 	add.w	r9, r9, #1
 800b8d2:	e7e8      	b.n	800b8a6 <_printf_float+0x23e>
 800b8d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dc38      	bgt.n	800b94c <_printf_float+0x2e4>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	4631      	mov	r1, r6
 800b8de:	4628      	mov	r0, r5
 800b8e0:	4a19      	ldr	r2, [pc, #100]	@ (800b948 <_printf_float+0x2e0>)
 800b8e2:	47b8      	blx	r7
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	f43f af1a 	beq.w	800b71e <_printf_float+0xb6>
 800b8ea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b8ee:	ea59 0303 	orrs.w	r3, r9, r3
 800b8f2:	d102      	bne.n	800b8fa <_printf_float+0x292>
 800b8f4:	6823      	ldr	r3, [r4, #0]
 800b8f6:	07d9      	lsls	r1, r3, #31
 800b8f8:	d5d7      	bpl.n	800b8aa <_printf_float+0x242>
 800b8fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b8fe:	4631      	mov	r1, r6
 800b900:	4628      	mov	r0, r5
 800b902:	47b8      	blx	r7
 800b904:	3001      	adds	r0, #1
 800b906:	f43f af0a 	beq.w	800b71e <_printf_float+0xb6>
 800b90a:	f04f 0a00 	mov.w	sl, #0
 800b90e:	f104 0b1a 	add.w	fp, r4, #26
 800b912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b914:	425b      	negs	r3, r3
 800b916:	4553      	cmp	r3, sl
 800b918:	dc01      	bgt.n	800b91e <_printf_float+0x2b6>
 800b91a:	464b      	mov	r3, r9
 800b91c:	e793      	b.n	800b846 <_printf_float+0x1de>
 800b91e:	2301      	movs	r3, #1
 800b920:	465a      	mov	r2, fp
 800b922:	4631      	mov	r1, r6
 800b924:	4628      	mov	r0, r5
 800b926:	47b8      	blx	r7
 800b928:	3001      	adds	r0, #1
 800b92a:	f43f aef8 	beq.w	800b71e <_printf_float+0xb6>
 800b92e:	f10a 0a01 	add.w	sl, sl, #1
 800b932:	e7ee      	b.n	800b912 <_printf_float+0x2aa>
 800b934:	7fefffff 	.word	0x7fefffff
 800b938:	0800f2e4 	.word	0x0800f2e4
 800b93c:	0800f2e8 	.word	0x0800f2e8
 800b940:	0800f2ec 	.word	0x0800f2ec
 800b944:	0800f2f0 	.word	0x0800f2f0
 800b948:	0800f2f4 	.word	0x0800f2f4
 800b94c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b94e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b952:	4553      	cmp	r3, sl
 800b954:	bfa8      	it	ge
 800b956:	4653      	movge	r3, sl
 800b958:	2b00      	cmp	r3, #0
 800b95a:	4699      	mov	r9, r3
 800b95c:	dc36      	bgt.n	800b9cc <_printf_float+0x364>
 800b95e:	f04f 0b00 	mov.w	fp, #0
 800b962:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b966:	f104 021a 	add.w	r2, r4, #26
 800b96a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b96c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b96e:	eba3 0309 	sub.w	r3, r3, r9
 800b972:	455b      	cmp	r3, fp
 800b974:	dc31      	bgt.n	800b9da <_printf_float+0x372>
 800b976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b978:	459a      	cmp	sl, r3
 800b97a:	dc3a      	bgt.n	800b9f2 <_printf_float+0x38a>
 800b97c:	6823      	ldr	r3, [r4, #0]
 800b97e:	07da      	lsls	r2, r3, #31
 800b980:	d437      	bmi.n	800b9f2 <_printf_float+0x38a>
 800b982:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b984:	ebaa 0903 	sub.w	r9, sl, r3
 800b988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b98a:	ebaa 0303 	sub.w	r3, sl, r3
 800b98e:	4599      	cmp	r9, r3
 800b990:	bfa8      	it	ge
 800b992:	4699      	movge	r9, r3
 800b994:	f1b9 0f00 	cmp.w	r9, #0
 800b998:	dc33      	bgt.n	800ba02 <_printf_float+0x39a>
 800b99a:	f04f 0800 	mov.w	r8, #0
 800b99e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9a2:	f104 0b1a 	add.w	fp, r4, #26
 800b9a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9a8:	ebaa 0303 	sub.w	r3, sl, r3
 800b9ac:	eba3 0309 	sub.w	r3, r3, r9
 800b9b0:	4543      	cmp	r3, r8
 800b9b2:	f77f af7a 	ble.w	800b8aa <_printf_float+0x242>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	465a      	mov	r2, fp
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4628      	mov	r0, r5
 800b9be:	47b8      	blx	r7
 800b9c0:	3001      	adds	r0, #1
 800b9c2:	f43f aeac 	beq.w	800b71e <_printf_float+0xb6>
 800b9c6:	f108 0801 	add.w	r8, r8, #1
 800b9ca:	e7ec      	b.n	800b9a6 <_printf_float+0x33e>
 800b9cc:	4642      	mov	r2, r8
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	47b8      	blx	r7
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	d1c2      	bne.n	800b95e <_printf_float+0x2f6>
 800b9d8:	e6a1      	b.n	800b71e <_printf_float+0xb6>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	4631      	mov	r1, r6
 800b9de:	4628      	mov	r0, r5
 800b9e0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b9e2:	47b8      	blx	r7
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	f43f ae9a 	beq.w	800b71e <_printf_float+0xb6>
 800b9ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9ec:	f10b 0b01 	add.w	fp, fp, #1
 800b9f0:	e7bb      	b.n	800b96a <_printf_float+0x302>
 800b9f2:	4631      	mov	r1, r6
 800b9f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	47b8      	blx	r7
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	d1c0      	bne.n	800b982 <_printf_float+0x31a>
 800ba00:	e68d      	b.n	800b71e <_printf_float+0xb6>
 800ba02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba04:	464b      	mov	r3, r9
 800ba06:	4631      	mov	r1, r6
 800ba08:	4628      	mov	r0, r5
 800ba0a:	4442      	add	r2, r8
 800ba0c:	47b8      	blx	r7
 800ba0e:	3001      	adds	r0, #1
 800ba10:	d1c3      	bne.n	800b99a <_printf_float+0x332>
 800ba12:	e684      	b.n	800b71e <_printf_float+0xb6>
 800ba14:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ba18:	f1ba 0f01 	cmp.w	sl, #1
 800ba1c:	dc01      	bgt.n	800ba22 <_printf_float+0x3ba>
 800ba1e:	07db      	lsls	r3, r3, #31
 800ba20:	d536      	bpl.n	800ba90 <_printf_float+0x428>
 800ba22:	2301      	movs	r3, #1
 800ba24:	4642      	mov	r2, r8
 800ba26:	4631      	mov	r1, r6
 800ba28:	4628      	mov	r0, r5
 800ba2a:	47b8      	blx	r7
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	f43f ae76 	beq.w	800b71e <_printf_float+0xb6>
 800ba32:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba36:	4631      	mov	r1, r6
 800ba38:	4628      	mov	r0, r5
 800ba3a:	47b8      	blx	r7
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	f43f ae6e 	beq.w	800b71e <_printf_float+0xb6>
 800ba42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba46:	2200      	movs	r2, #0
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ba4e:	f7f4 ffab 	bl	80009a8 <__aeabi_dcmpeq>
 800ba52:	b9c0      	cbnz	r0, 800ba86 <_printf_float+0x41e>
 800ba54:	4653      	mov	r3, sl
 800ba56:	f108 0201 	add.w	r2, r8, #1
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b8      	blx	r7
 800ba60:	3001      	adds	r0, #1
 800ba62:	d10c      	bne.n	800ba7e <_printf_float+0x416>
 800ba64:	e65b      	b.n	800b71e <_printf_float+0xb6>
 800ba66:	2301      	movs	r3, #1
 800ba68:	465a      	mov	r2, fp
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b8      	blx	r7
 800ba70:	3001      	adds	r0, #1
 800ba72:	f43f ae54 	beq.w	800b71e <_printf_float+0xb6>
 800ba76:	f108 0801 	add.w	r8, r8, #1
 800ba7a:	45d0      	cmp	r8, sl
 800ba7c:	dbf3      	blt.n	800ba66 <_printf_float+0x3fe>
 800ba7e:	464b      	mov	r3, r9
 800ba80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ba84:	e6e0      	b.n	800b848 <_printf_float+0x1e0>
 800ba86:	f04f 0800 	mov.w	r8, #0
 800ba8a:	f104 0b1a 	add.w	fp, r4, #26
 800ba8e:	e7f4      	b.n	800ba7a <_printf_float+0x412>
 800ba90:	2301      	movs	r3, #1
 800ba92:	4642      	mov	r2, r8
 800ba94:	e7e1      	b.n	800ba5a <_printf_float+0x3f2>
 800ba96:	2301      	movs	r3, #1
 800ba98:	464a      	mov	r2, r9
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	47b8      	blx	r7
 800baa0:	3001      	adds	r0, #1
 800baa2:	f43f ae3c 	beq.w	800b71e <_printf_float+0xb6>
 800baa6:	f108 0801 	add.w	r8, r8, #1
 800baaa:	68e3      	ldr	r3, [r4, #12]
 800baac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800baae:	1a5b      	subs	r3, r3, r1
 800bab0:	4543      	cmp	r3, r8
 800bab2:	dcf0      	bgt.n	800ba96 <_printf_float+0x42e>
 800bab4:	e6fd      	b.n	800b8b2 <_printf_float+0x24a>
 800bab6:	f04f 0800 	mov.w	r8, #0
 800baba:	f104 0919 	add.w	r9, r4, #25
 800babe:	e7f4      	b.n	800baaa <_printf_float+0x442>

0800bac0 <_printf_common>:
 800bac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac4:	4616      	mov	r6, r2
 800bac6:	4698      	mov	r8, r3
 800bac8:	688a      	ldr	r2, [r1, #8]
 800baca:	690b      	ldr	r3, [r1, #16]
 800bacc:	4607      	mov	r7, r0
 800bace:	4293      	cmp	r3, r2
 800bad0:	bfb8      	it	lt
 800bad2:	4613      	movlt	r3, r2
 800bad4:	6033      	str	r3, [r6, #0]
 800bad6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bada:	460c      	mov	r4, r1
 800badc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bae0:	b10a      	cbz	r2, 800bae6 <_printf_common+0x26>
 800bae2:	3301      	adds	r3, #1
 800bae4:	6033      	str	r3, [r6, #0]
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	0699      	lsls	r1, r3, #26
 800baea:	bf42      	ittt	mi
 800baec:	6833      	ldrmi	r3, [r6, #0]
 800baee:	3302      	addmi	r3, #2
 800baf0:	6033      	strmi	r3, [r6, #0]
 800baf2:	6825      	ldr	r5, [r4, #0]
 800baf4:	f015 0506 	ands.w	r5, r5, #6
 800baf8:	d106      	bne.n	800bb08 <_printf_common+0x48>
 800bafa:	f104 0a19 	add.w	sl, r4, #25
 800bafe:	68e3      	ldr	r3, [r4, #12]
 800bb00:	6832      	ldr	r2, [r6, #0]
 800bb02:	1a9b      	subs	r3, r3, r2
 800bb04:	42ab      	cmp	r3, r5
 800bb06:	dc2b      	bgt.n	800bb60 <_printf_common+0xa0>
 800bb08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb0c:	6822      	ldr	r2, [r4, #0]
 800bb0e:	3b00      	subs	r3, #0
 800bb10:	bf18      	it	ne
 800bb12:	2301      	movne	r3, #1
 800bb14:	0692      	lsls	r2, r2, #26
 800bb16:	d430      	bmi.n	800bb7a <_printf_common+0xba>
 800bb18:	4641      	mov	r1, r8
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb20:	47c8      	blx	r9
 800bb22:	3001      	adds	r0, #1
 800bb24:	d023      	beq.n	800bb6e <_printf_common+0xae>
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	6922      	ldr	r2, [r4, #16]
 800bb2a:	f003 0306 	and.w	r3, r3, #6
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	bf14      	ite	ne
 800bb32:	2500      	movne	r5, #0
 800bb34:	6833      	ldreq	r3, [r6, #0]
 800bb36:	f04f 0600 	mov.w	r6, #0
 800bb3a:	bf08      	it	eq
 800bb3c:	68e5      	ldreq	r5, [r4, #12]
 800bb3e:	f104 041a 	add.w	r4, r4, #26
 800bb42:	bf08      	it	eq
 800bb44:	1aed      	subeq	r5, r5, r3
 800bb46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bb4a:	bf08      	it	eq
 800bb4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb50:	4293      	cmp	r3, r2
 800bb52:	bfc4      	itt	gt
 800bb54:	1a9b      	subgt	r3, r3, r2
 800bb56:	18ed      	addgt	r5, r5, r3
 800bb58:	42b5      	cmp	r5, r6
 800bb5a:	d11a      	bne.n	800bb92 <_printf_common+0xd2>
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	e008      	b.n	800bb72 <_printf_common+0xb2>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4652      	mov	r2, sl
 800bb64:	4641      	mov	r1, r8
 800bb66:	4638      	mov	r0, r7
 800bb68:	47c8      	blx	r9
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	d103      	bne.n	800bb76 <_printf_common+0xb6>
 800bb6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb76:	3501      	adds	r5, #1
 800bb78:	e7c1      	b.n	800bafe <_printf_common+0x3e>
 800bb7a:	2030      	movs	r0, #48	@ 0x30
 800bb7c:	18e1      	adds	r1, r4, r3
 800bb7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bb82:	1c5a      	adds	r2, r3, #1
 800bb84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bb88:	4422      	add	r2, r4
 800bb8a:	3302      	adds	r3, #2
 800bb8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bb90:	e7c2      	b.n	800bb18 <_printf_common+0x58>
 800bb92:	2301      	movs	r3, #1
 800bb94:	4622      	mov	r2, r4
 800bb96:	4641      	mov	r1, r8
 800bb98:	4638      	mov	r0, r7
 800bb9a:	47c8      	blx	r9
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d0e6      	beq.n	800bb6e <_printf_common+0xae>
 800bba0:	3601      	adds	r6, #1
 800bba2:	e7d9      	b.n	800bb58 <_printf_common+0x98>

0800bba4 <_printf_i>:
 800bba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bba8:	7e0f      	ldrb	r7, [r1, #24]
 800bbaa:	4691      	mov	r9, r2
 800bbac:	2f78      	cmp	r7, #120	@ 0x78
 800bbae:	4680      	mov	r8, r0
 800bbb0:	460c      	mov	r4, r1
 800bbb2:	469a      	mov	sl, r3
 800bbb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bbb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bbba:	d807      	bhi.n	800bbcc <_printf_i+0x28>
 800bbbc:	2f62      	cmp	r7, #98	@ 0x62
 800bbbe:	d80a      	bhi.n	800bbd6 <_printf_i+0x32>
 800bbc0:	2f00      	cmp	r7, #0
 800bbc2:	f000 80d3 	beq.w	800bd6c <_printf_i+0x1c8>
 800bbc6:	2f58      	cmp	r7, #88	@ 0x58
 800bbc8:	f000 80ba 	beq.w	800bd40 <_printf_i+0x19c>
 800bbcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bbd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bbd4:	e03a      	b.n	800bc4c <_printf_i+0xa8>
 800bbd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bbda:	2b15      	cmp	r3, #21
 800bbdc:	d8f6      	bhi.n	800bbcc <_printf_i+0x28>
 800bbde:	a101      	add	r1, pc, #4	@ (adr r1, 800bbe4 <_printf_i+0x40>)
 800bbe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbe4:	0800bc3d 	.word	0x0800bc3d
 800bbe8:	0800bc51 	.word	0x0800bc51
 800bbec:	0800bbcd 	.word	0x0800bbcd
 800bbf0:	0800bbcd 	.word	0x0800bbcd
 800bbf4:	0800bbcd 	.word	0x0800bbcd
 800bbf8:	0800bbcd 	.word	0x0800bbcd
 800bbfc:	0800bc51 	.word	0x0800bc51
 800bc00:	0800bbcd 	.word	0x0800bbcd
 800bc04:	0800bbcd 	.word	0x0800bbcd
 800bc08:	0800bbcd 	.word	0x0800bbcd
 800bc0c:	0800bbcd 	.word	0x0800bbcd
 800bc10:	0800bd53 	.word	0x0800bd53
 800bc14:	0800bc7b 	.word	0x0800bc7b
 800bc18:	0800bd0d 	.word	0x0800bd0d
 800bc1c:	0800bbcd 	.word	0x0800bbcd
 800bc20:	0800bbcd 	.word	0x0800bbcd
 800bc24:	0800bd75 	.word	0x0800bd75
 800bc28:	0800bbcd 	.word	0x0800bbcd
 800bc2c:	0800bc7b 	.word	0x0800bc7b
 800bc30:	0800bbcd 	.word	0x0800bbcd
 800bc34:	0800bbcd 	.word	0x0800bbcd
 800bc38:	0800bd15 	.word	0x0800bd15
 800bc3c:	6833      	ldr	r3, [r6, #0]
 800bc3e:	1d1a      	adds	r2, r3, #4
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6032      	str	r2, [r6, #0]
 800bc44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e09e      	b.n	800bd8e <_printf_i+0x1ea>
 800bc50:	6833      	ldr	r3, [r6, #0]
 800bc52:	6820      	ldr	r0, [r4, #0]
 800bc54:	1d19      	adds	r1, r3, #4
 800bc56:	6031      	str	r1, [r6, #0]
 800bc58:	0606      	lsls	r6, r0, #24
 800bc5a:	d501      	bpl.n	800bc60 <_printf_i+0xbc>
 800bc5c:	681d      	ldr	r5, [r3, #0]
 800bc5e:	e003      	b.n	800bc68 <_printf_i+0xc4>
 800bc60:	0645      	lsls	r5, r0, #25
 800bc62:	d5fb      	bpl.n	800bc5c <_printf_i+0xb8>
 800bc64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bc68:	2d00      	cmp	r5, #0
 800bc6a:	da03      	bge.n	800bc74 <_printf_i+0xd0>
 800bc6c:	232d      	movs	r3, #45	@ 0x2d
 800bc6e:	426d      	negs	r5, r5
 800bc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc74:	230a      	movs	r3, #10
 800bc76:	4859      	ldr	r0, [pc, #356]	@ (800bddc <_printf_i+0x238>)
 800bc78:	e011      	b.n	800bc9e <_printf_i+0xfa>
 800bc7a:	6821      	ldr	r1, [r4, #0]
 800bc7c:	6833      	ldr	r3, [r6, #0]
 800bc7e:	0608      	lsls	r0, r1, #24
 800bc80:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc84:	d402      	bmi.n	800bc8c <_printf_i+0xe8>
 800bc86:	0649      	lsls	r1, r1, #25
 800bc88:	bf48      	it	mi
 800bc8a:	b2ad      	uxthmi	r5, r5
 800bc8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bc8e:	6033      	str	r3, [r6, #0]
 800bc90:	bf14      	ite	ne
 800bc92:	230a      	movne	r3, #10
 800bc94:	2308      	moveq	r3, #8
 800bc96:	4851      	ldr	r0, [pc, #324]	@ (800bddc <_printf_i+0x238>)
 800bc98:	2100      	movs	r1, #0
 800bc9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bc9e:	6866      	ldr	r6, [r4, #4]
 800bca0:	2e00      	cmp	r6, #0
 800bca2:	bfa8      	it	ge
 800bca4:	6821      	ldrge	r1, [r4, #0]
 800bca6:	60a6      	str	r6, [r4, #8]
 800bca8:	bfa4      	itt	ge
 800bcaa:	f021 0104 	bicge.w	r1, r1, #4
 800bcae:	6021      	strge	r1, [r4, #0]
 800bcb0:	b90d      	cbnz	r5, 800bcb6 <_printf_i+0x112>
 800bcb2:	2e00      	cmp	r6, #0
 800bcb4:	d04b      	beq.n	800bd4e <_printf_i+0x1aa>
 800bcb6:	4616      	mov	r6, r2
 800bcb8:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcbc:	fb03 5711 	mls	r7, r3, r1, r5
 800bcc0:	5dc7      	ldrb	r7, [r0, r7]
 800bcc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcc6:	462f      	mov	r7, r5
 800bcc8:	42bb      	cmp	r3, r7
 800bcca:	460d      	mov	r5, r1
 800bccc:	d9f4      	bls.n	800bcb8 <_printf_i+0x114>
 800bcce:	2b08      	cmp	r3, #8
 800bcd0:	d10b      	bne.n	800bcea <_printf_i+0x146>
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	07df      	lsls	r7, r3, #31
 800bcd6:	d508      	bpl.n	800bcea <_printf_i+0x146>
 800bcd8:	6923      	ldr	r3, [r4, #16]
 800bcda:	6861      	ldr	r1, [r4, #4]
 800bcdc:	4299      	cmp	r1, r3
 800bcde:	bfde      	ittt	le
 800bce0:	2330      	movle	r3, #48	@ 0x30
 800bce2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bce6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bcea:	1b92      	subs	r2, r2, r6
 800bcec:	6122      	str	r2, [r4, #16]
 800bcee:	464b      	mov	r3, r9
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	f8cd a000 	str.w	sl, [sp]
 800bcf8:	aa03      	add	r2, sp, #12
 800bcfa:	f7ff fee1 	bl	800bac0 <_printf_common>
 800bcfe:	3001      	adds	r0, #1
 800bd00:	d14a      	bne.n	800bd98 <_printf_i+0x1f4>
 800bd02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd06:	b004      	add	sp, #16
 800bd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0c:	6823      	ldr	r3, [r4, #0]
 800bd0e:	f043 0320 	orr.w	r3, r3, #32
 800bd12:	6023      	str	r3, [r4, #0]
 800bd14:	2778      	movs	r7, #120	@ 0x78
 800bd16:	4832      	ldr	r0, [pc, #200]	@ (800bde0 <_printf_i+0x23c>)
 800bd18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	6831      	ldr	r1, [r6, #0]
 800bd20:	061f      	lsls	r7, r3, #24
 800bd22:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd26:	d402      	bmi.n	800bd2e <_printf_i+0x18a>
 800bd28:	065f      	lsls	r7, r3, #25
 800bd2a:	bf48      	it	mi
 800bd2c:	b2ad      	uxthmi	r5, r5
 800bd2e:	6031      	str	r1, [r6, #0]
 800bd30:	07d9      	lsls	r1, r3, #31
 800bd32:	bf44      	itt	mi
 800bd34:	f043 0320 	orrmi.w	r3, r3, #32
 800bd38:	6023      	strmi	r3, [r4, #0]
 800bd3a:	b11d      	cbz	r5, 800bd44 <_printf_i+0x1a0>
 800bd3c:	2310      	movs	r3, #16
 800bd3e:	e7ab      	b.n	800bc98 <_printf_i+0xf4>
 800bd40:	4826      	ldr	r0, [pc, #152]	@ (800bddc <_printf_i+0x238>)
 800bd42:	e7e9      	b.n	800bd18 <_printf_i+0x174>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	f023 0320 	bic.w	r3, r3, #32
 800bd4a:	6023      	str	r3, [r4, #0]
 800bd4c:	e7f6      	b.n	800bd3c <_printf_i+0x198>
 800bd4e:	4616      	mov	r6, r2
 800bd50:	e7bd      	b.n	800bcce <_printf_i+0x12a>
 800bd52:	6833      	ldr	r3, [r6, #0]
 800bd54:	6825      	ldr	r5, [r4, #0]
 800bd56:	1d18      	adds	r0, r3, #4
 800bd58:	6961      	ldr	r1, [r4, #20]
 800bd5a:	6030      	str	r0, [r6, #0]
 800bd5c:	062e      	lsls	r6, r5, #24
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	d501      	bpl.n	800bd66 <_printf_i+0x1c2>
 800bd62:	6019      	str	r1, [r3, #0]
 800bd64:	e002      	b.n	800bd6c <_printf_i+0x1c8>
 800bd66:	0668      	lsls	r0, r5, #25
 800bd68:	d5fb      	bpl.n	800bd62 <_printf_i+0x1be>
 800bd6a:	8019      	strh	r1, [r3, #0]
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	4616      	mov	r6, r2
 800bd70:	6123      	str	r3, [r4, #16]
 800bd72:	e7bc      	b.n	800bcee <_printf_i+0x14a>
 800bd74:	6833      	ldr	r3, [r6, #0]
 800bd76:	2100      	movs	r1, #0
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	6032      	str	r2, [r6, #0]
 800bd7c:	681e      	ldr	r6, [r3, #0]
 800bd7e:	6862      	ldr	r2, [r4, #4]
 800bd80:	4630      	mov	r0, r6
 800bd82:	f000 faaa 	bl	800c2da <memchr>
 800bd86:	b108      	cbz	r0, 800bd8c <_printf_i+0x1e8>
 800bd88:	1b80      	subs	r0, r0, r6
 800bd8a:	6060      	str	r0, [r4, #4]
 800bd8c:	6863      	ldr	r3, [r4, #4]
 800bd8e:	6123      	str	r3, [r4, #16]
 800bd90:	2300      	movs	r3, #0
 800bd92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd96:	e7aa      	b.n	800bcee <_printf_i+0x14a>
 800bd98:	4632      	mov	r2, r6
 800bd9a:	4649      	mov	r1, r9
 800bd9c:	4640      	mov	r0, r8
 800bd9e:	6923      	ldr	r3, [r4, #16]
 800bda0:	47d0      	blx	sl
 800bda2:	3001      	adds	r0, #1
 800bda4:	d0ad      	beq.n	800bd02 <_printf_i+0x15e>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	079b      	lsls	r3, r3, #30
 800bdaa:	d413      	bmi.n	800bdd4 <_printf_i+0x230>
 800bdac:	68e0      	ldr	r0, [r4, #12]
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	4298      	cmp	r0, r3
 800bdb2:	bfb8      	it	lt
 800bdb4:	4618      	movlt	r0, r3
 800bdb6:	e7a6      	b.n	800bd06 <_printf_i+0x162>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	4632      	mov	r2, r6
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	4640      	mov	r0, r8
 800bdc0:	47d0      	blx	sl
 800bdc2:	3001      	adds	r0, #1
 800bdc4:	d09d      	beq.n	800bd02 <_printf_i+0x15e>
 800bdc6:	3501      	adds	r5, #1
 800bdc8:	68e3      	ldr	r3, [r4, #12]
 800bdca:	9903      	ldr	r1, [sp, #12]
 800bdcc:	1a5b      	subs	r3, r3, r1
 800bdce:	42ab      	cmp	r3, r5
 800bdd0:	dcf2      	bgt.n	800bdb8 <_printf_i+0x214>
 800bdd2:	e7eb      	b.n	800bdac <_printf_i+0x208>
 800bdd4:	2500      	movs	r5, #0
 800bdd6:	f104 0619 	add.w	r6, r4, #25
 800bdda:	e7f5      	b.n	800bdc8 <_printf_i+0x224>
 800bddc:	0800f2f6 	.word	0x0800f2f6
 800bde0:	0800f307 	.word	0x0800f307

0800bde4 <__sflush_r>:
 800bde4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	0716      	lsls	r6, r2, #28
 800bdec:	4605      	mov	r5, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	d454      	bmi.n	800be9c <__sflush_r+0xb8>
 800bdf2:	684b      	ldr	r3, [r1, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	dc02      	bgt.n	800bdfe <__sflush_r+0x1a>
 800bdf8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dd48      	ble.n	800be90 <__sflush_r+0xac>
 800bdfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be00:	2e00      	cmp	r6, #0
 800be02:	d045      	beq.n	800be90 <__sflush_r+0xac>
 800be04:	2300      	movs	r3, #0
 800be06:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be0a:	682f      	ldr	r7, [r5, #0]
 800be0c:	6a21      	ldr	r1, [r4, #32]
 800be0e:	602b      	str	r3, [r5, #0]
 800be10:	d030      	beq.n	800be74 <__sflush_r+0x90>
 800be12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	0759      	lsls	r1, r3, #29
 800be18:	d505      	bpl.n	800be26 <__sflush_r+0x42>
 800be1a:	6863      	ldr	r3, [r4, #4]
 800be1c:	1ad2      	subs	r2, r2, r3
 800be1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be20:	b10b      	cbz	r3, 800be26 <__sflush_r+0x42>
 800be22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be24:	1ad2      	subs	r2, r2, r3
 800be26:	2300      	movs	r3, #0
 800be28:	4628      	mov	r0, r5
 800be2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be2c:	6a21      	ldr	r1, [r4, #32]
 800be2e:	47b0      	blx	r6
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	d106      	bne.n	800be44 <__sflush_r+0x60>
 800be36:	6829      	ldr	r1, [r5, #0]
 800be38:	291d      	cmp	r1, #29
 800be3a:	d82b      	bhi.n	800be94 <__sflush_r+0xb0>
 800be3c:	4a28      	ldr	r2, [pc, #160]	@ (800bee0 <__sflush_r+0xfc>)
 800be3e:	410a      	asrs	r2, r1
 800be40:	07d6      	lsls	r6, r2, #31
 800be42:	d427      	bmi.n	800be94 <__sflush_r+0xb0>
 800be44:	2200      	movs	r2, #0
 800be46:	6062      	str	r2, [r4, #4]
 800be48:	6922      	ldr	r2, [r4, #16]
 800be4a:	04d9      	lsls	r1, r3, #19
 800be4c:	6022      	str	r2, [r4, #0]
 800be4e:	d504      	bpl.n	800be5a <__sflush_r+0x76>
 800be50:	1c42      	adds	r2, r0, #1
 800be52:	d101      	bne.n	800be58 <__sflush_r+0x74>
 800be54:	682b      	ldr	r3, [r5, #0]
 800be56:	b903      	cbnz	r3, 800be5a <__sflush_r+0x76>
 800be58:	6560      	str	r0, [r4, #84]	@ 0x54
 800be5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be5c:	602f      	str	r7, [r5, #0]
 800be5e:	b1b9      	cbz	r1, 800be90 <__sflush_r+0xac>
 800be60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be64:	4299      	cmp	r1, r3
 800be66:	d002      	beq.n	800be6e <__sflush_r+0x8a>
 800be68:	4628      	mov	r0, r5
 800be6a:	f001 f895 	bl	800cf98 <_free_r>
 800be6e:	2300      	movs	r3, #0
 800be70:	6363      	str	r3, [r4, #52]	@ 0x34
 800be72:	e00d      	b.n	800be90 <__sflush_r+0xac>
 800be74:	2301      	movs	r3, #1
 800be76:	4628      	mov	r0, r5
 800be78:	47b0      	blx	r6
 800be7a:	4602      	mov	r2, r0
 800be7c:	1c50      	adds	r0, r2, #1
 800be7e:	d1c9      	bne.n	800be14 <__sflush_r+0x30>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0c6      	beq.n	800be14 <__sflush_r+0x30>
 800be86:	2b1d      	cmp	r3, #29
 800be88:	d001      	beq.n	800be8e <__sflush_r+0xaa>
 800be8a:	2b16      	cmp	r3, #22
 800be8c:	d11d      	bne.n	800beca <__sflush_r+0xe6>
 800be8e:	602f      	str	r7, [r5, #0]
 800be90:	2000      	movs	r0, #0
 800be92:	e021      	b.n	800bed8 <__sflush_r+0xf4>
 800be94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be98:	b21b      	sxth	r3, r3
 800be9a:	e01a      	b.n	800bed2 <__sflush_r+0xee>
 800be9c:	690f      	ldr	r7, [r1, #16]
 800be9e:	2f00      	cmp	r7, #0
 800bea0:	d0f6      	beq.n	800be90 <__sflush_r+0xac>
 800bea2:	0793      	lsls	r3, r2, #30
 800bea4:	bf18      	it	ne
 800bea6:	2300      	movne	r3, #0
 800bea8:	680e      	ldr	r6, [r1, #0]
 800beaa:	bf08      	it	eq
 800beac:	694b      	ldreq	r3, [r1, #20]
 800beae:	1bf6      	subs	r6, r6, r7
 800beb0:	600f      	str	r7, [r1, #0]
 800beb2:	608b      	str	r3, [r1, #8]
 800beb4:	2e00      	cmp	r6, #0
 800beb6:	ddeb      	ble.n	800be90 <__sflush_r+0xac>
 800beb8:	4633      	mov	r3, r6
 800beba:	463a      	mov	r2, r7
 800bebc:	4628      	mov	r0, r5
 800bebe:	6a21      	ldr	r1, [r4, #32]
 800bec0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bec4:	47e0      	blx	ip
 800bec6:	2800      	cmp	r0, #0
 800bec8:	dc07      	bgt.n	800beda <__sflush_r+0xf6>
 800beca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bed2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bed6:	81a3      	strh	r3, [r4, #12]
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beda:	4407      	add	r7, r0
 800bedc:	1a36      	subs	r6, r6, r0
 800bede:	e7e9      	b.n	800beb4 <__sflush_r+0xd0>
 800bee0:	dfbffffe 	.word	0xdfbffffe

0800bee4 <_fflush_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	690b      	ldr	r3, [r1, #16]
 800bee8:	4605      	mov	r5, r0
 800beea:	460c      	mov	r4, r1
 800beec:	b913      	cbnz	r3, 800bef4 <_fflush_r+0x10>
 800beee:	2500      	movs	r5, #0
 800bef0:	4628      	mov	r0, r5
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	b118      	cbz	r0, 800befe <_fflush_r+0x1a>
 800bef6:	6a03      	ldr	r3, [r0, #32]
 800bef8:	b90b      	cbnz	r3, 800befe <_fflush_r+0x1a>
 800befa:	f000 f8ef 	bl	800c0dc <__sinit>
 800befe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0f3      	beq.n	800beee <_fflush_r+0xa>
 800bf06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf08:	07d0      	lsls	r0, r2, #31
 800bf0a:	d404      	bmi.n	800bf16 <_fflush_r+0x32>
 800bf0c:	0599      	lsls	r1, r3, #22
 800bf0e:	d402      	bmi.n	800bf16 <_fflush_r+0x32>
 800bf10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf12:	f000 f9e0 	bl	800c2d6 <__retarget_lock_acquire_recursive>
 800bf16:	4628      	mov	r0, r5
 800bf18:	4621      	mov	r1, r4
 800bf1a:	f7ff ff63 	bl	800bde4 <__sflush_r>
 800bf1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf20:	4605      	mov	r5, r0
 800bf22:	07da      	lsls	r2, r3, #31
 800bf24:	d4e4      	bmi.n	800bef0 <_fflush_r+0xc>
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	059b      	lsls	r3, r3, #22
 800bf2a:	d4e1      	bmi.n	800bef0 <_fflush_r+0xc>
 800bf2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf2e:	f000 f9d3 	bl	800c2d8 <__retarget_lock_release_recursive>
 800bf32:	e7dd      	b.n	800bef0 <_fflush_r+0xc>

0800bf34 <fflush>:
 800bf34:	4601      	mov	r1, r0
 800bf36:	b920      	cbnz	r0, 800bf42 <fflush+0xe>
 800bf38:	4a04      	ldr	r2, [pc, #16]	@ (800bf4c <fflush+0x18>)
 800bf3a:	4905      	ldr	r1, [pc, #20]	@ (800bf50 <fflush+0x1c>)
 800bf3c:	4805      	ldr	r0, [pc, #20]	@ (800bf54 <fflush+0x20>)
 800bf3e:	f000 b8e5 	b.w	800c10c <_fwalk_sglue>
 800bf42:	4b05      	ldr	r3, [pc, #20]	@ (800bf58 <fflush+0x24>)
 800bf44:	6818      	ldr	r0, [r3, #0]
 800bf46:	f7ff bfcd 	b.w	800bee4 <_fflush_r>
 800bf4a:	bf00      	nop
 800bf4c:	2000009c 	.word	0x2000009c
 800bf50:	0800bee5 	.word	0x0800bee5
 800bf54:	200000ac 	.word	0x200000ac
 800bf58:	200000a8 	.word	0x200000a8

0800bf5c <sniprintf>:
 800bf5c:	b40c      	push	{r2, r3}
 800bf5e:	b530      	push	{r4, r5, lr}
 800bf60:	4b17      	ldr	r3, [pc, #92]	@ (800bfc0 <sniprintf+0x64>)
 800bf62:	1e0c      	subs	r4, r1, #0
 800bf64:	681d      	ldr	r5, [r3, #0]
 800bf66:	b09d      	sub	sp, #116	@ 0x74
 800bf68:	da08      	bge.n	800bf7c <sniprintf+0x20>
 800bf6a:	238b      	movs	r3, #139	@ 0x8b
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	b01d      	add	sp, #116	@ 0x74
 800bf74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf78:	b002      	add	sp, #8
 800bf7a:	4770      	bx	lr
 800bf7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bf80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bf84:	bf0c      	ite	eq
 800bf86:	4623      	moveq	r3, r4
 800bf88:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800bf8c:	9304      	str	r3, [sp, #16]
 800bf8e:	9307      	str	r3, [sp, #28]
 800bf90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf94:	9002      	str	r0, [sp, #8]
 800bf96:	9006      	str	r0, [sp, #24]
 800bf98:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	ab21      	add	r3, sp, #132	@ 0x84
 800bfa0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bfa2:	a902      	add	r1, sp, #8
 800bfa4:	9301      	str	r3, [sp, #4]
 800bfa6:	f001 f89b 	bl	800d0e0 <_svfiprintf_r>
 800bfaa:	1c43      	adds	r3, r0, #1
 800bfac:	bfbc      	itt	lt
 800bfae:	238b      	movlt	r3, #139	@ 0x8b
 800bfb0:	602b      	strlt	r3, [r5, #0]
 800bfb2:	2c00      	cmp	r4, #0
 800bfb4:	d0dd      	beq.n	800bf72 <sniprintf+0x16>
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	9b02      	ldr	r3, [sp, #8]
 800bfba:	701a      	strb	r2, [r3, #0]
 800bfbc:	e7d9      	b.n	800bf72 <sniprintf+0x16>
 800bfbe:	bf00      	nop
 800bfc0:	200000a8 	.word	0x200000a8

0800bfc4 <std>:
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	b510      	push	{r4, lr}
 800bfc8:	4604      	mov	r4, r0
 800bfca:	e9c0 3300 	strd	r3, r3, [r0]
 800bfce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfd2:	6083      	str	r3, [r0, #8]
 800bfd4:	8181      	strh	r1, [r0, #12]
 800bfd6:	6643      	str	r3, [r0, #100]	@ 0x64
 800bfd8:	81c2      	strh	r2, [r0, #14]
 800bfda:	6183      	str	r3, [r0, #24]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	2208      	movs	r2, #8
 800bfe0:	305c      	adds	r0, #92	@ 0x5c
 800bfe2:	f000 f946 	bl	800c272 <memset>
 800bfe6:	4b0d      	ldr	r3, [pc, #52]	@ (800c01c <std+0x58>)
 800bfe8:	6224      	str	r4, [r4, #32]
 800bfea:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfec:	4b0c      	ldr	r3, [pc, #48]	@ (800c020 <std+0x5c>)
 800bfee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bff0:	4b0c      	ldr	r3, [pc, #48]	@ (800c024 <std+0x60>)
 800bff2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bff4:	4b0c      	ldr	r3, [pc, #48]	@ (800c028 <std+0x64>)
 800bff6:	6323      	str	r3, [r4, #48]	@ 0x30
 800bff8:	4b0c      	ldr	r3, [pc, #48]	@ (800c02c <std+0x68>)
 800bffa:	429c      	cmp	r4, r3
 800bffc:	d006      	beq.n	800c00c <std+0x48>
 800bffe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c002:	4294      	cmp	r4, r2
 800c004:	d002      	beq.n	800c00c <std+0x48>
 800c006:	33d0      	adds	r3, #208	@ 0xd0
 800c008:	429c      	cmp	r4, r3
 800c00a:	d105      	bne.n	800c018 <std+0x54>
 800c00c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c014:	f000 b95e 	b.w	800c2d4 <__retarget_lock_init_recursive>
 800c018:	bd10      	pop	{r4, pc}
 800c01a:	bf00      	nop
 800c01c:	0800ddc5 	.word	0x0800ddc5
 800c020:	0800dde7 	.word	0x0800dde7
 800c024:	0800de1f 	.word	0x0800de1f
 800c028:	0800de43 	.word	0x0800de43
 800c02c:	2000062c 	.word	0x2000062c

0800c030 <stdio_exit_handler>:
 800c030:	4a02      	ldr	r2, [pc, #8]	@ (800c03c <stdio_exit_handler+0xc>)
 800c032:	4903      	ldr	r1, [pc, #12]	@ (800c040 <stdio_exit_handler+0x10>)
 800c034:	4803      	ldr	r0, [pc, #12]	@ (800c044 <stdio_exit_handler+0x14>)
 800c036:	f000 b869 	b.w	800c10c <_fwalk_sglue>
 800c03a:	bf00      	nop
 800c03c:	2000009c 	.word	0x2000009c
 800c040:	0800bee5 	.word	0x0800bee5
 800c044:	200000ac 	.word	0x200000ac

0800c048 <cleanup_stdio>:
 800c048:	6841      	ldr	r1, [r0, #4]
 800c04a:	4b0c      	ldr	r3, [pc, #48]	@ (800c07c <cleanup_stdio+0x34>)
 800c04c:	b510      	push	{r4, lr}
 800c04e:	4299      	cmp	r1, r3
 800c050:	4604      	mov	r4, r0
 800c052:	d001      	beq.n	800c058 <cleanup_stdio+0x10>
 800c054:	f7ff ff46 	bl	800bee4 <_fflush_r>
 800c058:	68a1      	ldr	r1, [r4, #8]
 800c05a:	4b09      	ldr	r3, [pc, #36]	@ (800c080 <cleanup_stdio+0x38>)
 800c05c:	4299      	cmp	r1, r3
 800c05e:	d002      	beq.n	800c066 <cleanup_stdio+0x1e>
 800c060:	4620      	mov	r0, r4
 800c062:	f7ff ff3f 	bl	800bee4 <_fflush_r>
 800c066:	68e1      	ldr	r1, [r4, #12]
 800c068:	4b06      	ldr	r3, [pc, #24]	@ (800c084 <cleanup_stdio+0x3c>)
 800c06a:	4299      	cmp	r1, r3
 800c06c:	d004      	beq.n	800c078 <cleanup_stdio+0x30>
 800c06e:	4620      	mov	r0, r4
 800c070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c074:	f7ff bf36 	b.w	800bee4 <_fflush_r>
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	bf00      	nop
 800c07c:	2000062c 	.word	0x2000062c
 800c080:	20000694 	.word	0x20000694
 800c084:	200006fc 	.word	0x200006fc

0800c088 <global_stdio_init.part.0>:
 800c088:	b510      	push	{r4, lr}
 800c08a:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b8 <global_stdio_init.part.0+0x30>)
 800c08c:	4c0b      	ldr	r4, [pc, #44]	@ (800c0bc <global_stdio_init.part.0+0x34>)
 800c08e:	4a0c      	ldr	r2, [pc, #48]	@ (800c0c0 <global_stdio_init.part.0+0x38>)
 800c090:	4620      	mov	r0, r4
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	2104      	movs	r1, #4
 800c096:	2200      	movs	r2, #0
 800c098:	f7ff ff94 	bl	800bfc4 <std>
 800c09c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	2109      	movs	r1, #9
 800c0a4:	f7ff ff8e 	bl	800bfc4 <std>
 800c0a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0b2:	2112      	movs	r1, #18
 800c0b4:	f7ff bf86 	b.w	800bfc4 <std>
 800c0b8:	20000764 	.word	0x20000764
 800c0bc:	2000062c 	.word	0x2000062c
 800c0c0:	0800c031 	.word	0x0800c031

0800c0c4 <__sfp_lock_acquire>:
 800c0c4:	4801      	ldr	r0, [pc, #4]	@ (800c0cc <__sfp_lock_acquire+0x8>)
 800c0c6:	f000 b906 	b.w	800c2d6 <__retarget_lock_acquire_recursive>
 800c0ca:	bf00      	nop
 800c0cc:	20000769 	.word	0x20000769

0800c0d0 <__sfp_lock_release>:
 800c0d0:	4801      	ldr	r0, [pc, #4]	@ (800c0d8 <__sfp_lock_release+0x8>)
 800c0d2:	f000 b901 	b.w	800c2d8 <__retarget_lock_release_recursive>
 800c0d6:	bf00      	nop
 800c0d8:	20000769 	.word	0x20000769

0800c0dc <__sinit>:
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	4604      	mov	r4, r0
 800c0e0:	f7ff fff0 	bl	800c0c4 <__sfp_lock_acquire>
 800c0e4:	6a23      	ldr	r3, [r4, #32]
 800c0e6:	b11b      	cbz	r3, 800c0f0 <__sinit+0x14>
 800c0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ec:	f7ff bff0 	b.w	800c0d0 <__sfp_lock_release>
 800c0f0:	4b04      	ldr	r3, [pc, #16]	@ (800c104 <__sinit+0x28>)
 800c0f2:	6223      	str	r3, [r4, #32]
 800c0f4:	4b04      	ldr	r3, [pc, #16]	@ (800c108 <__sinit+0x2c>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f5      	bne.n	800c0e8 <__sinit+0xc>
 800c0fc:	f7ff ffc4 	bl	800c088 <global_stdio_init.part.0>
 800c100:	e7f2      	b.n	800c0e8 <__sinit+0xc>
 800c102:	bf00      	nop
 800c104:	0800c049 	.word	0x0800c049
 800c108:	20000764 	.word	0x20000764

0800c10c <_fwalk_sglue>:
 800c10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c110:	4607      	mov	r7, r0
 800c112:	4688      	mov	r8, r1
 800c114:	4614      	mov	r4, r2
 800c116:	2600      	movs	r6, #0
 800c118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c11c:	f1b9 0901 	subs.w	r9, r9, #1
 800c120:	d505      	bpl.n	800c12e <_fwalk_sglue+0x22>
 800c122:	6824      	ldr	r4, [r4, #0]
 800c124:	2c00      	cmp	r4, #0
 800c126:	d1f7      	bne.n	800c118 <_fwalk_sglue+0xc>
 800c128:	4630      	mov	r0, r6
 800c12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12e:	89ab      	ldrh	r3, [r5, #12]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d907      	bls.n	800c144 <_fwalk_sglue+0x38>
 800c134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c138:	3301      	adds	r3, #1
 800c13a:	d003      	beq.n	800c144 <_fwalk_sglue+0x38>
 800c13c:	4629      	mov	r1, r5
 800c13e:	4638      	mov	r0, r7
 800c140:	47c0      	blx	r8
 800c142:	4306      	orrs	r6, r0
 800c144:	3568      	adds	r5, #104	@ 0x68
 800c146:	e7e9      	b.n	800c11c <_fwalk_sglue+0x10>

0800c148 <iprintf>:
 800c148:	b40f      	push	{r0, r1, r2, r3}
 800c14a:	b507      	push	{r0, r1, r2, lr}
 800c14c:	4906      	ldr	r1, [pc, #24]	@ (800c168 <iprintf+0x20>)
 800c14e:	ab04      	add	r3, sp, #16
 800c150:	6808      	ldr	r0, [r1, #0]
 800c152:	f853 2b04 	ldr.w	r2, [r3], #4
 800c156:	6881      	ldr	r1, [r0, #8]
 800c158:	9301      	str	r3, [sp, #4]
 800c15a:	f001 f8e5 	bl	800d328 <_vfiprintf_r>
 800c15e:	b003      	add	sp, #12
 800c160:	f85d eb04 	ldr.w	lr, [sp], #4
 800c164:	b004      	add	sp, #16
 800c166:	4770      	bx	lr
 800c168:	200000a8 	.word	0x200000a8

0800c16c <_puts_r>:
 800c16c:	6a03      	ldr	r3, [r0, #32]
 800c16e:	b570      	push	{r4, r5, r6, lr}
 800c170:	4605      	mov	r5, r0
 800c172:	460e      	mov	r6, r1
 800c174:	6884      	ldr	r4, [r0, #8]
 800c176:	b90b      	cbnz	r3, 800c17c <_puts_r+0x10>
 800c178:	f7ff ffb0 	bl	800c0dc <__sinit>
 800c17c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c17e:	07db      	lsls	r3, r3, #31
 800c180:	d405      	bmi.n	800c18e <_puts_r+0x22>
 800c182:	89a3      	ldrh	r3, [r4, #12]
 800c184:	0598      	lsls	r0, r3, #22
 800c186:	d402      	bmi.n	800c18e <_puts_r+0x22>
 800c188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c18a:	f000 f8a4 	bl	800c2d6 <__retarget_lock_acquire_recursive>
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	0719      	lsls	r1, r3, #28
 800c192:	d502      	bpl.n	800c19a <_puts_r+0x2e>
 800c194:	6923      	ldr	r3, [r4, #16]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d135      	bne.n	800c206 <_puts_r+0x9a>
 800c19a:	4621      	mov	r1, r4
 800c19c:	4628      	mov	r0, r5
 800c19e:	f001 fec1 	bl	800df24 <__swsetup_r>
 800c1a2:	b380      	cbz	r0, 800c206 <_puts_r+0x9a>
 800c1a4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c1a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1aa:	07da      	lsls	r2, r3, #31
 800c1ac:	d405      	bmi.n	800c1ba <_puts_r+0x4e>
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	059b      	lsls	r3, r3, #22
 800c1b2:	d402      	bmi.n	800c1ba <_puts_r+0x4e>
 800c1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1b6:	f000 f88f 	bl	800c2d8 <__retarget_lock_release_recursive>
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	bd70      	pop	{r4, r5, r6, pc}
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	da04      	bge.n	800c1cc <_puts_r+0x60>
 800c1c2:	69a2      	ldr	r2, [r4, #24]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	dc17      	bgt.n	800c1f8 <_puts_r+0x8c>
 800c1c8:	290a      	cmp	r1, #10
 800c1ca:	d015      	beq.n	800c1f8 <_puts_r+0x8c>
 800c1cc:	6823      	ldr	r3, [r4, #0]
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	6022      	str	r2, [r4, #0]
 800c1d2:	7019      	strb	r1, [r3, #0]
 800c1d4:	68a3      	ldr	r3, [r4, #8]
 800c1d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	60a3      	str	r3, [r4, #8]
 800c1de:	2900      	cmp	r1, #0
 800c1e0:	d1ed      	bne.n	800c1be <_puts_r+0x52>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	da11      	bge.n	800c20a <_puts_r+0x9e>
 800c1e6:	4622      	mov	r2, r4
 800c1e8:	210a      	movs	r1, #10
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f001 fe5b 	bl	800dea6 <__swbuf_r>
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	d0d7      	beq.n	800c1a4 <_puts_r+0x38>
 800c1f4:	250a      	movs	r5, #10
 800c1f6:	e7d7      	b.n	800c1a8 <_puts_r+0x3c>
 800c1f8:	4622      	mov	r2, r4
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	f001 fe53 	bl	800dea6 <__swbuf_r>
 800c200:	3001      	adds	r0, #1
 800c202:	d1e7      	bne.n	800c1d4 <_puts_r+0x68>
 800c204:	e7ce      	b.n	800c1a4 <_puts_r+0x38>
 800c206:	3e01      	subs	r6, #1
 800c208:	e7e4      	b.n	800c1d4 <_puts_r+0x68>
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	1c5a      	adds	r2, r3, #1
 800c20e:	6022      	str	r2, [r4, #0]
 800c210:	220a      	movs	r2, #10
 800c212:	701a      	strb	r2, [r3, #0]
 800c214:	e7ee      	b.n	800c1f4 <_puts_r+0x88>
	...

0800c218 <puts>:
 800c218:	4b02      	ldr	r3, [pc, #8]	@ (800c224 <puts+0xc>)
 800c21a:	4601      	mov	r1, r0
 800c21c:	6818      	ldr	r0, [r3, #0]
 800c21e:	f7ff bfa5 	b.w	800c16c <_puts_r>
 800c222:	bf00      	nop
 800c224:	200000a8 	.word	0x200000a8

0800c228 <strncmp>:
 800c228:	b510      	push	{r4, lr}
 800c22a:	b16a      	cbz	r2, 800c248 <strncmp+0x20>
 800c22c:	3901      	subs	r1, #1
 800c22e:	1884      	adds	r4, r0, r2
 800c230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c234:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c238:	429a      	cmp	r2, r3
 800c23a:	d103      	bne.n	800c244 <strncmp+0x1c>
 800c23c:	42a0      	cmp	r0, r4
 800c23e:	d001      	beq.n	800c244 <strncmp+0x1c>
 800c240:	2a00      	cmp	r2, #0
 800c242:	d1f5      	bne.n	800c230 <strncmp+0x8>
 800c244:	1ad0      	subs	r0, r2, r3
 800c246:	bd10      	pop	{r4, pc}
 800c248:	4610      	mov	r0, r2
 800c24a:	e7fc      	b.n	800c246 <strncmp+0x1e>

0800c24c <strncpy>:
 800c24c:	4603      	mov	r3, r0
 800c24e:	b510      	push	{r4, lr}
 800c250:	3901      	subs	r1, #1
 800c252:	b132      	cbz	r2, 800c262 <strncpy+0x16>
 800c254:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c258:	3a01      	subs	r2, #1
 800c25a:	f803 4b01 	strb.w	r4, [r3], #1
 800c25e:	2c00      	cmp	r4, #0
 800c260:	d1f7      	bne.n	800c252 <strncpy+0x6>
 800c262:	2100      	movs	r1, #0
 800c264:	441a      	add	r2, r3
 800c266:	4293      	cmp	r3, r2
 800c268:	d100      	bne.n	800c26c <strncpy+0x20>
 800c26a:	bd10      	pop	{r4, pc}
 800c26c:	f803 1b01 	strb.w	r1, [r3], #1
 800c270:	e7f9      	b.n	800c266 <strncpy+0x1a>

0800c272 <memset>:
 800c272:	4603      	mov	r3, r0
 800c274:	4402      	add	r2, r0
 800c276:	4293      	cmp	r3, r2
 800c278:	d100      	bne.n	800c27c <memset+0xa>
 800c27a:	4770      	bx	lr
 800c27c:	f803 1b01 	strb.w	r1, [r3], #1
 800c280:	e7f9      	b.n	800c276 <memset+0x4>
	...

0800c284 <_localeconv_r>:
 800c284:	4800      	ldr	r0, [pc, #0]	@ (800c288 <_localeconv_r+0x4>)
 800c286:	4770      	bx	lr
 800c288:	200001e8 	.word	0x200001e8

0800c28c <__libc_init_array>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	2600      	movs	r6, #0
 800c290:	4d0c      	ldr	r5, [pc, #48]	@ (800c2c4 <__libc_init_array+0x38>)
 800c292:	4c0d      	ldr	r4, [pc, #52]	@ (800c2c8 <__libc_init_array+0x3c>)
 800c294:	1b64      	subs	r4, r4, r5
 800c296:	10a4      	asrs	r4, r4, #2
 800c298:	42a6      	cmp	r6, r4
 800c29a:	d109      	bne.n	800c2b0 <__libc_init_array+0x24>
 800c29c:	f002 fb48 	bl	800e930 <_init>
 800c2a0:	2600      	movs	r6, #0
 800c2a2:	4d0a      	ldr	r5, [pc, #40]	@ (800c2cc <__libc_init_array+0x40>)
 800c2a4:	4c0a      	ldr	r4, [pc, #40]	@ (800c2d0 <__libc_init_array+0x44>)
 800c2a6:	1b64      	subs	r4, r4, r5
 800c2a8:	10a4      	asrs	r4, r4, #2
 800c2aa:	42a6      	cmp	r6, r4
 800c2ac:	d105      	bne.n	800c2ba <__libc_init_array+0x2e>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2b4:	4798      	blx	r3
 800c2b6:	3601      	adds	r6, #1
 800c2b8:	e7ee      	b.n	800c298 <__libc_init_array+0xc>
 800c2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2be:	4798      	blx	r3
 800c2c0:	3601      	adds	r6, #1
 800c2c2:	e7f2      	b.n	800c2aa <__libc_init_array+0x1e>
 800c2c4:	0800f67c 	.word	0x0800f67c
 800c2c8:	0800f67c 	.word	0x0800f67c
 800c2cc:	0800f67c 	.word	0x0800f67c
 800c2d0:	0800f680 	.word	0x0800f680

0800c2d4 <__retarget_lock_init_recursive>:
 800c2d4:	4770      	bx	lr

0800c2d6 <__retarget_lock_acquire_recursive>:
 800c2d6:	4770      	bx	lr

0800c2d8 <__retarget_lock_release_recursive>:
 800c2d8:	4770      	bx	lr

0800c2da <memchr>:
 800c2da:	4603      	mov	r3, r0
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	b2c9      	uxtb	r1, r1
 800c2e0:	4402      	add	r2, r0
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	d101      	bne.n	800c2ec <memchr+0x12>
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e003      	b.n	800c2f4 <memchr+0x1a>
 800c2ec:	7804      	ldrb	r4, [r0, #0]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	428c      	cmp	r4, r1
 800c2f2:	d1f6      	bne.n	800c2e2 <memchr+0x8>
 800c2f4:	bd10      	pop	{r4, pc}

0800c2f6 <quorem>:
 800c2f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	6903      	ldr	r3, [r0, #16]
 800c2fc:	690c      	ldr	r4, [r1, #16]
 800c2fe:	4607      	mov	r7, r0
 800c300:	42a3      	cmp	r3, r4
 800c302:	db7e      	blt.n	800c402 <quorem+0x10c>
 800c304:	3c01      	subs	r4, #1
 800c306:	00a3      	lsls	r3, r4, #2
 800c308:	f100 0514 	add.w	r5, r0, #20
 800c30c:	f101 0814 	add.w	r8, r1, #20
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c31c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c320:	3301      	adds	r3, #1
 800c322:	429a      	cmp	r2, r3
 800c324:	fbb2 f6f3 	udiv	r6, r2, r3
 800c328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c32c:	d32e      	bcc.n	800c38c <quorem+0x96>
 800c32e:	f04f 0a00 	mov.w	sl, #0
 800c332:	46c4      	mov	ip, r8
 800c334:	46ae      	mov	lr, r5
 800c336:	46d3      	mov	fp, sl
 800c338:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c33c:	b298      	uxth	r0, r3
 800c33e:	fb06 a000 	mla	r0, r6, r0, sl
 800c342:	0c1b      	lsrs	r3, r3, #16
 800c344:	0c02      	lsrs	r2, r0, #16
 800c346:	fb06 2303 	mla	r3, r6, r3, r2
 800c34a:	f8de 2000 	ldr.w	r2, [lr]
 800c34e:	b280      	uxth	r0, r0
 800c350:	b292      	uxth	r2, r2
 800c352:	1a12      	subs	r2, r2, r0
 800c354:	445a      	add	r2, fp
 800c356:	f8de 0000 	ldr.w	r0, [lr]
 800c35a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c35e:	b29b      	uxth	r3, r3
 800c360:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c364:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c368:	b292      	uxth	r2, r2
 800c36a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c36e:	45e1      	cmp	r9, ip
 800c370:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c374:	f84e 2b04 	str.w	r2, [lr], #4
 800c378:	d2de      	bcs.n	800c338 <quorem+0x42>
 800c37a:	9b00      	ldr	r3, [sp, #0]
 800c37c:	58eb      	ldr	r3, [r5, r3]
 800c37e:	b92b      	cbnz	r3, 800c38c <quorem+0x96>
 800c380:	9b01      	ldr	r3, [sp, #4]
 800c382:	3b04      	subs	r3, #4
 800c384:	429d      	cmp	r5, r3
 800c386:	461a      	mov	r2, r3
 800c388:	d32f      	bcc.n	800c3ea <quorem+0xf4>
 800c38a:	613c      	str	r4, [r7, #16]
 800c38c:	4638      	mov	r0, r7
 800c38e:	f001 fc11 	bl	800dbb4 <__mcmp>
 800c392:	2800      	cmp	r0, #0
 800c394:	db25      	blt.n	800c3e2 <quorem+0xec>
 800c396:	4629      	mov	r1, r5
 800c398:	2000      	movs	r0, #0
 800c39a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c39e:	f8d1 c000 	ldr.w	ip, [r1]
 800c3a2:	fa1f fe82 	uxth.w	lr, r2
 800c3a6:	fa1f f38c 	uxth.w	r3, ip
 800c3aa:	eba3 030e 	sub.w	r3, r3, lr
 800c3ae:	4403      	add	r3, r0
 800c3b0:	0c12      	lsrs	r2, r2, #16
 800c3b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c3b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3c0:	45c1      	cmp	r9, r8
 800c3c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c3c6:	f841 3b04 	str.w	r3, [r1], #4
 800c3ca:	d2e6      	bcs.n	800c39a <quorem+0xa4>
 800c3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3d4:	b922      	cbnz	r2, 800c3e0 <quorem+0xea>
 800c3d6:	3b04      	subs	r3, #4
 800c3d8:	429d      	cmp	r5, r3
 800c3da:	461a      	mov	r2, r3
 800c3dc:	d30b      	bcc.n	800c3f6 <quorem+0x100>
 800c3de:	613c      	str	r4, [r7, #16]
 800c3e0:	3601      	adds	r6, #1
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	b003      	add	sp, #12
 800c3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ea:	6812      	ldr	r2, [r2, #0]
 800c3ec:	3b04      	subs	r3, #4
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	d1cb      	bne.n	800c38a <quorem+0x94>
 800c3f2:	3c01      	subs	r4, #1
 800c3f4:	e7c6      	b.n	800c384 <quorem+0x8e>
 800c3f6:	6812      	ldr	r2, [r2, #0]
 800c3f8:	3b04      	subs	r3, #4
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	d1ef      	bne.n	800c3de <quorem+0xe8>
 800c3fe:	3c01      	subs	r4, #1
 800c400:	e7ea      	b.n	800c3d8 <quorem+0xe2>
 800c402:	2000      	movs	r0, #0
 800c404:	e7ee      	b.n	800c3e4 <quorem+0xee>
	...

0800c408 <_dtoa_r>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	4614      	mov	r4, r2
 800c40e:	461d      	mov	r5, r3
 800c410:	69c7      	ldr	r7, [r0, #28]
 800c412:	b097      	sub	sp, #92	@ 0x5c
 800c414:	4683      	mov	fp, r0
 800c416:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c41a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c41c:	b97f      	cbnz	r7, 800c43e <_dtoa_r+0x36>
 800c41e:	2010      	movs	r0, #16
 800c420:	f001 f89a 	bl	800d558 <malloc>
 800c424:	4602      	mov	r2, r0
 800c426:	f8cb 001c 	str.w	r0, [fp, #28]
 800c42a:	b920      	cbnz	r0, 800c436 <_dtoa_r+0x2e>
 800c42c:	21ef      	movs	r1, #239	@ 0xef
 800c42e:	4ba8      	ldr	r3, [pc, #672]	@ (800c6d0 <_dtoa_r+0x2c8>)
 800c430:	48a8      	ldr	r0, [pc, #672]	@ (800c6d4 <_dtoa_r+0x2cc>)
 800c432:	f001 fecf 	bl	800e1d4 <__assert_func>
 800c436:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c43a:	6007      	str	r7, [r0, #0]
 800c43c:	60c7      	str	r7, [r0, #12]
 800c43e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c442:	6819      	ldr	r1, [r3, #0]
 800c444:	b159      	cbz	r1, 800c45e <_dtoa_r+0x56>
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	2301      	movs	r3, #1
 800c44a:	4093      	lsls	r3, r2
 800c44c:	604a      	str	r2, [r1, #4]
 800c44e:	608b      	str	r3, [r1, #8]
 800c450:	4658      	mov	r0, fp
 800c452:	f001 f977 	bl	800d744 <_Bfree>
 800c456:	2200      	movs	r2, #0
 800c458:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	1e2b      	subs	r3, r5, #0
 800c460:	bfaf      	iteee	ge
 800c462:	2300      	movge	r3, #0
 800c464:	2201      	movlt	r2, #1
 800c466:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c46a:	9303      	strlt	r3, [sp, #12]
 800c46c:	bfa8      	it	ge
 800c46e:	6033      	strge	r3, [r6, #0]
 800c470:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c474:	4b98      	ldr	r3, [pc, #608]	@ (800c6d8 <_dtoa_r+0x2d0>)
 800c476:	bfb8      	it	lt
 800c478:	6032      	strlt	r2, [r6, #0]
 800c47a:	ea33 0308 	bics.w	r3, r3, r8
 800c47e:	d112      	bne.n	800c4a6 <_dtoa_r+0x9e>
 800c480:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c484:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c486:	6013      	str	r3, [r2, #0]
 800c488:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c48c:	4323      	orrs	r3, r4
 800c48e:	f000 8550 	beq.w	800cf32 <_dtoa_r+0xb2a>
 800c492:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c494:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c6dc <_dtoa_r+0x2d4>
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 8552 	beq.w	800cf42 <_dtoa_r+0xb3a>
 800c49e:	f10a 0303 	add.w	r3, sl, #3
 800c4a2:	f000 bd4c 	b.w	800cf3e <_dtoa_r+0xb36>
 800c4a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c4ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f7f4 fa77 	bl	80009a8 <__aeabi_dcmpeq>
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	b158      	cbz	r0, 800c4d6 <_dtoa_r+0xce>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c4c2:	6013      	str	r3, [r2, #0]
 800c4c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c4c6:	b113      	cbz	r3, 800c4ce <_dtoa_r+0xc6>
 800c4c8:	4b85      	ldr	r3, [pc, #532]	@ (800c6e0 <_dtoa_r+0x2d8>)
 800c4ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c6e4 <_dtoa_r+0x2dc>
 800c4d2:	f000 bd36 	b.w	800cf42 <_dtoa_r+0xb3a>
 800c4d6:	ab14      	add	r3, sp, #80	@ 0x50
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	ab15      	add	r3, sp, #84	@ 0x54
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	4658      	mov	r0, fp
 800c4e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c4e4:	f001 fc16 	bl	800dd14 <__d2b>
 800c4e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c4ec:	4681      	mov	r9, r0
 800c4ee:	2e00      	cmp	r6, #0
 800c4f0:	d077      	beq.n	800c5e2 <_dtoa_r+0x1da>
 800c4f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c4fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c500:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c504:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c508:	9712      	str	r7, [sp, #72]	@ 0x48
 800c50a:	4619      	mov	r1, r3
 800c50c:	2200      	movs	r2, #0
 800c50e:	4b76      	ldr	r3, [pc, #472]	@ (800c6e8 <_dtoa_r+0x2e0>)
 800c510:	f7f3 fe2a 	bl	8000168 <__aeabi_dsub>
 800c514:	a368      	add	r3, pc, #416	@ (adr r3, 800c6b8 <_dtoa_r+0x2b0>)
 800c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51a:	f7f3 ffdd 	bl	80004d8 <__aeabi_dmul>
 800c51e:	a368      	add	r3, pc, #416	@ (adr r3, 800c6c0 <_dtoa_r+0x2b8>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f7f3 fe22 	bl	800016c <__adddf3>
 800c528:	4604      	mov	r4, r0
 800c52a:	4630      	mov	r0, r6
 800c52c:	460d      	mov	r5, r1
 800c52e:	f7f3 ff69 	bl	8000404 <__aeabi_i2d>
 800c532:	a365      	add	r3, pc, #404	@ (adr r3, 800c6c8 <_dtoa_r+0x2c0>)
 800c534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c538:	f7f3 ffce 	bl	80004d8 <__aeabi_dmul>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	4620      	mov	r0, r4
 800c542:	4629      	mov	r1, r5
 800c544:	f7f3 fe12 	bl	800016c <__adddf3>
 800c548:	4604      	mov	r4, r0
 800c54a:	460d      	mov	r5, r1
 800c54c:	f7f4 fa74 	bl	8000a38 <__aeabi_d2iz>
 800c550:	2200      	movs	r2, #0
 800c552:	4607      	mov	r7, r0
 800c554:	2300      	movs	r3, #0
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f4 fa2f 	bl	80009bc <__aeabi_dcmplt>
 800c55e:	b140      	cbz	r0, 800c572 <_dtoa_r+0x16a>
 800c560:	4638      	mov	r0, r7
 800c562:	f7f3 ff4f 	bl	8000404 <__aeabi_i2d>
 800c566:	4622      	mov	r2, r4
 800c568:	462b      	mov	r3, r5
 800c56a:	f7f4 fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800c56e:	b900      	cbnz	r0, 800c572 <_dtoa_r+0x16a>
 800c570:	3f01      	subs	r7, #1
 800c572:	2f16      	cmp	r7, #22
 800c574:	d853      	bhi.n	800c61e <_dtoa_r+0x216>
 800c576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c57a:	4b5c      	ldr	r3, [pc, #368]	@ (800c6ec <_dtoa_r+0x2e4>)
 800c57c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	f7f4 fa1a 	bl	80009bc <__aeabi_dcmplt>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d04a      	beq.n	800c622 <_dtoa_r+0x21a>
 800c58c:	2300      	movs	r3, #0
 800c58e:	3f01      	subs	r7, #1
 800c590:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c592:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c594:	1b9b      	subs	r3, r3, r6
 800c596:	1e5a      	subs	r2, r3, #1
 800c598:	bf46      	itte	mi
 800c59a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c59e:	2300      	movmi	r3, #0
 800c5a0:	f04f 0800 	movpl.w	r8, #0
 800c5a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5a6:	bf48      	it	mi
 800c5a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c5aa:	2f00      	cmp	r7, #0
 800c5ac:	db3b      	blt.n	800c626 <_dtoa_r+0x21e>
 800c5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b0:	970e      	str	r7, [sp, #56]	@ 0x38
 800c5b2:	443b      	add	r3, r7
 800c5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5bc:	2b09      	cmp	r3, #9
 800c5be:	d866      	bhi.n	800c68e <_dtoa_r+0x286>
 800c5c0:	2b05      	cmp	r3, #5
 800c5c2:	bfc4      	itt	gt
 800c5c4:	3b04      	subgt	r3, #4
 800c5c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c5c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5ca:	bfc8      	it	gt
 800c5cc:	2400      	movgt	r4, #0
 800c5ce:	f1a3 0302 	sub.w	r3, r3, #2
 800c5d2:	bfd8      	it	le
 800c5d4:	2401      	movle	r4, #1
 800c5d6:	2b03      	cmp	r3, #3
 800c5d8:	d864      	bhi.n	800c6a4 <_dtoa_r+0x29c>
 800c5da:	e8df f003 	tbb	[pc, r3]
 800c5de:	382b      	.short	0x382b
 800c5e0:	5636      	.short	0x5636
 800c5e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c5e6:	441e      	add	r6, r3
 800c5e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c5ec:	2b20      	cmp	r3, #32
 800c5ee:	bfc1      	itttt	gt
 800c5f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c5f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c5fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c600:	bfd6      	itet	le
 800c602:	f1c3 0320 	rsble	r3, r3, #32
 800c606:	ea48 0003 	orrgt.w	r0, r8, r3
 800c60a:	fa04 f003 	lslle.w	r0, r4, r3
 800c60e:	f7f3 fee9 	bl	80003e4 <__aeabi_ui2d>
 800c612:	2201      	movs	r2, #1
 800c614:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c618:	3e01      	subs	r6, #1
 800c61a:	9212      	str	r2, [sp, #72]	@ 0x48
 800c61c:	e775      	b.n	800c50a <_dtoa_r+0x102>
 800c61e:	2301      	movs	r3, #1
 800c620:	e7b6      	b.n	800c590 <_dtoa_r+0x188>
 800c622:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c624:	e7b5      	b.n	800c592 <_dtoa_r+0x18a>
 800c626:	427b      	negs	r3, r7
 800c628:	930a      	str	r3, [sp, #40]	@ 0x28
 800c62a:	2300      	movs	r3, #0
 800c62c:	eba8 0807 	sub.w	r8, r8, r7
 800c630:	930e      	str	r3, [sp, #56]	@ 0x38
 800c632:	e7c2      	b.n	800c5ba <_dtoa_r+0x1b2>
 800c634:	2300      	movs	r3, #0
 800c636:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c638:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dc35      	bgt.n	800c6aa <_dtoa_r+0x2a2>
 800c63e:	2301      	movs	r3, #1
 800c640:	461a      	mov	r2, r3
 800c642:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c646:	9221      	str	r2, [sp, #132]	@ 0x84
 800c648:	e00b      	b.n	800c662 <_dtoa_r+0x25a>
 800c64a:	2301      	movs	r3, #1
 800c64c:	e7f3      	b.n	800c636 <_dtoa_r+0x22e>
 800c64e:	2300      	movs	r3, #0
 800c650:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c652:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c654:	18fb      	adds	r3, r7, r3
 800c656:	9308      	str	r3, [sp, #32]
 800c658:	3301      	adds	r3, #1
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	9307      	str	r3, [sp, #28]
 800c65e:	bfb8      	it	lt
 800c660:	2301      	movlt	r3, #1
 800c662:	2100      	movs	r1, #0
 800c664:	2204      	movs	r2, #4
 800c666:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c66a:	f102 0514 	add.w	r5, r2, #20
 800c66e:	429d      	cmp	r5, r3
 800c670:	d91f      	bls.n	800c6b2 <_dtoa_r+0x2aa>
 800c672:	6041      	str	r1, [r0, #4]
 800c674:	4658      	mov	r0, fp
 800c676:	f001 f825 	bl	800d6c4 <_Balloc>
 800c67a:	4682      	mov	sl, r0
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d139      	bne.n	800c6f4 <_dtoa_r+0x2ec>
 800c680:	4602      	mov	r2, r0
 800c682:	f240 11af 	movw	r1, #431	@ 0x1af
 800c686:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f0 <_dtoa_r+0x2e8>)
 800c688:	e6d2      	b.n	800c430 <_dtoa_r+0x28>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e7e0      	b.n	800c650 <_dtoa_r+0x248>
 800c68e:	2401      	movs	r4, #1
 800c690:	2300      	movs	r3, #0
 800c692:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c694:	9320      	str	r3, [sp, #128]	@ 0x80
 800c696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c69a:	2200      	movs	r2, #0
 800c69c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c6a0:	2312      	movs	r3, #18
 800c6a2:	e7d0      	b.n	800c646 <_dtoa_r+0x23e>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6a8:	e7f5      	b.n	800c696 <_dtoa_r+0x28e>
 800c6aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c6ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c6b0:	e7d7      	b.n	800c662 <_dtoa_r+0x25a>
 800c6b2:	3101      	adds	r1, #1
 800c6b4:	0052      	lsls	r2, r2, #1
 800c6b6:	e7d8      	b.n	800c66a <_dtoa_r+0x262>
 800c6b8:	636f4361 	.word	0x636f4361
 800c6bc:	3fd287a7 	.word	0x3fd287a7
 800c6c0:	8b60c8b3 	.word	0x8b60c8b3
 800c6c4:	3fc68a28 	.word	0x3fc68a28
 800c6c8:	509f79fb 	.word	0x509f79fb
 800c6cc:	3fd34413 	.word	0x3fd34413
 800c6d0:	0800f325 	.word	0x0800f325
 800c6d4:	0800f33c 	.word	0x0800f33c
 800c6d8:	7ff00000 	.word	0x7ff00000
 800c6dc:	0800f321 	.word	0x0800f321
 800c6e0:	0800f2f5 	.word	0x0800f2f5
 800c6e4:	0800f2f4 	.word	0x0800f2f4
 800c6e8:	3ff80000 	.word	0x3ff80000
 800c6ec:	0800f448 	.word	0x0800f448
 800c6f0:	0800f394 	.word	0x0800f394
 800c6f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c6f8:	6018      	str	r0, [r3, #0]
 800c6fa:	9b07      	ldr	r3, [sp, #28]
 800c6fc:	2b0e      	cmp	r3, #14
 800c6fe:	f200 80a4 	bhi.w	800c84a <_dtoa_r+0x442>
 800c702:	2c00      	cmp	r4, #0
 800c704:	f000 80a1 	beq.w	800c84a <_dtoa_r+0x442>
 800c708:	2f00      	cmp	r7, #0
 800c70a:	dd33      	ble.n	800c774 <_dtoa_r+0x36c>
 800c70c:	4b86      	ldr	r3, [pc, #536]	@ (800c928 <_dtoa_r+0x520>)
 800c70e:	f007 020f 	and.w	r2, r7, #15
 800c712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c716:	05f8      	lsls	r0, r7, #23
 800c718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c71c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c720:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c724:	d516      	bpl.n	800c754 <_dtoa_r+0x34c>
 800c726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c72a:	4b80      	ldr	r3, [pc, #512]	@ (800c92c <_dtoa_r+0x524>)
 800c72c:	2603      	movs	r6, #3
 800c72e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c732:	f7f3 fffb 	bl	800072c <__aeabi_ddiv>
 800c736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c73a:	f004 040f 	and.w	r4, r4, #15
 800c73e:	4d7b      	ldr	r5, [pc, #492]	@ (800c92c <_dtoa_r+0x524>)
 800c740:	b954      	cbnz	r4, 800c758 <_dtoa_r+0x350>
 800c742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c74a:	f7f3 ffef 	bl	800072c <__aeabi_ddiv>
 800c74e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c752:	e028      	b.n	800c7a6 <_dtoa_r+0x39e>
 800c754:	2602      	movs	r6, #2
 800c756:	e7f2      	b.n	800c73e <_dtoa_r+0x336>
 800c758:	07e1      	lsls	r1, r4, #31
 800c75a:	d508      	bpl.n	800c76e <_dtoa_r+0x366>
 800c75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c760:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c764:	f7f3 feb8 	bl	80004d8 <__aeabi_dmul>
 800c768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c76c:	3601      	adds	r6, #1
 800c76e:	1064      	asrs	r4, r4, #1
 800c770:	3508      	adds	r5, #8
 800c772:	e7e5      	b.n	800c740 <_dtoa_r+0x338>
 800c774:	f000 80d2 	beq.w	800c91c <_dtoa_r+0x514>
 800c778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c77c:	427c      	negs	r4, r7
 800c77e:	4b6a      	ldr	r3, [pc, #424]	@ (800c928 <_dtoa_r+0x520>)
 800c780:	f004 020f 	and.w	r2, r4, #15
 800c784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f7f3 fea4 	bl	80004d8 <__aeabi_dmul>
 800c790:	2602      	movs	r6, #2
 800c792:	2300      	movs	r3, #0
 800c794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c798:	4d64      	ldr	r5, [pc, #400]	@ (800c92c <_dtoa_r+0x524>)
 800c79a:	1124      	asrs	r4, r4, #4
 800c79c:	2c00      	cmp	r4, #0
 800c79e:	f040 80b2 	bne.w	800c906 <_dtoa_r+0x4fe>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1d3      	bne.n	800c74e <_dtoa_r+0x346>
 800c7a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c7aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 80b7 	beq.w	800c920 <_dtoa_r+0x518>
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	4b5d      	ldr	r3, [pc, #372]	@ (800c930 <_dtoa_r+0x528>)
 800c7ba:	f7f4 f8ff 	bl	80009bc <__aeabi_dcmplt>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	f000 80ae 	beq.w	800c920 <_dtoa_r+0x518>
 800c7c4:	9b07      	ldr	r3, [sp, #28]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f000 80aa 	beq.w	800c920 <_dtoa_r+0x518>
 800c7cc:	9b08      	ldr	r3, [sp, #32]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	dd37      	ble.n	800c842 <_dtoa_r+0x43a>
 800c7d2:	1e7b      	subs	r3, r7, #1
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4b55      	ldr	r3, [pc, #340]	@ (800c934 <_dtoa_r+0x52c>)
 800c7de:	f7f3 fe7b 	bl	80004d8 <__aeabi_dmul>
 800c7e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7e6:	9c08      	ldr	r4, [sp, #32]
 800c7e8:	3601      	adds	r6, #1
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7f3 fe0a 	bl	8000404 <__aeabi_i2d>
 800c7f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7f4:	f7f3 fe70 	bl	80004d8 <__aeabi_dmul>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	4b4f      	ldr	r3, [pc, #316]	@ (800c938 <_dtoa_r+0x530>)
 800c7fc:	f7f3 fcb6 	bl	800016c <__adddf3>
 800c800:	4605      	mov	r5, r0
 800c802:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c806:	2c00      	cmp	r4, #0
 800c808:	f040 809a 	bne.w	800c940 <_dtoa_r+0x538>
 800c80c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c810:	2200      	movs	r2, #0
 800c812:	4b4a      	ldr	r3, [pc, #296]	@ (800c93c <_dtoa_r+0x534>)
 800c814:	f7f3 fca8 	bl	8000168 <__aeabi_dsub>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c820:	462a      	mov	r2, r5
 800c822:	4633      	mov	r3, r6
 800c824:	f7f4 f8e8 	bl	80009f8 <__aeabi_dcmpgt>
 800c828:	2800      	cmp	r0, #0
 800c82a:	f040 828e 	bne.w	800cd4a <_dtoa_r+0x942>
 800c82e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c832:	462a      	mov	r2, r5
 800c834:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c838:	f7f4 f8c0 	bl	80009bc <__aeabi_dcmplt>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f040 8127 	bne.w	800ca90 <_dtoa_r+0x688>
 800c842:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c846:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c84a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f2c0 8163 	blt.w	800cb18 <_dtoa_r+0x710>
 800c852:	2f0e      	cmp	r7, #14
 800c854:	f300 8160 	bgt.w	800cb18 <_dtoa_r+0x710>
 800c858:	4b33      	ldr	r3, [pc, #204]	@ (800c928 <_dtoa_r+0x520>)
 800c85a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c85e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c862:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c866:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c868:	2b00      	cmp	r3, #0
 800c86a:	da03      	bge.n	800c874 <_dtoa_r+0x46c>
 800c86c:	9b07      	ldr	r3, [sp, #28]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f340 8100 	ble.w	800ca74 <_dtoa_r+0x66c>
 800c874:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c878:	4656      	mov	r6, sl
 800c87a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c87e:	4620      	mov	r0, r4
 800c880:	4629      	mov	r1, r5
 800c882:	f7f3 ff53 	bl	800072c <__aeabi_ddiv>
 800c886:	f7f4 f8d7 	bl	8000a38 <__aeabi_d2iz>
 800c88a:	4680      	mov	r8, r0
 800c88c:	f7f3 fdba 	bl	8000404 <__aeabi_i2d>
 800c890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c894:	f7f3 fe20 	bl	80004d8 <__aeabi_dmul>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 fc62 	bl	8000168 <__aeabi_dsub>
 800c8a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c8a8:	9d07      	ldr	r5, [sp, #28]
 800c8aa:	f806 4b01 	strb.w	r4, [r6], #1
 800c8ae:	eba6 040a 	sub.w	r4, r6, sl
 800c8b2:	42a5      	cmp	r5, r4
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	f040 8116 	bne.w	800cae8 <_dtoa_r+0x6e0>
 800c8bc:	f7f3 fc56 	bl	800016c <__adddf3>
 800c8c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	f7f4 f896 	bl	80009f8 <__aeabi_dcmpgt>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	f040 80f8 	bne.w	800cac2 <_dtoa_r+0x6ba>
 800c8d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	4629      	mov	r1, r5
 800c8da:	f7f4 f865 	bl	80009a8 <__aeabi_dcmpeq>
 800c8de:	b118      	cbz	r0, 800c8e8 <_dtoa_r+0x4e0>
 800c8e0:	f018 0f01 	tst.w	r8, #1
 800c8e4:	f040 80ed 	bne.w	800cac2 <_dtoa_r+0x6ba>
 800c8e8:	4649      	mov	r1, r9
 800c8ea:	4658      	mov	r0, fp
 800c8ec:	f000 ff2a 	bl	800d744 <_Bfree>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	7033      	strb	r3, [r6, #0]
 800c8f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c8f6:	3701      	adds	r7, #1
 800c8f8:	601f      	str	r7, [r3, #0]
 800c8fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 8320 	beq.w	800cf42 <_dtoa_r+0xb3a>
 800c902:	601e      	str	r6, [r3, #0]
 800c904:	e31d      	b.n	800cf42 <_dtoa_r+0xb3a>
 800c906:	07e2      	lsls	r2, r4, #31
 800c908:	d505      	bpl.n	800c916 <_dtoa_r+0x50e>
 800c90a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c90e:	f7f3 fde3 	bl	80004d8 <__aeabi_dmul>
 800c912:	2301      	movs	r3, #1
 800c914:	3601      	adds	r6, #1
 800c916:	1064      	asrs	r4, r4, #1
 800c918:	3508      	adds	r5, #8
 800c91a:	e73f      	b.n	800c79c <_dtoa_r+0x394>
 800c91c:	2602      	movs	r6, #2
 800c91e:	e742      	b.n	800c7a6 <_dtoa_r+0x39e>
 800c920:	9c07      	ldr	r4, [sp, #28]
 800c922:	9704      	str	r7, [sp, #16]
 800c924:	e761      	b.n	800c7ea <_dtoa_r+0x3e2>
 800c926:	bf00      	nop
 800c928:	0800f448 	.word	0x0800f448
 800c92c:	0800f420 	.word	0x0800f420
 800c930:	3ff00000 	.word	0x3ff00000
 800c934:	40240000 	.word	0x40240000
 800c938:	401c0000 	.word	0x401c0000
 800c93c:	40140000 	.word	0x40140000
 800c940:	4b70      	ldr	r3, [pc, #448]	@ (800cb04 <_dtoa_r+0x6fc>)
 800c942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c944:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c948:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c94c:	4454      	add	r4, sl
 800c94e:	2900      	cmp	r1, #0
 800c950:	d045      	beq.n	800c9de <_dtoa_r+0x5d6>
 800c952:	2000      	movs	r0, #0
 800c954:	496c      	ldr	r1, [pc, #432]	@ (800cb08 <_dtoa_r+0x700>)
 800c956:	f7f3 fee9 	bl	800072c <__aeabi_ddiv>
 800c95a:	4633      	mov	r3, r6
 800c95c:	462a      	mov	r2, r5
 800c95e:	f7f3 fc03 	bl	8000168 <__aeabi_dsub>
 800c962:	4656      	mov	r6, sl
 800c964:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c96c:	f7f4 f864 	bl	8000a38 <__aeabi_d2iz>
 800c970:	4605      	mov	r5, r0
 800c972:	f7f3 fd47 	bl	8000404 <__aeabi_i2d>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c97e:	f7f3 fbf3 	bl	8000168 <__aeabi_dsub>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	3530      	adds	r5, #48	@ 0x30
 800c988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c98c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c990:	f806 5b01 	strb.w	r5, [r6], #1
 800c994:	f7f4 f812 	bl	80009bc <__aeabi_dcmplt>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d163      	bne.n	800ca64 <_dtoa_r+0x65c>
 800c99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	495a      	ldr	r1, [pc, #360]	@ (800cb0c <_dtoa_r+0x704>)
 800c9a4:	f7f3 fbe0 	bl	8000168 <__aeabi_dsub>
 800c9a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9ac:	f7f4 f806 	bl	80009bc <__aeabi_dcmplt>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	f040 8087 	bne.w	800cac4 <_dtoa_r+0x6bc>
 800c9b6:	42a6      	cmp	r6, r4
 800c9b8:	f43f af43 	beq.w	800c842 <_dtoa_r+0x43a>
 800c9bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4b53      	ldr	r3, [pc, #332]	@ (800cb10 <_dtoa_r+0x708>)
 800c9c4:	f7f3 fd88 	bl	80004d8 <__aeabi_dmul>
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9d2:	4b4f      	ldr	r3, [pc, #316]	@ (800cb10 <_dtoa_r+0x708>)
 800c9d4:	f7f3 fd80 	bl	80004d8 <__aeabi_dmul>
 800c9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9dc:	e7c4      	b.n	800c968 <_dtoa_r+0x560>
 800c9de:	4631      	mov	r1, r6
 800c9e0:	4628      	mov	r0, r5
 800c9e2:	f7f3 fd79 	bl	80004d8 <__aeabi_dmul>
 800c9e6:	4656      	mov	r6, sl
 800c9e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9f2:	f7f4 f821 	bl	8000a38 <__aeabi_d2iz>
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	f7f3 fd04 	bl	8000404 <__aeabi_i2d>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca04:	f7f3 fbb0 	bl	8000168 <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	3530      	adds	r5, #48	@ 0x30
 800ca0e:	f806 5b01 	strb.w	r5, [r6], #1
 800ca12:	42a6      	cmp	r6, r4
 800ca14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	d124      	bne.n	800ca68 <_dtoa_r+0x660>
 800ca1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca22:	4b39      	ldr	r3, [pc, #228]	@ (800cb08 <_dtoa_r+0x700>)
 800ca24:	f7f3 fba2 	bl	800016c <__adddf3>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca30:	f7f3 ffe2 	bl	80009f8 <__aeabi_dcmpgt>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d145      	bne.n	800cac4 <_dtoa_r+0x6bc>
 800ca38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca3c:	2000      	movs	r0, #0
 800ca3e:	4932      	ldr	r1, [pc, #200]	@ (800cb08 <_dtoa_r+0x700>)
 800ca40:	f7f3 fb92 	bl	8000168 <__aeabi_dsub>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca4c:	f7f3 ffb6 	bl	80009bc <__aeabi_dcmplt>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	f43f aef6 	beq.w	800c842 <_dtoa_r+0x43a>
 800ca56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ca58:	1e73      	subs	r3, r6, #1
 800ca5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca60:	2b30      	cmp	r3, #48	@ 0x30
 800ca62:	d0f8      	beq.n	800ca56 <_dtoa_r+0x64e>
 800ca64:	9f04      	ldr	r7, [sp, #16]
 800ca66:	e73f      	b.n	800c8e8 <_dtoa_r+0x4e0>
 800ca68:	4b29      	ldr	r3, [pc, #164]	@ (800cb10 <_dtoa_r+0x708>)
 800ca6a:	f7f3 fd35 	bl	80004d8 <__aeabi_dmul>
 800ca6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca72:	e7bc      	b.n	800c9ee <_dtoa_r+0x5e6>
 800ca74:	d10c      	bne.n	800ca90 <_dtoa_r+0x688>
 800ca76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	4b25      	ldr	r3, [pc, #148]	@ (800cb14 <_dtoa_r+0x70c>)
 800ca7e:	f7f3 fd2b 	bl	80004d8 <__aeabi_dmul>
 800ca82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca86:	f7f3 ffad 	bl	80009e4 <__aeabi_dcmpge>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	f000 815b 	beq.w	800cd46 <_dtoa_r+0x93e>
 800ca90:	2400      	movs	r4, #0
 800ca92:	4625      	mov	r5, r4
 800ca94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca96:	4656      	mov	r6, sl
 800ca98:	43db      	mvns	r3, r3
 800ca9a:	9304      	str	r3, [sp, #16]
 800ca9c:	2700      	movs	r7, #0
 800ca9e:	4621      	mov	r1, r4
 800caa0:	4658      	mov	r0, fp
 800caa2:	f000 fe4f 	bl	800d744 <_Bfree>
 800caa6:	2d00      	cmp	r5, #0
 800caa8:	d0dc      	beq.n	800ca64 <_dtoa_r+0x65c>
 800caaa:	b12f      	cbz	r7, 800cab8 <_dtoa_r+0x6b0>
 800caac:	42af      	cmp	r7, r5
 800caae:	d003      	beq.n	800cab8 <_dtoa_r+0x6b0>
 800cab0:	4639      	mov	r1, r7
 800cab2:	4658      	mov	r0, fp
 800cab4:	f000 fe46 	bl	800d744 <_Bfree>
 800cab8:	4629      	mov	r1, r5
 800caba:	4658      	mov	r0, fp
 800cabc:	f000 fe42 	bl	800d744 <_Bfree>
 800cac0:	e7d0      	b.n	800ca64 <_dtoa_r+0x65c>
 800cac2:	9704      	str	r7, [sp, #16]
 800cac4:	4633      	mov	r3, r6
 800cac6:	461e      	mov	r6, r3
 800cac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cacc:	2a39      	cmp	r2, #57	@ 0x39
 800cace:	d107      	bne.n	800cae0 <_dtoa_r+0x6d8>
 800cad0:	459a      	cmp	sl, r3
 800cad2:	d1f8      	bne.n	800cac6 <_dtoa_r+0x6be>
 800cad4:	9a04      	ldr	r2, [sp, #16]
 800cad6:	3201      	adds	r2, #1
 800cad8:	9204      	str	r2, [sp, #16]
 800cada:	2230      	movs	r2, #48	@ 0x30
 800cadc:	f88a 2000 	strb.w	r2, [sl]
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	3201      	adds	r2, #1
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	e7bd      	b.n	800ca64 <_dtoa_r+0x65c>
 800cae8:	2200      	movs	r2, #0
 800caea:	4b09      	ldr	r3, [pc, #36]	@ (800cb10 <_dtoa_r+0x708>)
 800caec:	f7f3 fcf4 	bl	80004d8 <__aeabi_dmul>
 800caf0:	2200      	movs	r2, #0
 800caf2:	2300      	movs	r3, #0
 800caf4:	4604      	mov	r4, r0
 800caf6:	460d      	mov	r5, r1
 800caf8:	f7f3 ff56 	bl	80009a8 <__aeabi_dcmpeq>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	f43f aebc 	beq.w	800c87a <_dtoa_r+0x472>
 800cb02:	e6f1      	b.n	800c8e8 <_dtoa_r+0x4e0>
 800cb04:	0800f448 	.word	0x0800f448
 800cb08:	3fe00000 	.word	0x3fe00000
 800cb0c:	3ff00000 	.word	0x3ff00000
 800cb10:	40240000 	.word	0x40240000
 800cb14:	40140000 	.word	0x40140000
 800cb18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	f000 80db 	beq.w	800ccd6 <_dtoa_r+0x8ce>
 800cb20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cb22:	2a01      	cmp	r2, #1
 800cb24:	f300 80bf 	bgt.w	800cca6 <_dtoa_r+0x89e>
 800cb28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	f000 80b7 	beq.w	800cc9e <_dtoa_r+0x896>
 800cb30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cb34:	4646      	mov	r6, r8
 800cb36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	441a      	add	r2, r3
 800cb3e:	4658      	mov	r0, fp
 800cb40:	4498      	add	r8, r3
 800cb42:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb44:	f000 feb2 	bl	800d8ac <__i2b>
 800cb48:	4605      	mov	r5, r0
 800cb4a:	b15e      	cbz	r6, 800cb64 <_dtoa_r+0x75c>
 800cb4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	dd08      	ble.n	800cb64 <_dtoa_r+0x75c>
 800cb52:	42b3      	cmp	r3, r6
 800cb54:	bfa8      	it	ge
 800cb56:	4633      	movge	r3, r6
 800cb58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb5a:	eba8 0803 	sub.w	r8, r8, r3
 800cb5e:	1af6      	subs	r6, r6, r3
 800cb60:	1ad3      	subs	r3, r2, r3
 800cb62:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb66:	b1f3      	cbz	r3, 800cba6 <_dtoa_r+0x79e>
 800cb68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80b7 	beq.w	800ccde <_dtoa_r+0x8d6>
 800cb70:	b18c      	cbz	r4, 800cb96 <_dtoa_r+0x78e>
 800cb72:	4629      	mov	r1, r5
 800cb74:	4622      	mov	r2, r4
 800cb76:	4658      	mov	r0, fp
 800cb78:	f000 ff56 	bl	800da28 <__pow5mult>
 800cb7c:	464a      	mov	r2, r9
 800cb7e:	4601      	mov	r1, r0
 800cb80:	4605      	mov	r5, r0
 800cb82:	4658      	mov	r0, fp
 800cb84:	f000 fea8 	bl	800d8d8 <__multiply>
 800cb88:	4649      	mov	r1, r9
 800cb8a:	9004      	str	r0, [sp, #16]
 800cb8c:	4658      	mov	r0, fp
 800cb8e:	f000 fdd9 	bl	800d744 <_Bfree>
 800cb92:	9b04      	ldr	r3, [sp, #16]
 800cb94:	4699      	mov	r9, r3
 800cb96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb98:	1b1a      	subs	r2, r3, r4
 800cb9a:	d004      	beq.n	800cba6 <_dtoa_r+0x79e>
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	4658      	mov	r0, fp
 800cba0:	f000 ff42 	bl	800da28 <__pow5mult>
 800cba4:	4681      	mov	r9, r0
 800cba6:	2101      	movs	r1, #1
 800cba8:	4658      	mov	r0, fp
 800cbaa:	f000 fe7f 	bl	800d8ac <__i2b>
 800cbae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	f000 81c9 	beq.w	800cf4a <_dtoa_r+0xb42>
 800cbb8:	461a      	mov	r2, r3
 800cbba:	4601      	mov	r1, r0
 800cbbc:	4658      	mov	r0, fp
 800cbbe:	f000 ff33 	bl	800da28 <__pow5mult>
 800cbc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	f300 808f 	bgt.w	800ccea <_dtoa_r+0x8e2>
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	f040 8087 	bne.w	800cce2 <_dtoa_r+0x8da>
 800cbd4:	9b03      	ldr	r3, [sp, #12]
 800cbd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f040 8083 	bne.w	800cce6 <_dtoa_r+0x8de>
 800cbe0:	9b03      	ldr	r3, [sp, #12]
 800cbe2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cbe6:	0d1b      	lsrs	r3, r3, #20
 800cbe8:	051b      	lsls	r3, r3, #20
 800cbea:	b12b      	cbz	r3, 800cbf8 <_dtoa_r+0x7f0>
 800cbec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbee:	f108 0801 	add.w	r8, r8, #1
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 81aa 	beq.w	800cf56 <_dtoa_r+0xb4e>
 800cc02:	6923      	ldr	r3, [r4, #16]
 800cc04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc08:	6918      	ldr	r0, [r3, #16]
 800cc0a:	f000 fe03 	bl	800d814 <__hi0bits>
 800cc0e:	f1c0 0020 	rsb	r0, r0, #32
 800cc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc14:	4418      	add	r0, r3
 800cc16:	f010 001f 	ands.w	r0, r0, #31
 800cc1a:	d071      	beq.n	800cd00 <_dtoa_r+0x8f8>
 800cc1c:	f1c0 0320 	rsb	r3, r0, #32
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	dd65      	ble.n	800ccf0 <_dtoa_r+0x8e8>
 800cc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc26:	f1c0 001c 	rsb	r0, r0, #28
 800cc2a:	4403      	add	r3, r0
 800cc2c:	4480      	add	r8, r0
 800cc2e:	4406      	add	r6, r0
 800cc30:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc32:	f1b8 0f00 	cmp.w	r8, #0
 800cc36:	dd05      	ble.n	800cc44 <_dtoa_r+0x83c>
 800cc38:	4649      	mov	r1, r9
 800cc3a:	4642      	mov	r2, r8
 800cc3c:	4658      	mov	r0, fp
 800cc3e:	f000 ff4d 	bl	800dadc <__lshift>
 800cc42:	4681      	mov	r9, r0
 800cc44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	dd05      	ble.n	800cc56 <_dtoa_r+0x84e>
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4658      	mov	r0, fp
 800cc50:	f000 ff44 	bl	800dadc <__lshift>
 800cc54:	4604      	mov	r4, r0
 800cc56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d053      	beq.n	800cd04 <_dtoa_r+0x8fc>
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	4648      	mov	r0, r9
 800cc60:	f000 ffa8 	bl	800dbb4 <__mcmp>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	da4d      	bge.n	800cd04 <_dtoa_r+0x8fc>
 800cc68:	1e7b      	subs	r3, r7, #1
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	9304      	str	r3, [sp, #16]
 800cc6e:	220a      	movs	r2, #10
 800cc70:	2300      	movs	r3, #0
 800cc72:	4658      	mov	r0, fp
 800cc74:	f000 fd88 	bl	800d788 <__multadd>
 800cc78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc7a:	4681      	mov	r9, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f000 816c 	beq.w	800cf5a <_dtoa_r+0xb52>
 800cc82:	2300      	movs	r3, #0
 800cc84:	4629      	mov	r1, r5
 800cc86:	220a      	movs	r2, #10
 800cc88:	4658      	mov	r0, fp
 800cc8a:	f000 fd7d 	bl	800d788 <__multadd>
 800cc8e:	9b08      	ldr	r3, [sp, #32]
 800cc90:	4605      	mov	r5, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	dc61      	bgt.n	800cd5a <_dtoa_r+0x952>
 800cc96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	dc3b      	bgt.n	800cd14 <_dtoa_r+0x90c>
 800cc9c:	e05d      	b.n	800cd5a <_dtoa_r+0x952>
 800cc9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cca0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cca4:	e746      	b.n	800cb34 <_dtoa_r+0x72c>
 800cca6:	9b07      	ldr	r3, [sp, #28]
 800cca8:	1e5c      	subs	r4, r3, #1
 800ccaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccac:	42a3      	cmp	r3, r4
 800ccae:	bfbf      	itttt	lt
 800ccb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ccb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800ccb4:	1ae3      	sublt	r3, r4, r3
 800ccb6:	18d2      	addlt	r2, r2, r3
 800ccb8:	bfa8      	it	ge
 800ccba:	1b1c      	subge	r4, r3, r4
 800ccbc:	9b07      	ldr	r3, [sp, #28]
 800ccbe:	bfbe      	ittt	lt
 800ccc0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ccc2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800ccc4:	2400      	movlt	r4, #0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	bfb5      	itete	lt
 800ccca:	eba8 0603 	sublt.w	r6, r8, r3
 800ccce:	4646      	movge	r6, r8
 800ccd0:	2300      	movlt	r3, #0
 800ccd2:	9b07      	ldrge	r3, [sp, #28]
 800ccd4:	e730      	b.n	800cb38 <_dtoa_r+0x730>
 800ccd6:	4646      	mov	r6, r8
 800ccd8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ccda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ccdc:	e735      	b.n	800cb4a <_dtoa_r+0x742>
 800ccde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cce0:	e75c      	b.n	800cb9c <_dtoa_r+0x794>
 800cce2:	2300      	movs	r3, #0
 800cce4:	e788      	b.n	800cbf8 <_dtoa_r+0x7f0>
 800cce6:	9b02      	ldr	r3, [sp, #8]
 800cce8:	e786      	b.n	800cbf8 <_dtoa_r+0x7f0>
 800ccea:	2300      	movs	r3, #0
 800ccec:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccee:	e788      	b.n	800cc02 <_dtoa_r+0x7fa>
 800ccf0:	d09f      	beq.n	800cc32 <_dtoa_r+0x82a>
 800ccf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccf4:	331c      	adds	r3, #28
 800ccf6:	441a      	add	r2, r3
 800ccf8:	4498      	add	r8, r3
 800ccfa:	441e      	add	r6, r3
 800ccfc:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccfe:	e798      	b.n	800cc32 <_dtoa_r+0x82a>
 800cd00:	4603      	mov	r3, r0
 800cd02:	e7f6      	b.n	800ccf2 <_dtoa_r+0x8ea>
 800cd04:	9b07      	ldr	r3, [sp, #28]
 800cd06:	9704      	str	r7, [sp, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dc20      	bgt.n	800cd4e <_dtoa_r+0x946>
 800cd0c:	9308      	str	r3, [sp, #32]
 800cd0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	dd1e      	ble.n	800cd52 <_dtoa_r+0x94a>
 800cd14:	9b08      	ldr	r3, [sp, #32]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f47f aebc 	bne.w	800ca94 <_dtoa_r+0x68c>
 800cd1c:	4621      	mov	r1, r4
 800cd1e:	2205      	movs	r2, #5
 800cd20:	4658      	mov	r0, fp
 800cd22:	f000 fd31 	bl	800d788 <__multadd>
 800cd26:	4601      	mov	r1, r0
 800cd28:	4604      	mov	r4, r0
 800cd2a:	4648      	mov	r0, r9
 800cd2c:	f000 ff42 	bl	800dbb4 <__mcmp>
 800cd30:	2800      	cmp	r0, #0
 800cd32:	f77f aeaf 	ble.w	800ca94 <_dtoa_r+0x68c>
 800cd36:	2331      	movs	r3, #49	@ 0x31
 800cd38:	4656      	mov	r6, sl
 800cd3a:	f806 3b01 	strb.w	r3, [r6], #1
 800cd3e:	9b04      	ldr	r3, [sp, #16]
 800cd40:	3301      	adds	r3, #1
 800cd42:	9304      	str	r3, [sp, #16]
 800cd44:	e6aa      	b.n	800ca9c <_dtoa_r+0x694>
 800cd46:	9c07      	ldr	r4, [sp, #28]
 800cd48:	9704      	str	r7, [sp, #16]
 800cd4a:	4625      	mov	r5, r4
 800cd4c:	e7f3      	b.n	800cd36 <_dtoa_r+0x92e>
 800cd4e:	9b07      	ldr	r3, [sp, #28]
 800cd50:	9308      	str	r3, [sp, #32]
 800cd52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f000 8104 	beq.w	800cf62 <_dtoa_r+0xb5a>
 800cd5a:	2e00      	cmp	r6, #0
 800cd5c:	dd05      	ble.n	800cd6a <_dtoa_r+0x962>
 800cd5e:	4629      	mov	r1, r5
 800cd60:	4632      	mov	r2, r6
 800cd62:	4658      	mov	r0, fp
 800cd64:	f000 feba 	bl	800dadc <__lshift>
 800cd68:	4605      	mov	r5, r0
 800cd6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d05a      	beq.n	800ce26 <_dtoa_r+0xa1e>
 800cd70:	4658      	mov	r0, fp
 800cd72:	6869      	ldr	r1, [r5, #4]
 800cd74:	f000 fca6 	bl	800d6c4 <_Balloc>
 800cd78:	4606      	mov	r6, r0
 800cd7a:	b928      	cbnz	r0, 800cd88 <_dtoa_r+0x980>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd82:	4b83      	ldr	r3, [pc, #524]	@ (800cf90 <_dtoa_r+0xb88>)
 800cd84:	f7ff bb54 	b.w	800c430 <_dtoa_r+0x28>
 800cd88:	692a      	ldr	r2, [r5, #16]
 800cd8a:	f105 010c 	add.w	r1, r5, #12
 800cd8e:	3202      	adds	r2, #2
 800cd90:	0092      	lsls	r2, r2, #2
 800cd92:	300c      	adds	r0, #12
 800cd94:	f001 fa10 	bl	800e1b8 <memcpy>
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4658      	mov	r0, fp
 800cd9e:	f000 fe9d 	bl	800dadc <__lshift>
 800cda2:	462f      	mov	r7, r5
 800cda4:	4605      	mov	r5, r0
 800cda6:	f10a 0301 	add.w	r3, sl, #1
 800cdaa:	9307      	str	r3, [sp, #28]
 800cdac:	9b08      	ldr	r3, [sp, #32]
 800cdae:	4453      	add	r3, sl
 800cdb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdb2:	9b02      	ldr	r3, [sp, #8]
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdba:	9b07      	ldr	r3, [sp, #28]
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4648      	mov	r0, r9
 800cdc2:	9302      	str	r3, [sp, #8]
 800cdc4:	f7ff fa97 	bl	800c2f6 <quorem>
 800cdc8:	4639      	mov	r1, r7
 800cdca:	9008      	str	r0, [sp, #32]
 800cdcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cdd0:	4648      	mov	r0, r9
 800cdd2:	f000 feef 	bl	800dbb4 <__mcmp>
 800cdd6:	462a      	mov	r2, r5
 800cdd8:	9009      	str	r0, [sp, #36]	@ 0x24
 800cdda:	4621      	mov	r1, r4
 800cddc:	4658      	mov	r0, fp
 800cdde:	f000 ff05 	bl	800dbec <__mdiff>
 800cde2:	68c2      	ldr	r2, [r0, #12]
 800cde4:	4606      	mov	r6, r0
 800cde6:	bb02      	cbnz	r2, 800ce2a <_dtoa_r+0xa22>
 800cde8:	4601      	mov	r1, r0
 800cdea:	4648      	mov	r0, r9
 800cdec:	f000 fee2 	bl	800dbb4 <__mcmp>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4658      	mov	r0, fp
 800cdf6:	920c      	str	r2, [sp, #48]	@ 0x30
 800cdf8:	f000 fca4 	bl	800d744 <_Bfree>
 800cdfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cdfe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ce00:	9e07      	ldr	r6, [sp, #28]
 800ce02:	ea43 0102 	orr.w	r1, r3, r2
 800ce06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce08:	4319      	orrs	r1, r3
 800ce0a:	d110      	bne.n	800ce2e <_dtoa_r+0xa26>
 800ce0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce10:	d029      	beq.n	800ce66 <_dtoa_r+0xa5e>
 800ce12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dd02      	ble.n	800ce1e <_dtoa_r+0xa16>
 800ce18:	9b08      	ldr	r3, [sp, #32]
 800ce1a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ce1e:	9b02      	ldr	r3, [sp, #8]
 800ce20:	f883 8000 	strb.w	r8, [r3]
 800ce24:	e63b      	b.n	800ca9e <_dtoa_r+0x696>
 800ce26:	4628      	mov	r0, r5
 800ce28:	e7bb      	b.n	800cda2 <_dtoa_r+0x99a>
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	e7e1      	b.n	800cdf2 <_dtoa_r+0x9ea>
 800ce2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	db04      	blt.n	800ce3e <_dtoa_r+0xa36>
 800ce34:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ce36:	430b      	orrs	r3, r1
 800ce38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce3a:	430b      	orrs	r3, r1
 800ce3c:	d120      	bne.n	800ce80 <_dtoa_r+0xa78>
 800ce3e:	2a00      	cmp	r2, #0
 800ce40:	dded      	ble.n	800ce1e <_dtoa_r+0xa16>
 800ce42:	4649      	mov	r1, r9
 800ce44:	2201      	movs	r2, #1
 800ce46:	4658      	mov	r0, fp
 800ce48:	f000 fe48 	bl	800dadc <__lshift>
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4681      	mov	r9, r0
 800ce50:	f000 feb0 	bl	800dbb4 <__mcmp>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dc03      	bgt.n	800ce60 <_dtoa_r+0xa58>
 800ce58:	d1e1      	bne.n	800ce1e <_dtoa_r+0xa16>
 800ce5a:	f018 0f01 	tst.w	r8, #1
 800ce5e:	d0de      	beq.n	800ce1e <_dtoa_r+0xa16>
 800ce60:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce64:	d1d8      	bne.n	800ce18 <_dtoa_r+0xa10>
 800ce66:	2339      	movs	r3, #57	@ 0x39
 800ce68:	9a02      	ldr	r2, [sp, #8]
 800ce6a:	7013      	strb	r3, [r2, #0]
 800ce6c:	4633      	mov	r3, r6
 800ce6e:	461e      	mov	r6, r3
 800ce70:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce74:	3b01      	subs	r3, #1
 800ce76:	2a39      	cmp	r2, #57	@ 0x39
 800ce78:	d052      	beq.n	800cf20 <_dtoa_r+0xb18>
 800ce7a:	3201      	adds	r2, #1
 800ce7c:	701a      	strb	r2, [r3, #0]
 800ce7e:	e60e      	b.n	800ca9e <_dtoa_r+0x696>
 800ce80:	2a00      	cmp	r2, #0
 800ce82:	dd07      	ble.n	800ce94 <_dtoa_r+0xa8c>
 800ce84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce88:	d0ed      	beq.n	800ce66 <_dtoa_r+0xa5e>
 800ce8a:	9a02      	ldr	r2, [sp, #8]
 800ce8c:	f108 0301 	add.w	r3, r8, #1
 800ce90:	7013      	strb	r3, [r2, #0]
 800ce92:	e604      	b.n	800ca9e <_dtoa_r+0x696>
 800ce94:	9b07      	ldr	r3, [sp, #28]
 800ce96:	9a07      	ldr	r2, [sp, #28]
 800ce98:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ce9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d028      	beq.n	800cef4 <_dtoa_r+0xaec>
 800cea2:	4649      	mov	r1, r9
 800cea4:	2300      	movs	r3, #0
 800cea6:	220a      	movs	r2, #10
 800cea8:	4658      	mov	r0, fp
 800ceaa:	f000 fc6d 	bl	800d788 <__multadd>
 800ceae:	42af      	cmp	r7, r5
 800ceb0:	4681      	mov	r9, r0
 800ceb2:	f04f 0300 	mov.w	r3, #0
 800ceb6:	f04f 020a 	mov.w	r2, #10
 800ceba:	4639      	mov	r1, r7
 800cebc:	4658      	mov	r0, fp
 800cebe:	d107      	bne.n	800ced0 <_dtoa_r+0xac8>
 800cec0:	f000 fc62 	bl	800d788 <__multadd>
 800cec4:	4607      	mov	r7, r0
 800cec6:	4605      	mov	r5, r0
 800cec8:	9b07      	ldr	r3, [sp, #28]
 800ceca:	3301      	adds	r3, #1
 800cecc:	9307      	str	r3, [sp, #28]
 800cece:	e774      	b.n	800cdba <_dtoa_r+0x9b2>
 800ced0:	f000 fc5a 	bl	800d788 <__multadd>
 800ced4:	4629      	mov	r1, r5
 800ced6:	4607      	mov	r7, r0
 800ced8:	2300      	movs	r3, #0
 800ceda:	220a      	movs	r2, #10
 800cedc:	4658      	mov	r0, fp
 800cede:	f000 fc53 	bl	800d788 <__multadd>
 800cee2:	4605      	mov	r5, r0
 800cee4:	e7f0      	b.n	800cec8 <_dtoa_r+0xac0>
 800cee6:	9b08      	ldr	r3, [sp, #32]
 800cee8:	2700      	movs	r7, #0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	bfcc      	ite	gt
 800ceee:	461e      	movgt	r6, r3
 800cef0:	2601      	movle	r6, #1
 800cef2:	4456      	add	r6, sl
 800cef4:	4649      	mov	r1, r9
 800cef6:	2201      	movs	r2, #1
 800cef8:	4658      	mov	r0, fp
 800cefa:	f000 fdef 	bl	800dadc <__lshift>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4681      	mov	r9, r0
 800cf02:	f000 fe57 	bl	800dbb4 <__mcmp>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	dcb0      	bgt.n	800ce6c <_dtoa_r+0xa64>
 800cf0a:	d102      	bne.n	800cf12 <_dtoa_r+0xb0a>
 800cf0c:	f018 0f01 	tst.w	r8, #1
 800cf10:	d1ac      	bne.n	800ce6c <_dtoa_r+0xa64>
 800cf12:	4633      	mov	r3, r6
 800cf14:	461e      	mov	r6, r3
 800cf16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf1a:	2a30      	cmp	r2, #48	@ 0x30
 800cf1c:	d0fa      	beq.n	800cf14 <_dtoa_r+0xb0c>
 800cf1e:	e5be      	b.n	800ca9e <_dtoa_r+0x696>
 800cf20:	459a      	cmp	sl, r3
 800cf22:	d1a4      	bne.n	800ce6e <_dtoa_r+0xa66>
 800cf24:	9b04      	ldr	r3, [sp, #16]
 800cf26:	3301      	adds	r3, #1
 800cf28:	9304      	str	r3, [sp, #16]
 800cf2a:	2331      	movs	r3, #49	@ 0x31
 800cf2c:	f88a 3000 	strb.w	r3, [sl]
 800cf30:	e5b5      	b.n	800ca9e <_dtoa_r+0x696>
 800cf32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cf34:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cf94 <_dtoa_r+0xb8c>
 800cf38:	b11b      	cbz	r3, 800cf42 <_dtoa_r+0xb3a>
 800cf3a:	f10a 0308 	add.w	r3, sl, #8
 800cf3e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	4650      	mov	r0, sl
 800cf44:	b017      	add	sp, #92	@ 0x5c
 800cf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	f77f ae3d 	ble.w	800cbcc <_dtoa_r+0x7c4>
 800cf52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf54:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf56:	2001      	movs	r0, #1
 800cf58:	e65b      	b.n	800cc12 <_dtoa_r+0x80a>
 800cf5a:	9b08      	ldr	r3, [sp, #32]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f77f aed6 	ble.w	800cd0e <_dtoa_r+0x906>
 800cf62:	4656      	mov	r6, sl
 800cf64:	4621      	mov	r1, r4
 800cf66:	4648      	mov	r0, r9
 800cf68:	f7ff f9c5 	bl	800c2f6 <quorem>
 800cf6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf70:	9b08      	ldr	r3, [sp, #32]
 800cf72:	f806 8b01 	strb.w	r8, [r6], #1
 800cf76:	eba6 020a 	sub.w	r2, r6, sl
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	ddb3      	ble.n	800cee6 <_dtoa_r+0xade>
 800cf7e:	4649      	mov	r1, r9
 800cf80:	2300      	movs	r3, #0
 800cf82:	220a      	movs	r2, #10
 800cf84:	4658      	mov	r0, fp
 800cf86:	f000 fbff 	bl	800d788 <__multadd>
 800cf8a:	4681      	mov	r9, r0
 800cf8c:	e7ea      	b.n	800cf64 <_dtoa_r+0xb5c>
 800cf8e:	bf00      	nop
 800cf90:	0800f394 	.word	0x0800f394
 800cf94:	0800f318 	.word	0x0800f318

0800cf98 <_free_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	2900      	cmp	r1, #0
 800cf9e:	d040      	beq.n	800d022 <_free_r+0x8a>
 800cfa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfa4:	1f0c      	subs	r4, r1, #4
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	bfb8      	it	lt
 800cfaa:	18e4      	addlt	r4, r4, r3
 800cfac:	f000 fb7e 	bl	800d6ac <__malloc_lock>
 800cfb0:	4a1c      	ldr	r2, [pc, #112]	@ (800d024 <_free_r+0x8c>)
 800cfb2:	6813      	ldr	r3, [r2, #0]
 800cfb4:	b933      	cbnz	r3, 800cfc4 <_free_r+0x2c>
 800cfb6:	6063      	str	r3, [r4, #4]
 800cfb8:	6014      	str	r4, [r2, #0]
 800cfba:	4628      	mov	r0, r5
 800cfbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc0:	f000 bb7a 	b.w	800d6b8 <__malloc_unlock>
 800cfc4:	42a3      	cmp	r3, r4
 800cfc6:	d908      	bls.n	800cfda <_free_r+0x42>
 800cfc8:	6820      	ldr	r0, [r4, #0]
 800cfca:	1821      	adds	r1, r4, r0
 800cfcc:	428b      	cmp	r3, r1
 800cfce:	bf01      	itttt	eq
 800cfd0:	6819      	ldreq	r1, [r3, #0]
 800cfd2:	685b      	ldreq	r3, [r3, #4]
 800cfd4:	1809      	addeq	r1, r1, r0
 800cfd6:	6021      	streq	r1, [r4, #0]
 800cfd8:	e7ed      	b.n	800cfb6 <_free_r+0x1e>
 800cfda:	461a      	mov	r2, r3
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	b10b      	cbz	r3, 800cfe4 <_free_r+0x4c>
 800cfe0:	42a3      	cmp	r3, r4
 800cfe2:	d9fa      	bls.n	800cfda <_free_r+0x42>
 800cfe4:	6811      	ldr	r1, [r2, #0]
 800cfe6:	1850      	adds	r0, r2, r1
 800cfe8:	42a0      	cmp	r0, r4
 800cfea:	d10b      	bne.n	800d004 <_free_r+0x6c>
 800cfec:	6820      	ldr	r0, [r4, #0]
 800cfee:	4401      	add	r1, r0
 800cff0:	1850      	adds	r0, r2, r1
 800cff2:	4283      	cmp	r3, r0
 800cff4:	6011      	str	r1, [r2, #0]
 800cff6:	d1e0      	bne.n	800cfba <_free_r+0x22>
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	4408      	add	r0, r1
 800cffe:	6010      	str	r0, [r2, #0]
 800d000:	6053      	str	r3, [r2, #4]
 800d002:	e7da      	b.n	800cfba <_free_r+0x22>
 800d004:	d902      	bls.n	800d00c <_free_r+0x74>
 800d006:	230c      	movs	r3, #12
 800d008:	602b      	str	r3, [r5, #0]
 800d00a:	e7d6      	b.n	800cfba <_free_r+0x22>
 800d00c:	6820      	ldr	r0, [r4, #0]
 800d00e:	1821      	adds	r1, r4, r0
 800d010:	428b      	cmp	r3, r1
 800d012:	bf01      	itttt	eq
 800d014:	6819      	ldreq	r1, [r3, #0]
 800d016:	685b      	ldreq	r3, [r3, #4]
 800d018:	1809      	addeq	r1, r1, r0
 800d01a:	6021      	streq	r1, [r4, #0]
 800d01c:	6063      	str	r3, [r4, #4]
 800d01e:	6054      	str	r4, [r2, #4]
 800d020:	e7cb      	b.n	800cfba <_free_r+0x22>
 800d022:	bd38      	pop	{r3, r4, r5, pc}
 800d024:	20000770 	.word	0x20000770

0800d028 <__ssputs_r>:
 800d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02c:	461f      	mov	r7, r3
 800d02e:	688e      	ldr	r6, [r1, #8]
 800d030:	4682      	mov	sl, r0
 800d032:	42be      	cmp	r6, r7
 800d034:	460c      	mov	r4, r1
 800d036:	4690      	mov	r8, r2
 800d038:	680b      	ldr	r3, [r1, #0]
 800d03a:	d82d      	bhi.n	800d098 <__ssputs_r+0x70>
 800d03c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d040:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d044:	d026      	beq.n	800d094 <__ssputs_r+0x6c>
 800d046:	6965      	ldr	r5, [r4, #20]
 800d048:	6909      	ldr	r1, [r1, #16]
 800d04a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d04e:	eba3 0901 	sub.w	r9, r3, r1
 800d052:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d056:	1c7b      	adds	r3, r7, #1
 800d058:	444b      	add	r3, r9
 800d05a:	106d      	asrs	r5, r5, #1
 800d05c:	429d      	cmp	r5, r3
 800d05e:	bf38      	it	cc
 800d060:	461d      	movcc	r5, r3
 800d062:	0553      	lsls	r3, r2, #21
 800d064:	d527      	bpl.n	800d0b6 <__ssputs_r+0x8e>
 800d066:	4629      	mov	r1, r5
 800d068:	f000 faa0 	bl	800d5ac <_malloc_r>
 800d06c:	4606      	mov	r6, r0
 800d06e:	b360      	cbz	r0, 800d0ca <__ssputs_r+0xa2>
 800d070:	464a      	mov	r2, r9
 800d072:	6921      	ldr	r1, [r4, #16]
 800d074:	f001 f8a0 	bl	800e1b8 <memcpy>
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d082:	81a3      	strh	r3, [r4, #12]
 800d084:	6126      	str	r6, [r4, #16]
 800d086:	444e      	add	r6, r9
 800d088:	6026      	str	r6, [r4, #0]
 800d08a:	463e      	mov	r6, r7
 800d08c:	6165      	str	r5, [r4, #20]
 800d08e:	eba5 0509 	sub.w	r5, r5, r9
 800d092:	60a5      	str	r5, [r4, #8]
 800d094:	42be      	cmp	r6, r7
 800d096:	d900      	bls.n	800d09a <__ssputs_r+0x72>
 800d098:	463e      	mov	r6, r7
 800d09a:	4632      	mov	r2, r6
 800d09c:	4641      	mov	r1, r8
 800d09e:	6820      	ldr	r0, [r4, #0]
 800d0a0:	f000 fff7 	bl	800e092 <memmove>
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	68a3      	ldr	r3, [r4, #8]
 800d0a8:	1b9b      	subs	r3, r3, r6
 800d0aa:	60a3      	str	r3, [r4, #8]
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	4433      	add	r3, r6
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	f000 fec7 	bl	800de4a <_realloc_r>
 800d0bc:	4606      	mov	r6, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d1e0      	bne.n	800d084 <__ssputs_r+0x5c>
 800d0c2:	4650      	mov	r0, sl
 800d0c4:	6921      	ldr	r1, [r4, #16]
 800d0c6:	f7ff ff67 	bl	800cf98 <_free_r>
 800d0ca:	230c      	movs	r3, #12
 800d0cc:	f8ca 3000 	str.w	r3, [sl]
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d0d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	e7e9      	b.n	800d0b2 <__ssputs_r+0x8a>
	...

0800d0e0 <_svfiprintf_r>:
 800d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e4:	4698      	mov	r8, r3
 800d0e6:	898b      	ldrh	r3, [r1, #12]
 800d0e8:	4607      	mov	r7, r0
 800d0ea:	061b      	lsls	r3, r3, #24
 800d0ec:	460d      	mov	r5, r1
 800d0ee:	4614      	mov	r4, r2
 800d0f0:	b09d      	sub	sp, #116	@ 0x74
 800d0f2:	d510      	bpl.n	800d116 <_svfiprintf_r+0x36>
 800d0f4:	690b      	ldr	r3, [r1, #16]
 800d0f6:	b973      	cbnz	r3, 800d116 <_svfiprintf_r+0x36>
 800d0f8:	2140      	movs	r1, #64	@ 0x40
 800d0fa:	f000 fa57 	bl	800d5ac <_malloc_r>
 800d0fe:	6028      	str	r0, [r5, #0]
 800d100:	6128      	str	r0, [r5, #16]
 800d102:	b930      	cbnz	r0, 800d112 <_svfiprintf_r+0x32>
 800d104:	230c      	movs	r3, #12
 800d106:	603b      	str	r3, [r7, #0]
 800d108:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d10c:	b01d      	add	sp, #116	@ 0x74
 800d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d112:	2340      	movs	r3, #64	@ 0x40
 800d114:	616b      	str	r3, [r5, #20]
 800d116:	2300      	movs	r3, #0
 800d118:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11a:	2320      	movs	r3, #32
 800d11c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d120:	2330      	movs	r3, #48	@ 0x30
 800d122:	f04f 0901 	mov.w	r9, #1
 800d126:	f8cd 800c 	str.w	r8, [sp, #12]
 800d12a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d2c4 <_svfiprintf_r+0x1e4>
 800d12e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d132:	4623      	mov	r3, r4
 800d134:	469a      	mov	sl, r3
 800d136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d13a:	b10a      	cbz	r2, 800d140 <_svfiprintf_r+0x60>
 800d13c:	2a25      	cmp	r2, #37	@ 0x25
 800d13e:	d1f9      	bne.n	800d134 <_svfiprintf_r+0x54>
 800d140:	ebba 0b04 	subs.w	fp, sl, r4
 800d144:	d00b      	beq.n	800d15e <_svfiprintf_r+0x7e>
 800d146:	465b      	mov	r3, fp
 800d148:	4622      	mov	r2, r4
 800d14a:	4629      	mov	r1, r5
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7ff ff6b 	bl	800d028 <__ssputs_r>
 800d152:	3001      	adds	r0, #1
 800d154:	f000 80a7 	beq.w	800d2a6 <_svfiprintf_r+0x1c6>
 800d158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d15a:	445a      	add	r2, fp
 800d15c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d15e:	f89a 3000 	ldrb.w	r3, [sl]
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 809f 	beq.w	800d2a6 <_svfiprintf_r+0x1c6>
 800d168:	2300      	movs	r3, #0
 800d16a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d16e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d172:	f10a 0a01 	add.w	sl, sl, #1
 800d176:	9304      	str	r3, [sp, #16]
 800d178:	9307      	str	r3, [sp, #28]
 800d17a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d17e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d180:	4654      	mov	r4, sl
 800d182:	2205      	movs	r2, #5
 800d184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d188:	484e      	ldr	r0, [pc, #312]	@ (800d2c4 <_svfiprintf_r+0x1e4>)
 800d18a:	f7ff f8a6 	bl	800c2da <memchr>
 800d18e:	9a04      	ldr	r2, [sp, #16]
 800d190:	b9d8      	cbnz	r0, 800d1ca <_svfiprintf_r+0xea>
 800d192:	06d0      	lsls	r0, r2, #27
 800d194:	bf44      	itt	mi
 800d196:	2320      	movmi	r3, #32
 800d198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d19c:	0711      	lsls	r1, r2, #28
 800d19e:	bf44      	itt	mi
 800d1a0:	232b      	movmi	r3, #43	@ 0x2b
 800d1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ac:	d015      	beq.n	800d1da <_svfiprintf_r+0xfa>
 800d1ae:	4654      	mov	r4, sl
 800d1b0:	2000      	movs	r0, #0
 800d1b2:	f04f 0c0a 	mov.w	ip, #10
 800d1b6:	9a07      	ldr	r2, [sp, #28]
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1be:	3b30      	subs	r3, #48	@ 0x30
 800d1c0:	2b09      	cmp	r3, #9
 800d1c2:	d94b      	bls.n	800d25c <_svfiprintf_r+0x17c>
 800d1c4:	b1b0      	cbz	r0, 800d1f4 <_svfiprintf_r+0x114>
 800d1c6:	9207      	str	r2, [sp, #28]
 800d1c8:	e014      	b.n	800d1f4 <_svfiprintf_r+0x114>
 800d1ca:	eba0 0308 	sub.w	r3, r0, r8
 800d1ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	46a2      	mov	sl, r4
 800d1d6:	9304      	str	r3, [sp, #16]
 800d1d8:	e7d2      	b.n	800d180 <_svfiprintf_r+0xa0>
 800d1da:	9b03      	ldr	r3, [sp, #12]
 800d1dc:	1d19      	adds	r1, r3, #4
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	9103      	str	r1, [sp, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	bfbb      	ittet	lt
 800d1e6:	425b      	neglt	r3, r3
 800d1e8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1ec:	9307      	strge	r3, [sp, #28]
 800d1ee:	9307      	strlt	r3, [sp, #28]
 800d1f0:	bfb8      	it	lt
 800d1f2:	9204      	strlt	r2, [sp, #16]
 800d1f4:	7823      	ldrb	r3, [r4, #0]
 800d1f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1f8:	d10a      	bne.n	800d210 <_svfiprintf_r+0x130>
 800d1fa:	7863      	ldrb	r3, [r4, #1]
 800d1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1fe:	d132      	bne.n	800d266 <_svfiprintf_r+0x186>
 800d200:	9b03      	ldr	r3, [sp, #12]
 800d202:	3402      	adds	r4, #2
 800d204:	1d1a      	adds	r2, r3, #4
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	9203      	str	r2, [sp, #12]
 800d20a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d2c8 <_svfiprintf_r+0x1e8>
 800d214:	2203      	movs	r2, #3
 800d216:	4650      	mov	r0, sl
 800d218:	7821      	ldrb	r1, [r4, #0]
 800d21a:	f7ff f85e 	bl	800c2da <memchr>
 800d21e:	b138      	cbz	r0, 800d230 <_svfiprintf_r+0x150>
 800d220:	2240      	movs	r2, #64	@ 0x40
 800d222:	9b04      	ldr	r3, [sp, #16]
 800d224:	eba0 000a 	sub.w	r0, r0, sl
 800d228:	4082      	lsls	r2, r0
 800d22a:	4313      	orrs	r3, r2
 800d22c:	3401      	adds	r4, #1
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	2206      	movs	r2, #6
 800d236:	4825      	ldr	r0, [pc, #148]	@ (800d2cc <_svfiprintf_r+0x1ec>)
 800d238:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d23c:	f7ff f84d 	bl	800c2da <memchr>
 800d240:	2800      	cmp	r0, #0
 800d242:	d036      	beq.n	800d2b2 <_svfiprintf_r+0x1d2>
 800d244:	4b22      	ldr	r3, [pc, #136]	@ (800d2d0 <_svfiprintf_r+0x1f0>)
 800d246:	bb1b      	cbnz	r3, 800d290 <_svfiprintf_r+0x1b0>
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	3307      	adds	r3, #7
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	3308      	adds	r3, #8
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d256:	4433      	add	r3, r6
 800d258:	9309      	str	r3, [sp, #36]	@ 0x24
 800d25a:	e76a      	b.n	800d132 <_svfiprintf_r+0x52>
 800d25c:	460c      	mov	r4, r1
 800d25e:	2001      	movs	r0, #1
 800d260:	fb0c 3202 	mla	r2, ip, r2, r3
 800d264:	e7a8      	b.n	800d1b8 <_svfiprintf_r+0xd8>
 800d266:	2300      	movs	r3, #0
 800d268:	f04f 0c0a 	mov.w	ip, #10
 800d26c:	4619      	mov	r1, r3
 800d26e:	3401      	adds	r4, #1
 800d270:	9305      	str	r3, [sp, #20]
 800d272:	4620      	mov	r0, r4
 800d274:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d278:	3a30      	subs	r2, #48	@ 0x30
 800d27a:	2a09      	cmp	r2, #9
 800d27c:	d903      	bls.n	800d286 <_svfiprintf_r+0x1a6>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0c6      	beq.n	800d210 <_svfiprintf_r+0x130>
 800d282:	9105      	str	r1, [sp, #20]
 800d284:	e7c4      	b.n	800d210 <_svfiprintf_r+0x130>
 800d286:	4604      	mov	r4, r0
 800d288:	2301      	movs	r3, #1
 800d28a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d28e:	e7f0      	b.n	800d272 <_svfiprintf_r+0x192>
 800d290:	ab03      	add	r3, sp, #12
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	462a      	mov	r2, r5
 800d296:	4638      	mov	r0, r7
 800d298:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d4 <_svfiprintf_r+0x1f4>)
 800d29a:	a904      	add	r1, sp, #16
 800d29c:	f7fe f9e4 	bl	800b668 <_printf_float>
 800d2a0:	1c42      	adds	r2, r0, #1
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	d1d6      	bne.n	800d254 <_svfiprintf_r+0x174>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	065b      	lsls	r3, r3, #25
 800d2aa:	f53f af2d 	bmi.w	800d108 <_svfiprintf_r+0x28>
 800d2ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2b0:	e72c      	b.n	800d10c <_svfiprintf_r+0x2c>
 800d2b2:	ab03      	add	r3, sp, #12
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	462a      	mov	r2, r5
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	4b06      	ldr	r3, [pc, #24]	@ (800d2d4 <_svfiprintf_r+0x1f4>)
 800d2bc:	a904      	add	r1, sp, #16
 800d2be:	f7fe fc71 	bl	800bba4 <_printf_i>
 800d2c2:	e7ed      	b.n	800d2a0 <_svfiprintf_r+0x1c0>
 800d2c4:	0800f3a5 	.word	0x0800f3a5
 800d2c8:	0800f3ab 	.word	0x0800f3ab
 800d2cc:	0800f3af 	.word	0x0800f3af
 800d2d0:	0800b669 	.word	0x0800b669
 800d2d4:	0800d029 	.word	0x0800d029

0800d2d8 <__sfputc_r>:
 800d2d8:	6893      	ldr	r3, [r2, #8]
 800d2da:	b410      	push	{r4}
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	6093      	str	r3, [r2, #8]
 800d2e2:	da07      	bge.n	800d2f4 <__sfputc_r+0x1c>
 800d2e4:	6994      	ldr	r4, [r2, #24]
 800d2e6:	42a3      	cmp	r3, r4
 800d2e8:	db01      	blt.n	800d2ee <__sfputc_r+0x16>
 800d2ea:	290a      	cmp	r1, #10
 800d2ec:	d102      	bne.n	800d2f4 <__sfputc_r+0x1c>
 800d2ee:	bc10      	pop	{r4}
 800d2f0:	f000 bdd9 	b.w	800dea6 <__swbuf_r>
 800d2f4:	6813      	ldr	r3, [r2, #0]
 800d2f6:	1c58      	adds	r0, r3, #1
 800d2f8:	6010      	str	r0, [r2, #0]
 800d2fa:	7019      	strb	r1, [r3, #0]
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	bc10      	pop	{r4}
 800d300:	4770      	bx	lr

0800d302 <__sfputs_r>:
 800d302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d304:	4606      	mov	r6, r0
 800d306:	460f      	mov	r7, r1
 800d308:	4614      	mov	r4, r2
 800d30a:	18d5      	adds	r5, r2, r3
 800d30c:	42ac      	cmp	r4, r5
 800d30e:	d101      	bne.n	800d314 <__sfputs_r+0x12>
 800d310:	2000      	movs	r0, #0
 800d312:	e007      	b.n	800d324 <__sfputs_r+0x22>
 800d314:	463a      	mov	r2, r7
 800d316:	4630      	mov	r0, r6
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	f7ff ffdc 	bl	800d2d8 <__sfputc_r>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d1f3      	bne.n	800d30c <__sfputs_r+0xa>
 800d324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d328 <_vfiprintf_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	460d      	mov	r5, r1
 800d32e:	4614      	mov	r4, r2
 800d330:	4698      	mov	r8, r3
 800d332:	4606      	mov	r6, r0
 800d334:	b09d      	sub	sp, #116	@ 0x74
 800d336:	b118      	cbz	r0, 800d340 <_vfiprintf_r+0x18>
 800d338:	6a03      	ldr	r3, [r0, #32]
 800d33a:	b90b      	cbnz	r3, 800d340 <_vfiprintf_r+0x18>
 800d33c:	f7fe fece 	bl	800c0dc <__sinit>
 800d340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d342:	07d9      	lsls	r1, r3, #31
 800d344:	d405      	bmi.n	800d352 <_vfiprintf_r+0x2a>
 800d346:	89ab      	ldrh	r3, [r5, #12]
 800d348:	059a      	lsls	r2, r3, #22
 800d34a:	d402      	bmi.n	800d352 <_vfiprintf_r+0x2a>
 800d34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d34e:	f7fe ffc2 	bl	800c2d6 <__retarget_lock_acquire_recursive>
 800d352:	89ab      	ldrh	r3, [r5, #12]
 800d354:	071b      	lsls	r3, r3, #28
 800d356:	d501      	bpl.n	800d35c <_vfiprintf_r+0x34>
 800d358:	692b      	ldr	r3, [r5, #16]
 800d35a:	b99b      	cbnz	r3, 800d384 <_vfiprintf_r+0x5c>
 800d35c:	4629      	mov	r1, r5
 800d35e:	4630      	mov	r0, r6
 800d360:	f000 fde0 	bl	800df24 <__swsetup_r>
 800d364:	b170      	cbz	r0, 800d384 <_vfiprintf_r+0x5c>
 800d366:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d368:	07dc      	lsls	r4, r3, #31
 800d36a:	d504      	bpl.n	800d376 <_vfiprintf_r+0x4e>
 800d36c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d370:	b01d      	add	sp, #116	@ 0x74
 800d372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d376:	89ab      	ldrh	r3, [r5, #12]
 800d378:	0598      	lsls	r0, r3, #22
 800d37a:	d4f7      	bmi.n	800d36c <_vfiprintf_r+0x44>
 800d37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d37e:	f7fe ffab 	bl	800c2d8 <__retarget_lock_release_recursive>
 800d382:	e7f3      	b.n	800d36c <_vfiprintf_r+0x44>
 800d384:	2300      	movs	r3, #0
 800d386:	9309      	str	r3, [sp, #36]	@ 0x24
 800d388:	2320      	movs	r3, #32
 800d38a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d38e:	2330      	movs	r3, #48	@ 0x30
 800d390:	f04f 0901 	mov.w	r9, #1
 800d394:	f8cd 800c 	str.w	r8, [sp, #12]
 800d398:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d544 <_vfiprintf_r+0x21c>
 800d39c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3a0:	4623      	mov	r3, r4
 800d3a2:	469a      	mov	sl, r3
 800d3a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3a8:	b10a      	cbz	r2, 800d3ae <_vfiprintf_r+0x86>
 800d3aa:	2a25      	cmp	r2, #37	@ 0x25
 800d3ac:	d1f9      	bne.n	800d3a2 <_vfiprintf_r+0x7a>
 800d3ae:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b2:	d00b      	beq.n	800d3cc <_vfiprintf_r+0xa4>
 800d3b4:	465b      	mov	r3, fp
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	f7ff ffa1 	bl	800d302 <__sfputs_r>
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	f000 80a7 	beq.w	800d514 <_vfiprintf_r+0x1ec>
 800d3c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3c8:	445a      	add	r2, fp
 800d3ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 809f 	beq.w	800d514 <_vfiprintf_r+0x1ec>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d3dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3e0:	f10a 0a01 	add.w	sl, sl, #1
 800d3e4:	9304      	str	r3, [sp, #16]
 800d3e6:	9307      	str	r3, [sp, #28]
 800d3e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3ee:	4654      	mov	r4, sl
 800d3f0:	2205      	movs	r2, #5
 800d3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f6:	4853      	ldr	r0, [pc, #332]	@ (800d544 <_vfiprintf_r+0x21c>)
 800d3f8:	f7fe ff6f 	bl	800c2da <memchr>
 800d3fc:	9a04      	ldr	r2, [sp, #16]
 800d3fe:	b9d8      	cbnz	r0, 800d438 <_vfiprintf_r+0x110>
 800d400:	06d1      	lsls	r1, r2, #27
 800d402:	bf44      	itt	mi
 800d404:	2320      	movmi	r3, #32
 800d406:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d40a:	0713      	lsls	r3, r2, #28
 800d40c:	bf44      	itt	mi
 800d40e:	232b      	movmi	r3, #43	@ 0x2b
 800d410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d414:	f89a 3000 	ldrb.w	r3, [sl]
 800d418:	2b2a      	cmp	r3, #42	@ 0x2a
 800d41a:	d015      	beq.n	800d448 <_vfiprintf_r+0x120>
 800d41c:	4654      	mov	r4, sl
 800d41e:	2000      	movs	r0, #0
 800d420:	f04f 0c0a 	mov.w	ip, #10
 800d424:	9a07      	ldr	r2, [sp, #28]
 800d426:	4621      	mov	r1, r4
 800d428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d42c:	3b30      	subs	r3, #48	@ 0x30
 800d42e:	2b09      	cmp	r3, #9
 800d430:	d94b      	bls.n	800d4ca <_vfiprintf_r+0x1a2>
 800d432:	b1b0      	cbz	r0, 800d462 <_vfiprintf_r+0x13a>
 800d434:	9207      	str	r2, [sp, #28]
 800d436:	e014      	b.n	800d462 <_vfiprintf_r+0x13a>
 800d438:	eba0 0308 	sub.w	r3, r0, r8
 800d43c:	fa09 f303 	lsl.w	r3, r9, r3
 800d440:	4313      	orrs	r3, r2
 800d442:	46a2      	mov	sl, r4
 800d444:	9304      	str	r3, [sp, #16]
 800d446:	e7d2      	b.n	800d3ee <_vfiprintf_r+0xc6>
 800d448:	9b03      	ldr	r3, [sp, #12]
 800d44a:	1d19      	adds	r1, r3, #4
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	9103      	str	r1, [sp, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	bfbb      	ittet	lt
 800d454:	425b      	neglt	r3, r3
 800d456:	f042 0202 	orrlt.w	r2, r2, #2
 800d45a:	9307      	strge	r3, [sp, #28]
 800d45c:	9307      	strlt	r3, [sp, #28]
 800d45e:	bfb8      	it	lt
 800d460:	9204      	strlt	r2, [sp, #16]
 800d462:	7823      	ldrb	r3, [r4, #0]
 800d464:	2b2e      	cmp	r3, #46	@ 0x2e
 800d466:	d10a      	bne.n	800d47e <_vfiprintf_r+0x156>
 800d468:	7863      	ldrb	r3, [r4, #1]
 800d46a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d46c:	d132      	bne.n	800d4d4 <_vfiprintf_r+0x1ac>
 800d46e:	9b03      	ldr	r3, [sp, #12]
 800d470:	3402      	adds	r4, #2
 800d472:	1d1a      	adds	r2, r3, #4
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	9203      	str	r2, [sp, #12]
 800d478:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d47c:	9305      	str	r3, [sp, #20]
 800d47e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d548 <_vfiprintf_r+0x220>
 800d482:	2203      	movs	r2, #3
 800d484:	4650      	mov	r0, sl
 800d486:	7821      	ldrb	r1, [r4, #0]
 800d488:	f7fe ff27 	bl	800c2da <memchr>
 800d48c:	b138      	cbz	r0, 800d49e <_vfiprintf_r+0x176>
 800d48e:	2240      	movs	r2, #64	@ 0x40
 800d490:	9b04      	ldr	r3, [sp, #16]
 800d492:	eba0 000a 	sub.w	r0, r0, sl
 800d496:	4082      	lsls	r2, r0
 800d498:	4313      	orrs	r3, r2
 800d49a:	3401      	adds	r4, #1
 800d49c:	9304      	str	r3, [sp, #16]
 800d49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a2:	2206      	movs	r2, #6
 800d4a4:	4829      	ldr	r0, [pc, #164]	@ (800d54c <_vfiprintf_r+0x224>)
 800d4a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4aa:	f7fe ff16 	bl	800c2da <memchr>
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d03f      	beq.n	800d532 <_vfiprintf_r+0x20a>
 800d4b2:	4b27      	ldr	r3, [pc, #156]	@ (800d550 <_vfiprintf_r+0x228>)
 800d4b4:	bb1b      	cbnz	r3, 800d4fe <_vfiprintf_r+0x1d6>
 800d4b6:	9b03      	ldr	r3, [sp, #12]
 800d4b8:	3307      	adds	r3, #7
 800d4ba:	f023 0307 	bic.w	r3, r3, #7
 800d4be:	3308      	adds	r3, #8
 800d4c0:	9303      	str	r3, [sp, #12]
 800d4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c4:	443b      	add	r3, r7
 800d4c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4c8:	e76a      	b.n	800d3a0 <_vfiprintf_r+0x78>
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	2001      	movs	r0, #1
 800d4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d2:	e7a8      	b.n	800d426 <_vfiprintf_r+0xfe>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	f04f 0c0a 	mov.w	ip, #10
 800d4da:	4619      	mov	r1, r3
 800d4dc:	3401      	adds	r4, #1
 800d4de:	9305      	str	r3, [sp, #20]
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4e6:	3a30      	subs	r2, #48	@ 0x30
 800d4e8:	2a09      	cmp	r2, #9
 800d4ea:	d903      	bls.n	800d4f4 <_vfiprintf_r+0x1cc>
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d0c6      	beq.n	800d47e <_vfiprintf_r+0x156>
 800d4f0:	9105      	str	r1, [sp, #20]
 800d4f2:	e7c4      	b.n	800d47e <_vfiprintf_r+0x156>
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fc:	e7f0      	b.n	800d4e0 <_vfiprintf_r+0x1b8>
 800d4fe:	ab03      	add	r3, sp, #12
 800d500:	9300      	str	r3, [sp, #0]
 800d502:	462a      	mov	r2, r5
 800d504:	4630      	mov	r0, r6
 800d506:	4b13      	ldr	r3, [pc, #76]	@ (800d554 <_vfiprintf_r+0x22c>)
 800d508:	a904      	add	r1, sp, #16
 800d50a:	f7fe f8ad 	bl	800b668 <_printf_float>
 800d50e:	4607      	mov	r7, r0
 800d510:	1c78      	adds	r0, r7, #1
 800d512:	d1d6      	bne.n	800d4c2 <_vfiprintf_r+0x19a>
 800d514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d516:	07d9      	lsls	r1, r3, #31
 800d518:	d405      	bmi.n	800d526 <_vfiprintf_r+0x1fe>
 800d51a:	89ab      	ldrh	r3, [r5, #12]
 800d51c:	059a      	lsls	r2, r3, #22
 800d51e:	d402      	bmi.n	800d526 <_vfiprintf_r+0x1fe>
 800d520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d522:	f7fe fed9 	bl	800c2d8 <__retarget_lock_release_recursive>
 800d526:	89ab      	ldrh	r3, [r5, #12]
 800d528:	065b      	lsls	r3, r3, #25
 800d52a:	f53f af1f 	bmi.w	800d36c <_vfiprintf_r+0x44>
 800d52e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d530:	e71e      	b.n	800d370 <_vfiprintf_r+0x48>
 800d532:	ab03      	add	r3, sp, #12
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	462a      	mov	r2, r5
 800d538:	4630      	mov	r0, r6
 800d53a:	4b06      	ldr	r3, [pc, #24]	@ (800d554 <_vfiprintf_r+0x22c>)
 800d53c:	a904      	add	r1, sp, #16
 800d53e:	f7fe fb31 	bl	800bba4 <_printf_i>
 800d542:	e7e4      	b.n	800d50e <_vfiprintf_r+0x1e6>
 800d544:	0800f3a5 	.word	0x0800f3a5
 800d548:	0800f3ab 	.word	0x0800f3ab
 800d54c:	0800f3af 	.word	0x0800f3af
 800d550:	0800b669 	.word	0x0800b669
 800d554:	0800d303 	.word	0x0800d303

0800d558 <malloc>:
 800d558:	4b02      	ldr	r3, [pc, #8]	@ (800d564 <malloc+0xc>)
 800d55a:	4601      	mov	r1, r0
 800d55c:	6818      	ldr	r0, [r3, #0]
 800d55e:	f000 b825 	b.w	800d5ac <_malloc_r>
 800d562:	bf00      	nop
 800d564:	200000a8 	.word	0x200000a8

0800d568 <sbrk_aligned>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	4e0f      	ldr	r6, [pc, #60]	@ (800d5a8 <sbrk_aligned+0x40>)
 800d56c:	460c      	mov	r4, r1
 800d56e:	6831      	ldr	r1, [r6, #0]
 800d570:	4605      	mov	r5, r0
 800d572:	b911      	cbnz	r1, 800d57a <sbrk_aligned+0x12>
 800d574:	f000 fdfe 	bl	800e174 <_sbrk_r>
 800d578:	6030      	str	r0, [r6, #0]
 800d57a:	4621      	mov	r1, r4
 800d57c:	4628      	mov	r0, r5
 800d57e:	f000 fdf9 	bl	800e174 <_sbrk_r>
 800d582:	1c43      	adds	r3, r0, #1
 800d584:	d103      	bne.n	800d58e <sbrk_aligned+0x26>
 800d586:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d58a:	4620      	mov	r0, r4
 800d58c:	bd70      	pop	{r4, r5, r6, pc}
 800d58e:	1cc4      	adds	r4, r0, #3
 800d590:	f024 0403 	bic.w	r4, r4, #3
 800d594:	42a0      	cmp	r0, r4
 800d596:	d0f8      	beq.n	800d58a <sbrk_aligned+0x22>
 800d598:	1a21      	subs	r1, r4, r0
 800d59a:	4628      	mov	r0, r5
 800d59c:	f000 fdea 	bl	800e174 <_sbrk_r>
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d1f2      	bne.n	800d58a <sbrk_aligned+0x22>
 800d5a4:	e7ef      	b.n	800d586 <sbrk_aligned+0x1e>
 800d5a6:	bf00      	nop
 800d5a8:	2000076c 	.word	0x2000076c

0800d5ac <_malloc_r>:
 800d5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b0:	1ccd      	adds	r5, r1, #3
 800d5b2:	f025 0503 	bic.w	r5, r5, #3
 800d5b6:	3508      	adds	r5, #8
 800d5b8:	2d0c      	cmp	r5, #12
 800d5ba:	bf38      	it	cc
 800d5bc:	250c      	movcc	r5, #12
 800d5be:	2d00      	cmp	r5, #0
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	db01      	blt.n	800d5c8 <_malloc_r+0x1c>
 800d5c4:	42a9      	cmp	r1, r5
 800d5c6:	d904      	bls.n	800d5d2 <_malloc_r+0x26>
 800d5c8:	230c      	movs	r3, #12
 800d5ca:	6033      	str	r3, [r6, #0]
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6a8 <_malloc_r+0xfc>
 800d5d6:	f000 f869 	bl	800d6ac <__malloc_lock>
 800d5da:	f8d8 3000 	ldr.w	r3, [r8]
 800d5de:	461c      	mov	r4, r3
 800d5e0:	bb44      	cbnz	r4, 800d634 <_malloc_r+0x88>
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	f7ff ffbf 	bl	800d568 <sbrk_aligned>
 800d5ea:	1c43      	adds	r3, r0, #1
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	d158      	bne.n	800d6a2 <_malloc_r+0xf6>
 800d5f0:	f8d8 4000 	ldr.w	r4, [r8]
 800d5f4:	4627      	mov	r7, r4
 800d5f6:	2f00      	cmp	r7, #0
 800d5f8:	d143      	bne.n	800d682 <_malloc_r+0xd6>
 800d5fa:	2c00      	cmp	r4, #0
 800d5fc:	d04b      	beq.n	800d696 <_malloc_r+0xea>
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	4639      	mov	r1, r7
 800d602:	4630      	mov	r0, r6
 800d604:	eb04 0903 	add.w	r9, r4, r3
 800d608:	f000 fdb4 	bl	800e174 <_sbrk_r>
 800d60c:	4581      	cmp	r9, r0
 800d60e:	d142      	bne.n	800d696 <_malloc_r+0xea>
 800d610:	6821      	ldr	r1, [r4, #0]
 800d612:	4630      	mov	r0, r6
 800d614:	1a6d      	subs	r5, r5, r1
 800d616:	4629      	mov	r1, r5
 800d618:	f7ff ffa6 	bl	800d568 <sbrk_aligned>
 800d61c:	3001      	adds	r0, #1
 800d61e:	d03a      	beq.n	800d696 <_malloc_r+0xea>
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	442b      	add	r3, r5
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	f8d8 3000 	ldr.w	r3, [r8]
 800d62a:	685a      	ldr	r2, [r3, #4]
 800d62c:	bb62      	cbnz	r2, 800d688 <_malloc_r+0xdc>
 800d62e:	f8c8 7000 	str.w	r7, [r8]
 800d632:	e00f      	b.n	800d654 <_malloc_r+0xa8>
 800d634:	6822      	ldr	r2, [r4, #0]
 800d636:	1b52      	subs	r2, r2, r5
 800d638:	d420      	bmi.n	800d67c <_malloc_r+0xd0>
 800d63a:	2a0b      	cmp	r2, #11
 800d63c:	d917      	bls.n	800d66e <_malloc_r+0xc2>
 800d63e:	1961      	adds	r1, r4, r5
 800d640:	42a3      	cmp	r3, r4
 800d642:	6025      	str	r5, [r4, #0]
 800d644:	bf18      	it	ne
 800d646:	6059      	strne	r1, [r3, #4]
 800d648:	6863      	ldr	r3, [r4, #4]
 800d64a:	bf08      	it	eq
 800d64c:	f8c8 1000 	streq.w	r1, [r8]
 800d650:	5162      	str	r2, [r4, r5]
 800d652:	604b      	str	r3, [r1, #4]
 800d654:	4630      	mov	r0, r6
 800d656:	f000 f82f 	bl	800d6b8 <__malloc_unlock>
 800d65a:	f104 000b 	add.w	r0, r4, #11
 800d65e:	1d23      	adds	r3, r4, #4
 800d660:	f020 0007 	bic.w	r0, r0, #7
 800d664:	1ac2      	subs	r2, r0, r3
 800d666:	bf1c      	itt	ne
 800d668:	1a1b      	subne	r3, r3, r0
 800d66a:	50a3      	strne	r3, [r4, r2]
 800d66c:	e7af      	b.n	800d5ce <_malloc_r+0x22>
 800d66e:	6862      	ldr	r2, [r4, #4]
 800d670:	42a3      	cmp	r3, r4
 800d672:	bf0c      	ite	eq
 800d674:	f8c8 2000 	streq.w	r2, [r8]
 800d678:	605a      	strne	r2, [r3, #4]
 800d67a:	e7eb      	b.n	800d654 <_malloc_r+0xa8>
 800d67c:	4623      	mov	r3, r4
 800d67e:	6864      	ldr	r4, [r4, #4]
 800d680:	e7ae      	b.n	800d5e0 <_malloc_r+0x34>
 800d682:	463c      	mov	r4, r7
 800d684:	687f      	ldr	r7, [r7, #4]
 800d686:	e7b6      	b.n	800d5f6 <_malloc_r+0x4a>
 800d688:	461a      	mov	r2, r3
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	42a3      	cmp	r3, r4
 800d68e:	d1fb      	bne.n	800d688 <_malloc_r+0xdc>
 800d690:	2300      	movs	r3, #0
 800d692:	6053      	str	r3, [r2, #4]
 800d694:	e7de      	b.n	800d654 <_malloc_r+0xa8>
 800d696:	230c      	movs	r3, #12
 800d698:	4630      	mov	r0, r6
 800d69a:	6033      	str	r3, [r6, #0]
 800d69c:	f000 f80c 	bl	800d6b8 <__malloc_unlock>
 800d6a0:	e794      	b.n	800d5cc <_malloc_r+0x20>
 800d6a2:	6005      	str	r5, [r0, #0]
 800d6a4:	e7d6      	b.n	800d654 <_malloc_r+0xa8>
 800d6a6:	bf00      	nop
 800d6a8:	20000770 	.word	0x20000770

0800d6ac <__malloc_lock>:
 800d6ac:	4801      	ldr	r0, [pc, #4]	@ (800d6b4 <__malloc_lock+0x8>)
 800d6ae:	f7fe be12 	b.w	800c2d6 <__retarget_lock_acquire_recursive>
 800d6b2:	bf00      	nop
 800d6b4:	20000768 	.word	0x20000768

0800d6b8 <__malloc_unlock>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	@ (800d6c0 <__malloc_unlock+0x8>)
 800d6ba:	f7fe be0d 	b.w	800c2d8 <__retarget_lock_release_recursive>
 800d6be:	bf00      	nop
 800d6c0:	20000768 	.word	0x20000768

0800d6c4 <_Balloc>:
 800d6c4:	b570      	push	{r4, r5, r6, lr}
 800d6c6:	69c6      	ldr	r6, [r0, #28]
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	460d      	mov	r5, r1
 800d6cc:	b976      	cbnz	r6, 800d6ec <_Balloc+0x28>
 800d6ce:	2010      	movs	r0, #16
 800d6d0:	f7ff ff42 	bl	800d558 <malloc>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	61e0      	str	r0, [r4, #28]
 800d6d8:	b920      	cbnz	r0, 800d6e4 <_Balloc+0x20>
 800d6da:	216b      	movs	r1, #107	@ 0x6b
 800d6dc:	4b17      	ldr	r3, [pc, #92]	@ (800d73c <_Balloc+0x78>)
 800d6de:	4818      	ldr	r0, [pc, #96]	@ (800d740 <_Balloc+0x7c>)
 800d6e0:	f000 fd78 	bl	800e1d4 <__assert_func>
 800d6e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6e8:	6006      	str	r6, [r0, #0]
 800d6ea:	60c6      	str	r6, [r0, #12]
 800d6ec:	69e6      	ldr	r6, [r4, #28]
 800d6ee:	68f3      	ldr	r3, [r6, #12]
 800d6f0:	b183      	cbz	r3, 800d714 <_Balloc+0x50>
 800d6f2:	69e3      	ldr	r3, [r4, #28]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6fa:	b9b8      	cbnz	r0, 800d72c <_Balloc+0x68>
 800d6fc:	2101      	movs	r1, #1
 800d6fe:	fa01 f605 	lsl.w	r6, r1, r5
 800d702:	1d72      	adds	r2, r6, #5
 800d704:	4620      	mov	r0, r4
 800d706:	0092      	lsls	r2, r2, #2
 800d708:	f000 fd82 	bl	800e210 <_calloc_r>
 800d70c:	b160      	cbz	r0, 800d728 <_Balloc+0x64>
 800d70e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d712:	e00e      	b.n	800d732 <_Balloc+0x6e>
 800d714:	2221      	movs	r2, #33	@ 0x21
 800d716:	2104      	movs	r1, #4
 800d718:	4620      	mov	r0, r4
 800d71a:	f000 fd79 	bl	800e210 <_calloc_r>
 800d71e:	69e3      	ldr	r3, [r4, #28]
 800d720:	60f0      	str	r0, [r6, #12]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e4      	bne.n	800d6f2 <_Balloc+0x2e>
 800d728:	2000      	movs	r0, #0
 800d72a:	bd70      	pop	{r4, r5, r6, pc}
 800d72c:	6802      	ldr	r2, [r0, #0]
 800d72e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d732:	2300      	movs	r3, #0
 800d734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d738:	e7f7      	b.n	800d72a <_Balloc+0x66>
 800d73a:	bf00      	nop
 800d73c:	0800f325 	.word	0x0800f325
 800d740:	0800f3b6 	.word	0x0800f3b6

0800d744 <_Bfree>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	69c6      	ldr	r6, [r0, #28]
 800d748:	4605      	mov	r5, r0
 800d74a:	460c      	mov	r4, r1
 800d74c:	b976      	cbnz	r6, 800d76c <_Bfree+0x28>
 800d74e:	2010      	movs	r0, #16
 800d750:	f7ff ff02 	bl	800d558 <malloc>
 800d754:	4602      	mov	r2, r0
 800d756:	61e8      	str	r0, [r5, #28]
 800d758:	b920      	cbnz	r0, 800d764 <_Bfree+0x20>
 800d75a:	218f      	movs	r1, #143	@ 0x8f
 800d75c:	4b08      	ldr	r3, [pc, #32]	@ (800d780 <_Bfree+0x3c>)
 800d75e:	4809      	ldr	r0, [pc, #36]	@ (800d784 <_Bfree+0x40>)
 800d760:	f000 fd38 	bl	800e1d4 <__assert_func>
 800d764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d768:	6006      	str	r6, [r0, #0]
 800d76a:	60c6      	str	r6, [r0, #12]
 800d76c:	b13c      	cbz	r4, 800d77e <_Bfree+0x3a>
 800d76e:	69eb      	ldr	r3, [r5, #28]
 800d770:	6862      	ldr	r2, [r4, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d778:	6021      	str	r1, [r4, #0]
 800d77a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d77e:	bd70      	pop	{r4, r5, r6, pc}
 800d780:	0800f325 	.word	0x0800f325
 800d784:	0800f3b6 	.word	0x0800f3b6

0800d788 <__multadd>:
 800d788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	4607      	mov	r7, r0
 800d78e:	460c      	mov	r4, r1
 800d790:	461e      	mov	r6, r3
 800d792:	2000      	movs	r0, #0
 800d794:	690d      	ldr	r5, [r1, #16]
 800d796:	f101 0c14 	add.w	ip, r1, #20
 800d79a:	f8dc 3000 	ldr.w	r3, [ip]
 800d79e:	3001      	adds	r0, #1
 800d7a0:	b299      	uxth	r1, r3
 800d7a2:	fb02 6101 	mla	r1, r2, r1, r6
 800d7a6:	0c1e      	lsrs	r6, r3, #16
 800d7a8:	0c0b      	lsrs	r3, r1, #16
 800d7aa:	fb02 3306 	mla	r3, r2, r6, r3
 800d7ae:	b289      	uxth	r1, r1
 800d7b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7b4:	4285      	cmp	r5, r0
 800d7b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d7be:	dcec      	bgt.n	800d79a <__multadd+0x12>
 800d7c0:	b30e      	cbz	r6, 800d806 <__multadd+0x7e>
 800d7c2:	68a3      	ldr	r3, [r4, #8]
 800d7c4:	42ab      	cmp	r3, r5
 800d7c6:	dc19      	bgt.n	800d7fc <__multadd+0x74>
 800d7c8:	6861      	ldr	r1, [r4, #4]
 800d7ca:	4638      	mov	r0, r7
 800d7cc:	3101      	adds	r1, #1
 800d7ce:	f7ff ff79 	bl	800d6c4 <_Balloc>
 800d7d2:	4680      	mov	r8, r0
 800d7d4:	b928      	cbnz	r0, 800d7e2 <__multadd+0x5a>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	21ba      	movs	r1, #186	@ 0xba
 800d7da:	4b0c      	ldr	r3, [pc, #48]	@ (800d80c <__multadd+0x84>)
 800d7dc:	480c      	ldr	r0, [pc, #48]	@ (800d810 <__multadd+0x88>)
 800d7de:	f000 fcf9 	bl	800e1d4 <__assert_func>
 800d7e2:	6922      	ldr	r2, [r4, #16]
 800d7e4:	f104 010c 	add.w	r1, r4, #12
 800d7e8:	3202      	adds	r2, #2
 800d7ea:	0092      	lsls	r2, r2, #2
 800d7ec:	300c      	adds	r0, #12
 800d7ee:	f000 fce3 	bl	800e1b8 <memcpy>
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f7ff ffa5 	bl	800d744 <_Bfree>
 800d7fa:	4644      	mov	r4, r8
 800d7fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d800:	3501      	adds	r5, #1
 800d802:	615e      	str	r6, [r3, #20]
 800d804:	6125      	str	r5, [r4, #16]
 800d806:	4620      	mov	r0, r4
 800d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d80c:	0800f394 	.word	0x0800f394
 800d810:	0800f3b6 	.word	0x0800f3b6

0800d814 <__hi0bits>:
 800d814:	4603      	mov	r3, r0
 800d816:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d81a:	bf3a      	itte	cc
 800d81c:	0403      	lslcc	r3, r0, #16
 800d81e:	2010      	movcc	r0, #16
 800d820:	2000      	movcs	r0, #0
 800d822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d826:	bf3c      	itt	cc
 800d828:	021b      	lslcc	r3, r3, #8
 800d82a:	3008      	addcc	r0, #8
 800d82c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d830:	bf3c      	itt	cc
 800d832:	011b      	lslcc	r3, r3, #4
 800d834:	3004      	addcc	r0, #4
 800d836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d83a:	bf3c      	itt	cc
 800d83c:	009b      	lslcc	r3, r3, #2
 800d83e:	3002      	addcc	r0, #2
 800d840:	2b00      	cmp	r3, #0
 800d842:	db05      	blt.n	800d850 <__hi0bits+0x3c>
 800d844:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d848:	f100 0001 	add.w	r0, r0, #1
 800d84c:	bf08      	it	eq
 800d84e:	2020      	moveq	r0, #32
 800d850:	4770      	bx	lr

0800d852 <__lo0bits>:
 800d852:	6803      	ldr	r3, [r0, #0]
 800d854:	4602      	mov	r2, r0
 800d856:	f013 0007 	ands.w	r0, r3, #7
 800d85a:	d00b      	beq.n	800d874 <__lo0bits+0x22>
 800d85c:	07d9      	lsls	r1, r3, #31
 800d85e:	d421      	bmi.n	800d8a4 <__lo0bits+0x52>
 800d860:	0798      	lsls	r0, r3, #30
 800d862:	bf49      	itett	mi
 800d864:	085b      	lsrmi	r3, r3, #1
 800d866:	089b      	lsrpl	r3, r3, #2
 800d868:	2001      	movmi	r0, #1
 800d86a:	6013      	strmi	r3, [r2, #0]
 800d86c:	bf5c      	itt	pl
 800d86e:	2002      	movpl	r0, #2
 800d870:	6013      	strpl	r3, [r2, #0]
 800d872:	4770      	bx	lr
 800d874:	b299      	uxth	r1, r3
 800d876:	b909      	cbnz	r1, 800d87c <__lo0bits+0x2a>
 800d878:	2010      	movs	r0, #16
 800d87a:	0c1b      	lsrs	r3, r3, #16
 800d87c:	b2d9      	uxtb	r1, r3
 800d87e:	b909      	cbnz	r1, 800d884 <__lo0bits+0x32>
 800d880:	3008      	adds	r0, #8
 800d882:	0a1b      	lsrs	r3, r3, #8
 800d884:	0719      	lsls	r1, r3, #28
 800d886:	bf04      	itt	eq
 800d888:	091b      	lsreq	r3, r3, #4
 800d88a:	3004      	addeq	r0, #4
 800d88c:	0799      	lsls	r1, r3, #30
 800d88e:	bf04      	itt	eq
 800d890:	089b      	lsreq	r3, r3, #2
 800d892:	3002      	addeq	r0, #2
 800d894:	07d9      	lsls	r1, r3, #31
 800d896:	d403      	bmi.n	800d8a0 <__lo0bits+0x4e>
 800d898:	085b      	lsrs	r3, r3, #1
 800d89a:	f100 0001 	add.w	r0, r0, #1
 800d89e:	d003      	beq.n	800d8a8 <__lo0bits+0x56>
 800d8a0:	6013      	str	r3, [r2, #0]
 800d8a2:	4770      	bx	lr
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	4770      	bx	lr
 800d8a8:	2020      	movs	r0, #32
 800d8aa:	4770      	bx	lr

0800d8ac <__i2b>:
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	2101      	movs	r1, #1
 800d8b2:	f7ff ff07 	bl	800d6c4 <_Balloc>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	b928      	cbnz	r0, 800d8c6 <__i2b+0x1a>
 800d8ba:	f240 1145 	movw	r1, #325	@ 0x145
 800d8be:	4b04      	ldr	r3, [pc, #16]	@ (800d8d0 <__i2b+0x24>)
 800d8c0:	4804      	ldr	r0, [pc, #16]	@ (800d8d4 <__i2b+0x28>)
 800d8c2:	f000 fc87 	bl	800e1d4 <__assert_func>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	6144      	str	r4, [r0, #20]
 800d8ca:	6103      	str	r3, [r0, #16]
 800d8cc:	bd10      	pop	{r4, pc}
 800d8ce:	bf00      	nop
 800d8d0:	0800f394 	.word	0x0800f394
 800d8d4:	0800f3b6 	.word	0x0800f3b6

0800d8d8 <__multiply>:
 800d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8dc:	4614      	mov	r4, r2
 800d8de:	690a      	ldr	r2, [r1, #16]
 800d8e0:	6923      	ldr	r3, [r4, #16]
 800d8e2:	460f      	mov	r7, r1
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	bfa2      	ittt	ge
 800d8e8:	4623      	movge	r3, r4
 800d8ea:	460c      	movge	r4, r1
 800d8ec:	461f      	movge	r7, r3
 800d8ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d8f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d8f6:	68a3      	ldr	r3, [r4, #8]
 800d8f8:	6861      	ldr	r1, [r4, #4]
 800d8fa:	eb0a 0609 	add.w	r6, sl, r9
 800d8fe:	42b3      	cmp	r3, r6
 800d900:	b085      	sub	sp, #20
 800d902:	bfb8      	it	lt
 800d904:	3101      	addlt	r1, #1
 800d906:	f7ff fedd 	bl	800d6c4 <_Balloc>
 800d90a:	b930      	cbnz	r0, 800d91a <__multiply+0x42>
 800d90c:	4602      	mov	r2, r0
 800d90e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d912:	4b43      	ldr	r3, [pc, #268]	@ (800da20 <__multiply+0x148>)
 800d914:	4843      	ldr	r0, [pc, #268]	@ (800da24 <__multiply+0x14c>)
 800d916:	f000 fc5d 	bl	800e1d4 <__assert_func>
 800d91a:	f100 0514 	add.w	r5, r0, #20
 800d91e:	462b      	mov	r3, r5
 800d920:	2200      	movs	r2, #0
 800d922:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d926:	4543      	cmp	r3, r8
 800d928:	d321      	bcc.n	800d96e <__multiply+0x96>
 800d92a:	f107 0114 	add.w	r1, r7, #20
 800d92e:	f104 0214 	add.w	r2, r4, #20
 800d932:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d936:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d93a:	9302      	str	r3, [sp, #8]
 800d93c:	1b13      	subs	r3, r2, r4
 800d93e:	3b15      	subs	r3, #21
 800d940:	f023 0303 	bic.w	r3, r3, #3
 800d944:	3304      	adds	r3, #4
 800d946:	f104 0715 	add.w	r7, r4, #21
 800d94a:	42ba      	cmp	r2, r7
 800d94c:	bf38      	it	cc
 800d94e:	2304      	movcc	r3, #4
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	9b02      	ldr	r3, [sp, #8]
 800d954:	9103      	str	r1, [sp, #12]
 800d956:	428b      	cmp	r3, r1
 800d958:	d80c      	bhi.n	800d974 <__multiply+0x9c>
 800d95a:	2e00      	cmp	r6, #0
 800d95c:	dd03      	ble.n	800d966 <__multiply+0x8e>
 800d95e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d962:	2b00      	cmp	r3, #0
 800d964:	d05a      	beq.n	800da1c <__multiply+0x144>
 800d966:	6106      	str	r6, [r0, #16]
 800d968:	b005      	add	sp, #20
 800d96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96e:	f843 2b04 	str.w	r2, [r3], #4
 800d972:	e7d8      	b.n	800d926 <__multiply+0x4e>
 800d974:	f8b1 a000 	ldrh.w	sl, [r1]
 800d978:	f1ba 0f00 	cmp.w	sl, #0
 800d97c:	d023      	beq.n	800d9c6 <__multiply+0xee>
 800d97e:	46a9      	mov	r9, r5
 800d980:	f04f 0c00 	mov.w	ip, #0
 800d984:	f104 0e14 	add.w	lr, r4, #20
 800d988:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d98c:	f8d9 3000 	ldr.w	r3, [r9]
 800d990:	fa1f fb87 	uxth.w	fp, r7
 800d994:	b29b      	uxth	r3, r3
 800d996:	fb0a 330b 	mla	r3, sl, fp, r3
 800d99a:	4463      	add	r3, ip
 800d99c:	f8d9 c000 	ldr.w	ip, [r9]
 800d9a0:	0c3f      	lsrs	r7, r7, #16
 800d9a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d9a6:	fb0a c707 	mla	r7, sl, r7, ip
 800d9aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9b4:	4572      	cmp	r2, lr
 800d9b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9ba:	f849 3b04 	str.w	r3, [r9], #4
 800d9be:	d8e3      	bhi.n	800d988 <__multiply+0xb0>
 800d9c0:	9b01      	ldr	r3, [sp, #4]
 800d9c2:	f845 c003 	str.w	ip, [r5, r3]
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	3104      	adds	r1, #4
 800d9ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d9ce:	f1b9 0f00 	cmp.w	r9, #0
 800d9d2:	d021      	beq.n	800da18 <__multiply+0x140>
 800d9d4:	46ae      	mov	lr, r5
 800d9d6:	f04f 0a00 	mov.w	sl, #0
 800d9da:	682b      	ldr	r3, [r5, #0]
 800d9dc:	f104 0c14 	add.w	ip, r4, #20
 800d9e0:	f8bc b000 	ldrh.w	fp, [ip]
 800d9e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	fb09 770b 	mla	r7, r9, fp, r7
 800d9ee:	4457      	add	r7, sl
 800d9f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9f4:	f84e 3b04 	str.w	r3, [lr], #4
 800d9f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da00:	f8be 3000 	ldrh.w	r3, [lr]
 800da04:	4562      	cmp	r2, ip
 800da06:	fb09 330a 	mla	r3, r9, sl, r3
 800da0a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da12:	d8e5      	bhi.n	800d9e0 <__multiply+0x108>
 800da14:	9f01      	ldr	r7, [sp, #4]
 800da16:	51eb      	str	r3, [r5, r7]
 800da18:	3504      	adds	r5, #4
 800da1a:	e79a      	b.n	800d952 <__multiply+0x7a>
 800da1c:	3e01      	subs	r6, #1
 800da1e:	e79c      	b.n	800d95a <__multiply+0x82>
 800da20:	0800f394 	.word	0x0800f394
 800da24:	0800f3b6 	.word	0x0800f3b6

0800da28 <__pow5mult>:
 800da28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da2c:	4615      	mov	r5, r2
 800da2e:	f012 0203 	ands.w	r2, r2, #3
 800da32:	4607      	mov	r7, r0
 800da34:	460e      	mov	r6, r1
 800da36:	d007      	beq.n	800da48 <__pow5mult+0x20>
 800da38:	4c25      	ldr	r4, [pc, #148]	@ (800dad0 <__pow5mult+0xa8>)
 800da3a:	3a01      	subs	r2, #1
 800da3c:	2300      	movs	r3, #0
 800da3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da42:	f7ff fea1 	bl	800d788 <__multadd>
 800da46:	4606      	mov	r6, r0
 800da48:	10ad      	asrs	r5, r5, #2
 800da4a:	d03d      	beq.n	800dac8 <__pow5mult+0xa0>
 800da4c:	69fc      	ldr	r4, [r7, #28]
 800da4e:	b97c      	cbnz	r4, 800da70 <__pow5mult+0x48>
 800da50:	2010      	movs	r0, #16
 800da52:	f7ff fd81 	bl	800d558 <malloc>
 800da56:	4602      	mov	r2, r0
 800da58:	61f8      	str	r0, [r7, #28]
 800da5a:	b928      	cbnz	r0, 800da68 <__pow5mult+0x40>
 800da5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da60:	4b1c      	ldr	r3, [pc, #112]	@ (800dad4 <__pow5mult+0xac>)
 800da62:	481d      	ldr	r0, [pc, #116]	@ (800dad8 <__pow5mult+0xb0>)
 800da64:	f000 fbb6 	bl	800e1d4 <__assert_func>
 800da68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da6c:	6004      	str	r4, [r0, #0]
 800da6e:	60c4      	str	r4, [r0, #12]
 800da70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da78:	b94c      	cbnz	r4, 800da8e <__pow5mult+0x66>
 800da7a:	f240 2171 	movw	r1, #625	@ 0x271
 800da7e:	4638      	mov	r0, r7
 800da80:	f7ff ff14 	bl	800d8ac <__i2b>
 800da84:	2300      	movs	r3, #0
 800da86:	4604      	mov	r4, r0
 800da88:	f8c8 0008 	str.w	r0, [r8, #8]
 800da8c:	6003      	str	r3, [r0, #0]
 800da8e:	f04f 0900 	mov.w	r9, #0
 800da92:	07eb      	lsls	r3, r5, #31
 800da94:	d50a      	bpl.n	800daac <__pow5mult+0x84>
 800da96:	4631      	mov	r1, r6
 800da98:	4622      	mov	r2, r4
 800da9a:	4638      	mov	r0, r7
 800da9c:	f7ff ff1c 	bl	800d8d8 <__multiply>
 800daa0:	4680      	mov	r8, r0
 800daa2:	4631      	mov	r1, r6
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff fe4d 	bl	800d744 <_Bfree>
 800daaa:	4646      	mov	r6, r8
 800daac:	106d      	asrs	r5, r5, #1
 800daae:	d00b      	beq.n	800dac8 <__pow5mult+0xa0>
 800dab0:	6820      	ldr	r0, [r4, #0]
 800dab2:	b938      	cbnz	r0, 800dac4 <__pow5mult+0x9c>
 800dab4:	4622      	mov	r2, r4
 800dab6:	4621      	mov	r1, r4
 800dab8:	4638      	mov	r0, r7
 800daba:	f7ff ff0d 	bl	800d8d8 <__multiply>
 800dabe:	6020      	str	r0, [r4, #0]
 800dac0:	f8c0 9000 	str.w	r9, [r0]
 800dac4:	4604      	mov	r4, r0
 800dac6:	e7e4      	b.n	800da92 <__pow5mult+0x6a>
 800dac8:	4630      	mov	r0, r6
 800daca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dace:	bf00      	nop
 800dad0:	0800f410 	.word	0x0800f410
 800dad4:	0800f325 	.word	0x0800f325
 800dad8:	0800f3b6 	.word	0x0800f3b6

0800dadc <__lshift>:
 800dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae0:	460c      	mov	r4, r1
 800dae2:	4607      	mov	r7, r0
 800dae4:	4691      	mov	r9, r2
 800dae6:	6923      	ldr	r3, [r4, #16]
 800dae8:	6849      	ldr	r1, [r1, #4]
 800daea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800daee:	68a3      	ldr	r3, [r4, #8]
 800daf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800daf4:	f108 0601 	add.w	r6, r8, #1
 800daf8:	42b3      	cmp	r3, r6
 800dafa:	db0b      	blt.n	800db14 <__lshift+0x38>
 800dafc:	4638      	mov	r0, r7
 800dafe:	f7ff fde1 	bl	800d6c4 <_Balloc>
 800db02:	4605      	mov	r5, r0
 800db04:	b948      	cbnz	r0, 800db1a <__lshift+0x3e>
 800db06:	4602      	mov	r2, r0
 800db08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db0c:	4b27      	ldr	r3, [pc, #156]	@ (800dbac <__lshift+0xd0>)
 800db0e:	4828      	ldr	r0, [pc, #160]	@ (800dbb0 <__lshift+0xd4>)
 800db10:	f000 fb60 	bl	800e1d4 <__assert_func>
 800db14:	3101      	adds	r1, #1
 800db16:	005b      	lsls	r3, r3, #1
 800db18:	e7ee      	b.n	800daf8 <__lshift+0x1c>
 800db1a:	2300      	movs	r3, #0
 800db1c:	f100 0114 	add.w	r1, r0, #20
 800db20:	f100 0210 	add.w	r2, r0, #16
 800db24:	4618      	mov	r0, r3
 800db26:	4553      	cmp	r3, sl
 800db28:	db33      	blt.n	800db92 <__lshift+0xb6>
 800db2a:	6920      	ldr	r0, [r4, #16]
 800db2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db30:	f104 0314 	add.w	r3, r4, #20
 800db34:	f019 091f 	ands.w	r9, r9, #31
 800db38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db40:	d02b      	beq.n	800db9a <__lshift+0xbe>
 800db42:	468a      	mov	sl, r1
 800db44:	2200      	movs	r2, #0
 800db46:	f1c9 0e20 	rsb	lr, r9, #32
 800db4a:	6818      	ldr	r0, [r3, #0]
 800db4c:	fa00 f009 	lsl.w	r0, r0, r9
 800db50:	4310      	orrs	r0, r2
 800db52:	f84a 0b04 	str.w	r0, [sl], #4
 800db56:	f853 2b04 	ldr.w	r2, [r3], #4
 800db5a:	459c      	cmp	ip, r3
 800db5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800db60:	d8f3      	bhi.n	800db4a <__lshift+0x6e>
 800db62:	ebac 0304 	sub.w	r3, ip, r4
 800db66:	3b15      	subs	r3, #21
 800db68:	f023 0303 	bic.w	r3, r3, #3
 800db6c:	3304      	adds	r3, #4
 800db6e:	f104 0015 	add.w	r0, r4, #21
 800db72:	4584      	cmp	ip, r0
 800db74:	bf38      	it	cc
 800db76:	2304      	movcc	r3, #4
 800db78:	50ca      	str	r2, [r1, r3]
 800db7a:	b10a      	cbz	r2, 800db80 <__lshift+0xa4>
 800db7c:	f108 0602 	add.w	r6, r8, #2
 800db80:	3e01      	subs	r6, #1
 800db82:	4638      	mov	r0, r7
 800db84:	4621      	mov	r1, r4
 800db86:	612e      	str	r6, [r5, #16]
 800db88:	f7ff fddc 	bl	800d744 <_Bfree>
 800db8c:	4628      	mov	r0, r5
 800db8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db92:	f842 0f04 	str.w	r0, [r2, #4]!
 800db96:	3301      	adds	r3, #1
 800db98:	e7c5      	b.n	800db26 <__lshift+0x4a>
 800db9a:	3904      	subs	r1, #4
 800db9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dba0:	459c      	cmp	ip, r3
 800dba2:	f841 2f04 	str.w	r2, [r1, #4]!
 800dba6:	d8f9      	bhi.n	800db9c <__lshift+0xc0>
 800dba8:	e7ea      	b.n	800db80 <__lshift+0xa4>
 800dbaa:	bf00      	nop
 800dbac:	0800f394 	.word	0x0800f394
 800dbb0:	0800f3b6 	.word	0x0800f3b6

0800dbb4 <__mcmp>:
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	690a      	ldr	r2, [r1, #16]
 800dbb8:	6900      	ldr	r0, [r0, #16]
 800dbba:	b530      	push	{r4, r5, lr}
 800dbbc:	1a80      	subs	r0, r0, r2
 800dbbe:	d10e      	bne.n	800dbde <__mcmp+0x2a>
 800dbc0:	3314      	adds	r3, #20
 800dbc2:	3114      	adds	r1, #20
 800dbc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dbc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dbcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dbd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dbd4:	4295      	cmp	r5, r2
 800dbd6:	d003      	beq.n	800dbe0 <__mcmp+0x2c>
 800dbd8:	d205      	bcs.n	800dbe6 <__mcmp+0x32>
 800dbda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbde:	bd30      	pop	{r4, r5, pc}
 800dbe0:	42a3      	cmp	r3, r4
 800dbe2:	d3f3      	bcc.n	800dbcc <__mcmp+0x18>
 800dbe4:	e7fb      	b.n	800dbde <__mcmp+0x2a>
 800dbe6:	2001      	movs	r0, #1
 800dbe8:	e7f9      	b.n	800dbde <__mcmp+0x2a>
	...

0800dbec <__mdiff>:
 800dbec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf0:	4689      	mov	r9, r1
 800dbf2:	4606      	mov	r6, r0
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	4648      	mov	r0, r9
 800dbf8:	4614      	mov	r4, r2
 800dbfa:	f7ff ffdb 	bl	800dbb4 <__mcmp>
 800dbfe:	1e05      	subs	r5, r0, #0
 800dc00:	d112      	bne.n	800dc28 <__mdiff+0x3c>
 800dc02:	4629      	mov	r1, r5
 800dc04:	4630      	mov	r0, r6
 800dc06:	f7ff fd5d 	bl	800d6c4 <_Balloc>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	b928      	cbnz	r0, 800dc1a <__mdiff+0x2e>
 800dc0e:	f240 2137 	movw	r1, #567	@ 0x237
 800dc12:	4b3e      	ldr	r3, [pc, #248]	@ (800dd0c <__mdiff+0x120>)
 800dc14:	483e      	ldr	r0, [pc, #248]	@ (800dd10 <__mdiff+0x124>)
 800dc16:	f000 fadd 	bl	800e1d4 <__assert_func>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc20:	4610      	mov	r0, r2
 800dc22:	b003      	add	sp, #12
 800dc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc28:	bfbc      	itt	lt
 800dc2a:	464b      	movlt	r3, r9
 800dc2c:	46a1      	movlt	r9, r4
 800dc2e:	4630      	mov	r0, r6
 800dc30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc34:	bfba      	itte	lt
 800dc36:	461c      	movlt	r4, r3
 800dc38:	2501      	movlt	r5, #1
 800dc3a:	2500      	movge	r5, #0
 800dc3c:	f7ff fd42 	bl	800d6c4 <_Balloc>
 800dc40:	4602      	mov	r2, r0
 800dc42:	b918      	cbnz	r0, 800dc4c <__mdiff+0x60>
 800dc44:	f240 2145 	movw	r1, #581	@ 0x245
 800dc48:	4b30      	ldr	r3, [pc, #192]	@ (800dd0c <__mdiff+0x120>)
 800dc4a:	e7e3      	b.n	800dc14 <__mdiff+0x28>
 800dc4c:	f100 0b14 	add.w	fp, r0, #20
 800dc50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc54:	f109 0310 	add.w	r3, r9, #16
 800dc58:	60c5      	str	r5, [r0, #12]
 800dc5a:	f04f 0c00 	mov.w	ip, #0
 800dc5e:	f109 0514 	add.w	r5, r9, #20
 800dc62:	46d9      	mov	r9, fp
 800dc64:	6926      	ldr	r6, [r4, #16]
 800dc66:	f104 0e14 	add.w	lr, r4, #20
 800dc6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc72:	9301      	str	r3, [sp, #4]
 800dc74:	9b01      	ldr	r3, [sp, #4]
 800dc76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc7e:	b281      	uxth	r1, r0
 800dc80:	9301      	str	r3, [sp, #4]
 800dc82:	fa1f f38a 	uxth.w	r3, sl
 800dc86:	1a5b      	subs	r3, r3, r1
 800dc88:	0c00      	lsrs	r0, r0, #16
 800dc8a:	4463      	add	r3, ip
 800dc8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc9a:	4576      	cmp	r6, lr
 800dc9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dca0:	f849 3b04 	str.w	r3, [r9], #4
 800dca4:	d8e6      	bhi.n	800dc74 <__mdiff+0x88>
 800dca6:	1b33      	subs	r3, r6, r4
 800dca8:	3b15      	subs	r3, #21
 800dcaa:	f023 0303 	bic.w	r3, r3, #3
 800dcae:	3415      	adds	r4, #21
 800dcb0:	3304      	adds	r3, #4
 800dcb2:	42a6      	cmp	r6, r4
 800dcb4:	bf38      	it	cc
 800dcb6:	2304      	movcc	r3, #4
 800dcb8:	441d      	add	r5, r3
 800dcba:	445b      	add	r3, fp
 800dcbc:	461e      	mov	r6, r3
 800dcbe:	462c      	mov	r4, r5
 800dcc0:	4544      	cmp	r4, r8
 800dcc2:	d30e      	bcc.n	800dce2 <__mdiff+0xf6>
 800dcc4:	f108 0103 	add.w	r1, r8, #3
 800dcc8:	1b49      	subs	r1, r1, r5
 800dcca:	f021 0103 	bic.w	r1, r1, #3
 800dcce:	3d03      	subs	r5, #3
 800dcd0:	45a8      	cmp	r8, r5
 800dcd2:	bf38      	it	cc
 800dcd4:	2100      	movcc	r1, #0
 800dcd6:	440b      	add	r3, r1
 800dcd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcdc:	b199      	cbz	r1, 800dd06 <__mdiff+0x11a>
 800dcde:	6117      	str	r7, [r2, #16]
 800dce0:	e79e      	b.n	800dc20 <__mdiff+0x34>
 800dce2:	46e6      	mov	lr, ip
 800dce4:	f854 1b04 	ldr.w	r1, [r4], #4
 800dce8:	fa1f fc81 	uxth.w	ip, r1
 800dcec:	44f4      	add	ip, lr
 800dcee:	0c08      	lsrs	r0, r1, #16
 800dcf0:	4471      	add	r1, lr
 800dcf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dcf6:	b289      	uxth	r1, r1
 800dcf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dcfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd00:	f846 1b04 	str.w	r1, [r6], #4
 800dd04:	e7dc      	b.n	800dcc0 <__mdiff+0xd4>
 800dd06:	3f01      	subs	r7, #1
 800dd08:	e7e6      	b.n	800dcd8 <__mdiff+0xec>
 800dd0a:	bf00      	nop
 800dd0c:	0800f394 	.word	0x0800f394
 800dd10:	0800f3b6 	.word	0x0800f3b6

0800dd14 <__d2b>:
 800dd14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800dd18:	2101      	movs	r1, #1
 800dd1a:	4690      	mov	r8, r2
 800dd1c:	4699      	mov	r9, r3
 800dd1e:	9e08      	ldr	r6, [sp, #32]
 800dd20:	f7ff fcd0 	bl	800d6c4 <_Balloc>
 800dd24:	4604      	mov	r4, r0
 800dd26:	b930      	cbnz	r0, 800dd36 <__d2b+0x22>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd2e:	4b23      	ldr	r3, [pc, #140]	@ (800ddbc <__d2b+0xa8>)
 800dd30:	4823      	ldr	r0, [pc, #140]	@ (800ddc0 <__d2b+0xac>)
 800dd32:	f000 fa4f 	bl	800e1d4 <__assert_func>
 800dd36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd3e:	b10d      	cbz	r5, 800dd44 <__d2b+0x30>
 800dd40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd44:	9301      	str	r3, [sp, #4]
 800dd46:	f1b8 0300 	subs.w	r3, r8, #0
 800dd4a:	d024      	beq.n	800dd96 <__d2b+0x82>
 800dd4c:	4668      	mov	r0, sp
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	f7ff fd7f 	bl	800d852 <__lo0bits>
 800dd54:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd58:	b1d8      	cbz	r0, 800dd92 <__d2b+0x7e>
 800dd5a:	f1c0 0320 	rsb	r3, r0, #32
 800dd5e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd62:	430b      	orrs	r3, r1
 800dd64:	40c2      	lsrs	r2, r0
 800dd66:	6163      	str	r3, [r4, #20]
 800dd68:	9201      	str	r2, [sp, #4]
 800dd6a:	9b01      	ldr	r3, [sp, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	bf0c      	ite	eq
 800dd70:	2201      	moveq	r2, #1
 800dd72:	2202      	movne	r2, #2
 800dd74:	61a3      	str	r3, [r4, #24]
 800dd76:	6122      	str	r2, [r4, #16]
 800dd78:	b1ad      	cbz	r5, 800dda6 <__d2b+0x92>
 800dd7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd7e:	4405      	add	r5, r0
 800dd80:	6035      	str	r5, [r6, #0]
 800dd82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd88:	6018      	str	r0, [r3, #0]
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	b002      	add	sp, #8
 800dd8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800dd92:	6161      	str	r1, [r4, #20]
 800dd94:	e7e9      	b.n	800dd6a <__d2b+0x56>
 800dd96:	a801      	add	r0, sp, #4
 800dd98:	f7ff fd5b 	bl	800d852 <__lo0bits>
 800dd9c:	9b01      	ldr	r3, [sp, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	6163      	str	r3, [r4, #20]
 800dda2:	3020      	adds	r0, #32
 800dda4:	e7e7      	b.n	800dd76 <__d2b+0x62>
 800dda6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddae:	6030      	str	r0, [r6, #0]
 800ddb0:	6918      	ldr	r0, [r3, #16]
 800ddb2:	f7ff fd2f 	bl	800d814 <__hi0bits>
 800ddb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddba:	e7e4      	b.n	800dd86 <__d2b+0x72>
 800ddbc:	0800f394 	.word	0x0800f394
 800ddc0:	0800f3b6 	.word	0x0800f3b6

0800ddc4 <__sread>:
 800ddc4:	b510      	push	{r4, lr}
 800ddc6:	460c      	mov	r4, r1
 800ddc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddcc:	f000 f9c0 	bl	800e150 <_read_r>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	bfab      	itete	ge
 800ddd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ddd6:	89a3      	ldrhlt	r3, [r4, #12]
 800ddd8:	181b      	addge	r3, r3, r0
 800ddda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ddde:	bfac      	ite	ge
 800dde0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dde2:	81a3      	strhlt	r3, [r4, #12]
 800dde4:	bd10      	pop	{r4, pc}

0800dde6 <__swrite>:
 800dde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddea:	461f      	mov	r7, r3
 800ddec:	898b      	ldrh	r3, [r1, #12]
 800ddee:	4605      	mov	r5, r0
 800ddf0:	05db      	lsls	r3, r3, #23
 800ddf2:	460c      	mov	r4, r1
 800ddf4:	4616      	mov	r6, r2
 800ddf6:	d505      	bpl.n	800de04 <__swrite+0x1e>
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de00:	f000 f994 	bl	800e12c <_lseek_r>
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	4632      	mov	r2, r6
 800de08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de0c:	81a3      	strh	r3, [r4, #12]
 800de0e:	4628      	mov	r0, r5
 800de10:	463b      	mov	r3, r7
 800de12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de1a:	f000 b9bb 	b.w	800e194 <_write_r>

0800de1e <__sseek>:
 800de1e:	b510      	push	{r4, lr}
 800de20:	460c      	mov	r4, r1
 800de22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de26:	f000 f981 	bl	800e12c <_lseek_r>
 800de2a:	1c43      	adds	r3, r0, #1
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	bf15      	itete	ne
 800de30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800de32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800de36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800de3a:	81a3      	strheq	r3, [r4, #12]
 800de3c:	bf18      	it	ne
 800de3e:	81a3      	strhne	r3, [r4, #12]
 800de40:	bd10      	pop	{r4, pc}

0800de42 <__sclose>:
 800de42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de46:	f000 b93f 	b.w	800e0c8 <_close_r>

0800de4a <_realloc_r>:
 800de4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4e:	4680      	mov	r8, r0
 800de50:	4615      	mov	r5, r2
 800de52:	460c      	mov	r4, r1
 800de54:	b921      	cbnz	r1, 800de60 <_realloc_r+0x16>
 800de56:	4611      	mov	r1, r2
 800de58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de5c:	f7ff bba6 	b.w	800d5ac <_malloc_r>
 800de60:	b92a      	cbnz	r2, 800de6e <_realloc_r+0x24>
 800de62:	f7ff f899 	bl	800cf98 <_free_r>
 800de66:	2400      	movs	r4, #0
 800de68:	4620      	mov	r0, r4
 800de6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6e:	f000 f9f5 	bl	800e25c <_malloc_usable_size_r>
 800de72:	4285      	cmp	r5, r0
 800de74:	4606      	mov	r6, r0
 800de76:	d802      	bhi.n	800de7e <_realloc_r+0x34>
 800de78:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800de7c:	d8f4      	bhi.n	800de68 <_realloc_r+0x1e>
 800de7e:	4629      	mov	r1, r5
 800de80:	4640      	mov	r0, r8
 800de82:	f7ff fb93 	bl	800d5ac <_malloc_r>
 800de86:	4607      	mov	r7, r0
 800de88:	2800      	cmp	r0, #0
 800de8a:	d0ec      	beq.n	800de66 <_realloc_r+0x1c>
 800de8c:	42b5      	cmp	r5, r6
 800de8e:	462a      	mov	r2, r5
 800de90:	4621      	mov	r1, r4
 800de92:	bf28      	it	cs
 800de94:	4632      	movcs	r2, r6
 800de96:	f000 f98f 	bl	800e1b8 <memcpy>
 800de9a:	4621      	mov	r1, r4
 800de9c:	4640      	mov	r0, r8
 800de9e:	f7ff f87b 	bl	800cf98 <_free_r>
 800dea2:	463c      	mov	r4, r7
 800dea4:	e7e0      	b.n	800de68 <_realloc_r+0x1e>

0800dea6 <__swbuf_r>:
 800dea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea8:	460e      	mov	r6, r1
 800deaa:	4614      	mov	r4, r2
 800deac:	4605      	mov	r5, r0
 800deae:	b118      	cbz	r0, 800deb8 <__swbuf_r+0x12>
 800deb0:	6a03      	ldr	r3, [r0, #32]
 800deb2:	b90b      	cbnz	r3, 800deb8 <__swbuf_r+0x12>
 800deb4:	f7fe f912 	bl	800c0dc <__sinit>
 800deb8:	69a3      	ldr	r3, [r4, #24]
 800deba:	60a3      	str	r3, [r4, #8]
 800debc:	89a3      	ldrh	r3, [r4, #12]
 800debe:	071a      	lsls	r2, r3, #28
 800dec0:	d501      	bpl.n	800dec6 <__swbuf_r+0x20>
 800dec2:	6923      	ldr	r3, [r4, #16]
 800dec4:	b943      	cbnz	r3, 800ded8 <__swbuf_r+0x32>
 800dec6:	4621      	mov	r1, r4
 800dec8:	4628      	mov	r0, r5
 800deca:	f000 f82b 	bl	800df24 <__swsetup_r>
 800dece:	b118      	cbz	r0, 800ded8 <__swbuf_r+0x32>
 800ded0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ded4:	4638      	mov	r0, r7
 800ded6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	6922      	ldr	r2, [r4, #16]
 800dedc:	b2f6      	uxtb	r6, r6
 800dede:	1a98      	subs	r0, r3, r2
 800dee0:	6963      	ldr	r3, [r4, #20]
 800dee2:	4637      	mov	r7, r6
 800dee4:	4283      	cmp	r3, r0
 800dee6:	dc05      	bgt.n	800def4 <__swbuf_r+0x4e>
 800dee8:	4621      	mov	r1, r4
 800deea:	4628      	mov	r0, r5
 800deec:	f7fd fffa 	bl	800bee4 <_fflush_r>
 800def0:	2800      	cmp	r0, #0
 800def2:	d1ed      	bne.n	800ded0 <__swbuf_r+0x2a>
 800def4:	68a3      	ldr	r3, [r4, #8]
 800def6:	3b01      	subs	r3, #1
 800def8:	60a3      	str	r3, [r4, #8]
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	6022      	str	r2, [r4, #0]
 800df00:	701e      	strb	r6, [r3, #0]
 800df02:	6962      	ldr	r2, [r4, #20]
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	429a      	cmp	r2, r3
 800df08:	d004      	beq.n	800df14 <__swbuf_r+0x6e>
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	07db      	lsls	r3, r3, #31
 800df0e:	d5e1      	bpl.n	800ded4 <__swbuf_r+0x2e>
 800df10:	2e0a      	cmp	r6, #10
 800df12:	d1df      	bne.n	800ded4 <__swbuf_r+0x2e>
 800df14:	4621      	mov	r1, r4
 800df16:	4628      	mov	r0, r5
 800df18:	f7fd ffe4 	bl	800bee4 <_fflush_r>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d0d9      	beq.n	800ded4 <__swbuf_r+0x2e>
 800df20:	e7d6      	b.n	800ded0 <__swbuf_r+0x2a>
	...

0800df24 <__swsetup_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4b29      	ldr	r3, [pc, #164]	@ (800dfcc <__swsetup_r+0xa8>)
 800df28:	4605      	mov	r5, r0
 800df2a:	6818      	ldr	r0, [r3, #0]
 800df2c:	460c      	mov	r4, r1
 800df2e:	b118      	cbz	r0, 800df38 <__swsetup_r+0x14>
 800df30:	6a03      	ldr	r3, [r0, #32]
 800df32:	b90b      	cbnz	r3, 800df38 <__swsetup_r+0x14>
 800df34:	f7fe f8d2 	bl	800c0dc <__sinit>
 800df38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df3c:	0719      	lsls	r1, r3, #28
 800df3e:	d422      	bmi.n	800df86 <__swsetup_r+0x62>
 800df40:	06da      	lsls	r2, r3, #27
 800df42:	d407      	bmi.n	800df54 <__swsetup_r+0x30>
 800df44:	2209      	movs	r2, #9
 800df46:	602a      	str	r2, [r5, #0]
 800df48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df50:	81a3      	strh	r3, [r4, #12]
 800df52:	e033      	b.n	800dfbc <__swsetup_r+0x98>
 800df54:	0758      	lsls	r0, r3, #29
 800df56:	d512      	bpl.n	800df7e <__swsetup_r+0x5a>
 800df58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800df5a:	b141      	cbz	r1, 800df6e <__swsetup_r+0x4a>
 800df5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df60:	4299      	cmp	r1, r3
 800df62:	d002      	beq.n	800df6a <__swsetup_r+0x46>
 800df64:	4628      	mov	r0, r5
 800df66:	f7ff f817 	bl	800cf98 <_free_r>
 800df6a:	2300      	movs	r3, #0
 800df6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800df6e:	89a3      	ldrh	r3, [r4, #12]
 800df70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df74:	81a3      	strh	r3, [r4, #12]
 800df76:	2300      	movs	r3, #0
 800df78:	6063      	str	r3, [r4, #4]
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	6023      	str	r3, [r4, #0]
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	f043 0308 	orr.w	r3, r3, #8
 800df84:	81a3      	strh	r3, [r4, #12]
 800df86:	6923      	ldr	r3, [r4, #16]
 800df88:	b94b      	cbnz	r3, 800df9e <__swsetup_r+0x7a>
 800df8a:	89a3      	ldrh	r3, [r4, #12]
 800df8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df94:	d003      	beq.n	800df9e <__swsetup_r+0x7a>
 800df96:	4621      	mov	r1, r4
 800df98:	4628      	mov	r0, r5
 800df9a:	f000 f83e 	bl	800e01a <__smakebuf_r>
 800df9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfa2:	f013 0201 	ands.w	r2, r3, #1
 800dfa6:	d00a      	beq.n	800dfbe <__swsetup_r+0x9a>
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	60a2      	str	r2, [r4, #8]
 800dfac:	6962      	ldr	r2, [r4, #20]
 800dfae:	4252      	negs	r2, r2
 800dfb0:	61a2      	str	r2, [r4, #24]
 800dfb2:	6922      	ldr	r2, [r4, #16]
 800dfb4:	b942      	cbnz	r2, 800dfc8 <__swsetup_r+0xa4>
 800dfb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dfba:	d1c5      	bne.n	800df48 <__swsetup_r+0x24>
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	0799      	lsls	r1, r3, #30
 800dfc0:	bf58      	it	pl
 800dfc2:	6962      	ldrpl	r2, [r4, #20]
 800dfc4:	60a2      	str	r2, [r4, #8]
 800dfc6:	e7f4      	b.n	800dfb2 <__swsetup_r+0x8e>
 800dfc8:	2000      	movs	r0, #0
 800dfca:	e7f7      	b.n	800dfbc <__swsetup_r+0x98>
 800dfcc:	200000a8 	.word	0x200000a8

0800dfd0 <__swhatbuf_r>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfd8:	4615      	mov	r5, r2
 800dfda:	2900      	cmp	r1, #0
 800dfdc:	461e      	mov	r6, r3
 800dfde:	b096      	sub	sp, #88	@ 0x58
 800dfe0:	da0c      	bge.n	800dffc <__swhatbuf_r+0x2c>
 800dfe2:	89a3      	ldrh	r3, [r4, #12]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dfea:	bf14      	ite	ne
 800dfec:	2340      	movne	r3, #64	@ 0x40
 800dfee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dff2:	2000      	movs	r0, #0
 800dff4:	6031      	str	r1, [r6, #0]
 800dff6:	602b      	str	r3, [r5, #0]
 800dff8:	b016      	add	sp, #88	@ 0x58
 800dffa:	bd70      	pop	{r4, r5, r6, pc}
 800dffc:	466a      	mov	r2, sp
 800dffe:	f000 f873 	bl	800e0e8 <_fstat_r>
 800e002:	2800      	cmp	r0, #0
 800e004:	dbed      	blt.n	800dfe2 <__swhatbuf_r+0x12>
 800e006:	9901      	ldr	r1, [sp, #4]
 800e008:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e00c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e010:	4259      	negs	r1, r3
 800e012:	4159      	adcs	r1, r3
 800e014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e018:	e7eb      	b.n	800dff2 <__swhatbuf_r+0x22>

0800e01a <__smakebuf_r>:
 800e01a:	898b      	ldrh	r3, [r1, #12]
 800e01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e01e:	079d      	lsls	r5, r3, #30
 800e020:	4606      	mov	r6, r0
 800e022:	460c      	mov	r4, r1
 800e024:	d507      	bpl.n	800e036 <__smakebuf_r+0x1c>
 800e026:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e02a:	6023      	str	r3, [r4, #0]
 800e02c:	6123      	str	r3, [r4, #16]
 800e02e:	2301      	movs	r3, #1
 800e030:	6163      	str	r3, [r4, #20]
 800e032:	b003      	add	sp, #12
 800e034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e036:	466a      	mov	r2, sp
 800e038:	ab01      	add	r3, sp, #4
 800e03a:	f7ff ffc9 	bl	800dfd0 <__swhatbuf_r>
 800e03e:	9f00      	ldr	r7, [sp, #0]
 800e040:	4605      	mov	r5, r0
 800e042:	4639      	mov	r1, r7
 800e044:	4630      	mov	r0, r6
 800e046:	f7ff fab1 	bl	800d5ac <_malloc_r>
 800e04a:	b948      	cbnz	r0, 800e060 <__smakebuf_r+0x46>
 800e04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e050:	059a      	lsls	r2, r3, #22
 800e052:	d4ee      	bmi.n	800e032 <__smakebuf_r+0x18>
 800e054:	f023 0303 	bic.w	r3, r3, #3
 800e058:	f043 0302 	orr.w	r3, r3, #2
 800e05c:	81a3      	strh	r3, [r4, #12]
 800e05e:	e7e2      	b.n	800e026 <__smakebuf_r+0xc>
 800e060:	89a3      	ldrh	r3, [r4, #12]
 800e062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e06a:	81a3      	strh	r3, [r4, #12]
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	6020      	str	r0, [r4, #0]
 800e070:	b15b      	cbz	r3, 800e08a <__smakebuf_r+0x70>
 800e072:	4630      	mov	r0, r6
 800e074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e078:	f000 f848 	bl	800e10c <_isatty_r>
 800e07c:	b128      	cbz	r0, 800e08a <__smakebuf_r+0x70>
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	f023 0303 	bic.w	r3, r3, #3
 800e084:	f043 0301 	orr.w	r3, r3, #1
 800e088:	81a3      	strh	r3, [r4, #12]
 800e08a:	89a3      	ldrh	r3, [r4, #12]
 800e08c:	431d      	orrs	r5, r3
 800e08e:	81a5      	strh	r5, [r4, #12]
 800e090:	e7cf      	b.n	800e032 <__smakebuf_r+0x18>

0800e092 <memmove>:
 800e092:	4288      	cmp	r0, r1
 800e094:	b510      	push	{r4, lr}
 800e096:	eb01 0402 	add.w	r4, r1, r2
 800e09a:	d902      	bls.n	800e0a2 <memmove+0x10>
 800e09c:	4284      	cmp	r4, r0
 800e09e:	4623      	mov	r3, r4
 800e0a0:	d807      	bhi.n	800e0b2 <memmove+0x20>
 800e0a2:	1e43      	subs	r3, r0, #1
 800e0a4:	42a1      	cmp	r1, r4
 800e0a6:	d008      	beq.n	800e0ba <memmove+0x28>
 800e0a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0b0:	e7f8      	b.n	800e0a4 <memmove+0x12>
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	4402      	add	r2, r0
 800e0b6:	428a      	cmp	r2, r1
 800e0b8:	d100      	bne.n	800e0bc <memmove+0x2a>
 800e0ba:	bd10      	pop	{r4, pc}
 800e0bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0c4:	e7f7      	b.n	800e0b6 <memmove+0x24>
	...

0800e0c8 <_close_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4d05      	ldr	r5, [pc, #20]	@ (800e0e4 <_close_r+0x1c>)
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	4608      	mov	r0, r1
 800e0d2:	602b      	str	r3, [r5, #0]
 800e0d4:	f000 fa30 	bl	800e538 <_close>
 800e0d8:	1c43      	adds	r3, r0, #1
 800e0da:	d102      	bne.n	800e0e2 <_close_r+0x1a>
 800e0dc:	682b      	ldr	r3, [r5, #0]
 800e0de:	b103      	cbz	r3, 800e0e2 <_close_r+0x1a>
 800e0e0:	6023      	str	r3, [r4, #0]
 800e0e2:	bd38      	pop	{r3, r4, r5, pc}
 800e0e4:	20000774 	.word	0x20000774

0800e0e8 <_fstat_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	4d06      	ldr	r5, [pc, #24]	@ (800e108 <_fstat_r+0x20>)
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4608      	mov	r0, r1
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	602b      	str	r3, [r5, #0]
 800e0f6:	f000 fa88 	bl	800e60a <_fstat>
 800e0fa:	1c43      	adds	r3, r0, #1
 800e0fc:	d102      	bne.n	800e104 <_fstat_r+0x1c>
 800e0fe:	682b      	ldr	r3, [r5, #0]
 800e100:	b103      	cbz	r3, 800e104 <_fstat_r+0x1c>
 800e102:	6023      	str	r3, [r4, #0]
 800e104:	bd38      	pop	{r3, r4, r5, pc}
 800e106:	bf00      	nop
 800e108:	20000774 	.word	0x20000774

0800e10c <_isatty_r>:
 800e10c:	b538      	push	{r3, r4, r5, lr}
 800e10e:	2300      	movs	r3, #0
 800e110:	4d05      	ldr	r5, [pc, #20]	@ (800e128 <_isatty_r+0x1c>)
 800e112:	4604      	mov	r4, r0
 800e114:	4608      	mov	r0, r1
 800e116:	602b      	str	r3, [r5, #0]
 800e118:	f000 fbe6 	bl	800e8e8 <_isatty>
 800e11c:	1c43      	adds	r3, r0, #1
 800e11e:	d102      	bne.n	800e126 <_isatty_r+0x1a>
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	b103      	cbz	r3, 800e126 <_isatty_r+0x1a>
 800e124:	6023      	str	r3, [r4, #0]
 800e126:	bd38      	pop	{r3, r4, r5, pc}
 800e128:	20000774 	.word	0x20000774

0800e12c <_lseek_r>:
 800e12c:	b538      	push	{r3, r4, r5, lr}
 800e12e:	4604      	mov	r4, r0
 800e130:	4608      	mov	r0, r1
 800e132:	4611      	mov	r1, r2
 800e134:	2200      	movs	r2, #0
 800e136:	4d05      	ldr	r5, [pc, #20]	@ (800e14c <_lseek_r+0x20>)
 800e138:	602a      	str	r2, [r5, #0]
 800e13a:	461a      	mov	r2, r3
 800e13c:	f000 f9bd 	bl	800e4ba <_lseek>
 800e140:	1c43      	adds	r3, r0, #1
 800e142:	d102      	bne.n	800e14a <_lseek_r+0x1e>
 800e144:	682b      	ldr	r3, [r5, #0]
 800e146:	b103      	cbz	r3, 800e14a <_lseek_r+0x1e>
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	bd38      	pop	{r3, r4, r5, pc}
 800e14c:	20000774 	.word	0x20000774

0800e150 <_read_r>:
 800e150:	b538      	push	{r3, r4, r5, lr}
 800e152:	4604      	mov	r4, r0
 800e154:	4608      	mov	r0, r1
 800e156:	4611      	mov	r1, r2
 800e158:	2200      	movs	r2, #0
 800e15a:	4d05      	ldr	r5, [pc, #20]	@ (800e170 <_read_r+0x20>)
 800e15c:	602a      	str	r2, [r5, #0]
 800e15e:	461a      	mov	r2, r3
 800e160:	f000 f955 	bl	800e40e <_read>
 800e164:	1c43      	adds	r3, r0, #1
 800e166:	d102      	bne.n	800e16e <_read_r+0x1e>
 800e168:	682b      	ldr	r3, [r5, #0]
 800e16a:	b103      	cbz	r3, 800e16e <_read_r+0x1e>
 800e16c:	6023      	str	r3, [r4, #0]
 800e16e:	bd38      	pop	{r3, r4, r5, pc}
 800e170:	20000774 	.word	0x20000774

0800e174 <_sbrk_r>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	2300      	movs	r3, #0
 800e178:	4d05      	ldr	r5, [pc, #20]	@ (800e190 <_sbrk_r+0x1c>)
 800e17a:	4604      	mov	r4, r0
 800e17c:	4608      	mov	r0, r1
 800e17e:	602b      	str	r3, [r5, #0]
 800e180:	f000 f9fe 	bl	800e580 <_sbrk>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	d102      	bne.n	800e18e <_sbrk_r+0x1a>
 800e188:	682b      	ldr	r3, [r5, #0]
 800e18a:	b103      	cbz	r3, 800e18e <_sbrk_r+0x1a>
 800e18c:	6023      	str	r3, [r4, #0]
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	20000774 	.word	0x20000774

0800e194 <_write_r>:
 800e194:	b538      	push	{r3, r4, r5, lr}
 800e196:	4604      	mov	r4, r0
 800e198:	4608      	mov	r0, r1
 800e19a:	4611      	mov	r1, r2
 800e19c:	2200      	movs	r2, #0
 800e19e:	4d05      	ldr	r5, [pc, #20]	@ (800e1b4 <_write_r+0x20>)
 800e1a0:	602a      	str	r2, [r5, #0]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	f000 f99b 	bl	800e4de <_write>
 800e1a8:	1c43      	adds	r3, r0, #1
 800e1aa:	d102      	bne.n	800e1b2 <_write_r+0x1e>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	b103      	cbz	r3, 800e1b2 <_write_r+0x1e>
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	bd38      	pop	{r3, r4, r5, pc}
 800e1b4:	20000774 	.word	0x20000774

0800e1b8 <memcpy>:
 800e1b8:	440a      	add	r2, r1
 800e1ba:	4291      	cmp	r1, r2
 800e1bc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e1c0:	d100      	bne.n	800e1c4 <memcpy+0xc>
 800e1c2:	4770      	bx	lr
 800e1c4:	b510      	push	{r4, lr}
 800e1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ca:	4291      	cmp	r1, r2
 800e1cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1d0:	d1f9      	bne.n	800e1c6 <memcpy+0xe>
 800e1d2:	bd10      	pop	{r4, pc}

0800e1d4 <__assert_func>:
 800e1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1d6:	4614      	mov	r4, r2
 800e1d8:	461a      	mov	r2, r3
 800e1da:	4b09      	ldr	r3, [pc, #36]	@ (800e200 <__assert_func+0x2c>)
 800e1dc:	4605      	mov	r5, r0
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	68d8      	ldr	r0, [r3, #12]
 800e1e2:	b954      	cbnz	r4, 800e1fa <__assert_func+0x26>
 800e1e4:	4b07      	ldr	r3, [pc, #28]	@ (800e204 <__assert_func+0x30>)
 800e1e6:	461c      	mov	r4, r3
 800e1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1ec:	9100      	str	r1, [sp, #0]
 800e1ee:	462b      	mov	r3, r5
 800e1f0:	4905      	ldr	r1, [pc, #20]	@ (800e208 <__assert_func+0x34>)
 800e1f2:	f000 f83b 	bl	800e26c <fiprintf>
 800e1f6:	f000 f858 	bl	800e2aa <abort>
 800e1fa:	4b04      	ldr	r3, [pc, #16]	@ (800e20c <__assert_func+0x38>)
 800e1fc:	e7f4      	b.n	800e1e8 <__assert_func+0x14>
 800e1fe:	bf00      	nop
 800e200:	200000a8 	.word	0x200000a8
 800e204:	0800f656 	.word	0x0800f656
 800e208:	0800f628 	.word	0x0800f628
 800e20c:	0800f61b 	.word	0x0800f61b

0800e210 <_calloc_r>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	fba1 5402 	umull	r5, r4, r1, r2
 800e216:	b93c      	cbnz	r4, 800e228 <_calloc_r+0x18>
 800e218:	4629      	mov	r1, r5
 800e21a:	f7ff f9c7 	bl	800d5ac <_malloc_r>
 800e21e:	4606      	mov	r6, r0
 800e220:	b928      	cbnz	r0, 800e22e <_calloc_r+0x1e>
 800e222:	2600      	movs	r6, #0
 800e224:	4630      	mov	r0, r6
 800e226:	bd70      	pop	{r4, r5, r6, pc}
 800e228:	220c      	movs	r2, #12
 800e22a:	6002      	str	r2, [r0, #0]
 800e22c:	e7f9      	b.n	800e222 <_calloc_r+0x12>
 800e22e:	462a      	mov	r2, r5
 800e230:	4621      	mov	r1, r4
 800e232:	f7fe f81e 	bl	800c272 <memset>
 800e236:	e7f5      	b.n	800e224 <_calloc_r+0x14>

0800e238 <__ascii_mbtowc>:
 800e238:	b082      	sub	sp, #8
 800e23a:	b901      	cbnz	r1, 800e23e <__ascii_mbtowc+0x6>
 800e23c:	a901      	add	r1, sp, #4
 800e23e:	b142      	cbz	r2, 800e252 <__ascii_mbtowc+0x1a>
 800e240:	b14b      	cbz	r3, 800e256 <__ascii_mbtowc+0x1e>
 800e242:	7813      	ldrb	r3, [r2, #0]
 800e244:	600b      	str	r3, [r1, #0]
 800e246:	7812      	ldrb	r2, [r2, #0]
 800e248:	1e10      	subs	r0, r2, #0
 800e24a:	bf18      	it	ne
 800e24c:	2001      	movne	r0, #1
 800e24e:	b002      	add	sp, #8
 800e250:	4770      	bx	lr
 800e252:	4610      	mov	r0, r2
 800e254:	e7fb      	b.n	800e24e <__ascii_mbtowc+0x16>
 800e256:	f06f 0001 	mvn.w	r0, #1
 800e25a:	e7f8      	b.n	800e24e <__ascii_mbtowc+0x16>

0800e25c <_malloc_usable_size_r>:
 800e25c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e260:	1f18      	subs	r0, r3, #4
 800e262:	2b00      	cmp	r3, #0
 800e264:	bfbc      	itt	lt
 800e266:	580b      	ldrlt	r3, [r1, r0]
 800e268:	18c0      	addlt	r0, r0, r3
 800e26a:	4770      	bx	lr

0800e26c <fiprintf>:
 800e26c:	b40e      	push	{r1, r2, r3}
 800e26e:	b503      	push	{r0, r1, lr}
 800e270:	4601      	mov	r1, r0
 800e272:	ab03      	add	r3, sp, #12
 800e274:	4805      	ldr	r0, [pc, #20]	@ (800e28c <fiprintf+0x20>)
 800e276:	f853 2b04 	ldr.w	r2, [r3], #4
 800e27a:	6800      	ldr	r0, [r0, #0]
 800e27c:	9301      	str	r3, [sp, #4]
 800e27e:	f7ff f853 	bl	800d328 <_vfiprintf_r>
 800e282:	b002      	add	sp, #8
 800e284:	f85d eb04 	ldr.w	lr, [sp], #4
 800e288:	b003      	add	sp, #12
 800e28a:	4770      	bx	lr
 800e28c:	200000a8 	.word	0x200000a8

0800e290 <__ascii_wctomb>:
 800e290:	4603      	mov	r3, r0
 800e292:	4608      	mov	r0, r1
 800e294:	b141      	cbz	r1, 800e2a8 <__ascii_wctomb+0x18>
 800e296:	2aff      	cmp	r2, #255	@ 0xff
 800e298:	d904      	bls.n	800e2a4 <__ascii_wctomb+0x14>
 800e29a:	228a      	movs	r2, #138	@ 0x8a
 800e29c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	4770      	bx	lr
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	700a      	strb	r2, [r1, #0]
 800e2a8:	4770      	bx	lr

0800e2aa <abort>:
 800e2aa:	2006      	movs	r0, #6
 800e2ac:	b508      	push	{r3, lr}
 800e2ae:	f000 f82b 	bl	800e308 <raise>
 800e2b2:	2001      	movs	r0, #1
 800e2b4:	f000 f844 	bl	800e340 <_exit>

0800e2b8 <_raise_r>:
 800e2b8:	291f      	cmp	r1, #31
 800e2ba:	b538      	push	{r3, r4, r5, lr}
 800e2bc:	4605      	mov	r5, r0
 800e2be:	460c      	mov	r4, r1
 800e2c0:	d904      	bls.n	800e2cc <_raise_r+0x14>
 800e2c2:	2316      	movs	r3, #22
 800e2c4:	6003      	str	r3, [r0, #0]
 800e2c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2ce:	b112      	cbz	r2, 800e2d6 <_raise_r+0x1e>
 800e2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2d4:	b94b      	cbnz	r3, 800e2ea <_raise_r+0x32>
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f000 f830 	bl	800e33c <_getpid_r>
 800e2dc:	4622      	mov	r2, r4
 800e2de:	4601      	mov	r1, r0
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e6:	f000 b817 	b.w	800e318 <_kill_r>
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d00a      	beq.n	800e304 <_raise_r+0x4c>
 800e2ee:	1c59      	adds	r1, r3, #1
 800e2f0:	d103      	bne.n	800e2fa <_raise_r+0x42>
 800e2f2:	2316      	movs	r3, #22
 800e2f4:	6003      	str	r3, [r0, #0]
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	e7e7      	b.n	800e2ca <_raise_r+0x12>
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e302:	4798      	blx	r3
 800e304:	2000      	movs	r0, #0
 800e306:	e7e0      	b.n	800e2ca <_raise_r+0x12>

0800e308 <raise>:
 800e308:	4b02      	ldr	r3, [pc, #8]	@ (800e314 <raise+0xc>)
 800e30a:	4601      	mov	r1, r0
 800e30c:	6818      	ldr	r0, [r3, #0]
 800e30e:	f7ff bfd3 	b.w	800e2b8 <_raise_r>
 800e312:	bf00      	nop
 800e314:	200000a8 	.word	0x200000a8

0800e318 <_kill_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	2300      	movs	r3, #0
 800e31c:	4d06      	ldr	r5, [pc, #24]	@ (800e338 <_kill_r+0x20>)
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	4611      	mov	r1, r2
 800e324:	602b      	str	r3, [r5, #0]
 800e326:	f000 f829 	bl	800e37c <_kill>
 800e32a:	1c43      	adds	r3, r0, #1
 800e32c:	d102      	bne.n	800e334 <_kill_r+0x1c>
 800e32e:	682b      	ldr	r3, [r5, #0]
 800e330:	b103      	cbz	r3, 800e334 <_kill_r+0x1c>
 800e332:	6023      	str	r3, [r4, #0]
 800e334:	bd38      	pop	{r3, r4, r5, pc}
 800e336:	bf00      	nop
 800e338:	20000774 	.word	0x20000774

0800e33c <_getpid_r>:
 800e33c:	f000 b91e 	b.w	800e57c <_getpid>

0800e340 <_exit>:
 800e340:	4601      	mov	r1, r0
 800e342:	b508      	push	{r3, lr}
 800e344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e348:	4a01      	ldr	r2, [pc, #4]	@ (800e350 <_exit+0x10>)
 800e34a:	f000 f803 	bl	800e354 <_kill_shared>
 800e34e:	bf00      	nop
 800e350:	00020026 	.word	0x00020026

0800e354 <_kill_shared>:
 800e354:	b507      	push	{r0, r1, r2, lr}
 800e356:	e9cd 2100 	strd	r2, r1, [sp]
 800e35a:	f000 fa4d 	bl	800e7f8 <_has_ext_exit_extended>
 800e35e:	2800      	cmp	r0, #0
 800e360:	bf0c      	ite	eq
 800e362:	2418      	moveq	r4, #24
 800e364:	2420      	movne	r4, #32
 800e366:	f000 fa47 	bl	800e7f8 <_has_ext_exit_extended>
 800e36a:	b120      	cbz	r0, 800e376 <_kill_shared+0x22>
 800e36c:	466d      	mov	r5, sp
 800e36e:	4620      	mov	r0, r4
 800e370:	4629      	mov	r1, r5
 800e372:	beab      	bkpt	0x00ab
 800e374:	4604      	mov	r4, r0
 800e376:	9d00      	ldr	r5, [sp, #0]
 800e378:	e7f9      	b.n	800e36e <_kill_shared+0x1a>
	...

0800e37c <_kill>:
 800e37c:	2906      	cmp	r1, #6
 800e37e:	b508      	push	{r3, lr}
 800e380:	bf0c      	ite	eq
 800e382:	4a02      	ldreq	r2, [pc, #8]	@ (800e38c <_kill+0x10>)
 800e384:	4a02      	ldrne	r2, [pc, #8]	@ (800e390 <_kill+0x14>)
 800e386:	f7ff ffe5 	bl	800e354 <_kill_shared>
 800e38a:	bf00      	nop
 800e38c:	00020023 	.word	0x00020023
 800e390:	00020026 	.word	0x00020026

0800e394 <findslot>:
 800e394:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c0 <findslot+0x2c>)
 800e396:	b510      	push	{r4, lr}
 800e398:	4604      	mov	r4, r0
 800e39a:	6818      	ldr	r0, [r3, #0]
 800e39c:	b118      	cbz	r0, 800e3a6 <findslot+0x12>
 800e39e:	6a03      	ldr	r3, [r0, #32]
 800e3a0:	b90b      	cbnz	r3, 800e3a6 <findslot+0x12>
 800e3a2:	f7fd fe9b 	bl	800c0dc <__sinit>
 800e3a6:	2c13      	cmp	r4, #19
 800e3a8:	d807      	bhi.n	800e3ba <findslot+0x26>
 800e3aa:	4806      	ldr	r0, [pc, #24]	@ (800e3c4 <findslot+0x30>)
 800e3ac:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800e3b0:	3201      	adds	r2, #1
 800e3b2:	d002      	beq.n	800e3ba <findslot+0x26>
 800e3b4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800e3b8:	bd10      	pop	{r4, pc}
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	e7fc      	b.n	800e3b8 <findslot+0x24>
 800e3be:	bf00      	nop
 800e3c0:	200000a8 	.word	0x200000a8
 800e3c4:	20000788 	.word	0x20000788

0800e3c8 <error>:
 800e3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	f000 faaa 	bl	800e924 <__errno>
 800e3d0:	2613      	movs	r6, #19
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	2700      	movs	r7, #0
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	4639      	mov	r1, r7
 800e3da:	beab      	bkpt	0x00ab
 800e3dc:	4606      	mov	r6, r0
 800e3de:	4620      	mov	r0, r4
 800e3e0:	602e      	str	r6, [r5, #0]
 800e3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3e4 <checkerror>:
 800e3e4:	1c43      	adds	r3, r0, #1
 800e3e6:	d101      	bne.n	800e3ec <checkerror+0x8>
 800e3e8:	f7ff bfee 	b.w	800e3c8 <error>
 800e3ec:	4770      	bx	lr

0800e3ee <_swiread>:
 800e3ee:	b530      	push	{r4, r5, lr}
 800e3f0:	b085      	sub	sp, #20
 800e3f2:	2406      	movs	r4, #6
 800e3f4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e3f8:	9203      	str	r2, [sp, #12]
 800e3fa:	ad01      	add	r5, sp, #4
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	4629      	mov	r1, r5
 800e400:	beab      	bkpt	0x00ab
 800e402:	4604      	mov	r4, r0
 800e404:	4620      	mov	r0, r4
 800e406:	f7ff ffed 	bl	800e3e4 <checkerror>
 800e40a:	b005      	add	sp, #20
 800e40c:	bd30      	pop	{r4, r5, pc}

0800e40e <_read>:
 800e40e:	b570      	push	{r4, r5, r6, lr}
 800e410:	460e      	mov	r6, r1
 800e412:	4614      	mov	r4, r2
 800e414:	f7ff ffbe 	bl	800e394 <findslot>
 800e418:	4605      	mov	r5, r0
 800e41a:	b930      	cbnz	r0, 800e42a <_read+0x1c>
 800e41c:	f000 fa82 	bl	800e924 <__errno>
 800e420:	2309      	movs	r3, #9
 800e422:	6003      	str	r3, [r0, #0]
 800e424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e428:	bd70      	pop	{r4, r5, r6, pc}
 800e42a:	4622      	mov	r2, r4
 800e42c:	4631      	mov	r1, r6
 800e42e:	6800      	ldr	r0, [r0, #0]
 800e430:	f7ff ffdd 	bl	800e3ee <_swiread>
 800e434:	1c43      	adds	r3, r0, #1
 800e436:	d0f5      	beq.n	800e424 <_read+0x16>
 800e438:	686b      	ldr	r3, [r5, #4]
 800e43a:	1a20      	subs	r0, r4, r0
 800e43c:	4403      	add	r3, r0
 800e43e:	606b      	str	r3, [r5, #4]
 800e440:	e7f2      	b.n	800e428 <_read+0x1a>

0800e442 <_swilseek>:
 800e442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e444:	460c      	mov	r4, r1
 800e446:	4616      	mov	r6, r2
 800e448:	f7ff ffa4 	bl	800e394 <findslot>
 800e44c:	4605      	mov	r5, r0
 800e44e:	b940      	cbnz	r0, 800e462 <_swilseek+0x20>
 800e450:	f000 fa68 	bl	800e924 <__errno>
 800e454:	2309      	movs	r3, #9
 800e456:	6003      	str	r3, [r0, #0]
 800e458:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e45c:	4620      	mov	r0, r4
 800e45e:	b003      	add	sp, #12
 800e460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e462:	2e02      	cmp	r6, #2
 800e464:	d903      	bls.n	800e46e <_swilseek+0x2c>
 800e466:	f000 fa5d 	bl	800e924 <__errno>
 800e46a:	2316      	movs	r3, #22
 800e46c:	e7f3      	b.n	800e456 <_swilseek+0x14>
 800e46e:	2e01      	cmp	r6, #1
 800e470:	d112      	bne.n	800e498 <_swilseek+0x56>
 800e472:	6843      	ldr	r3, [r0, #4]
 800e474:	18e4      	adds	r4, r4, r3
 800e476:	d4f6      	bmi.n	800e466 <_swilseek+0x24>
 800e478:	682b      	ldr	r3, [r5, #0]
 800e47a:	260a      	movs	r6, #10
 800e47c:	466f      	mov	r7, sp
 800e47e:	e9cd 3400 	strd	r3, r4, [sp]
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	beab      	bkpt	0x00ab
 800e488:	4606      	mov	r6, r0
 800e48a:	4630      	mov	r0, r6
 800e48c:	f7ff ffaa 	bl	800e3e4 <checkerror>
 800e490:	2800      	cmp	r0, #0
 800e492:	dbe1      	blt.n	800e458 <_swilseek+0x16>
 800e494:	606c      	str	r4, [r5, #4]
 800e496:	e7e1      	b.n	800e45c <_swilseek+0x1a>
 800e498:	2e02      	cmp	r6, #2
 800e49a:	6803      	ldr	r3, [r0, #0]
 800e49c:	d1ec      	bne.n	800e478 <_swilseek+0x36>
 800e49e:	260c      	movs	r6, #12
 800e4a0:	466f      	mov	r7, sp
 800e4a2:	9300      	str	r3, [sp, #0]
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	4639      	mov	r1, r7
 800e4a8:	beab      	bkpt	0x00ab
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7ff ff99 	bl	800e3e4 <checkerror>
 800e4b2:	1c43      	adds	r3, r0, #1
 800e4b4:	d0d0      	beq.n	800e458 <_swilseek+0x16>
 800e4b6:	4404      	add	r4, r0
 800e4b8:	e7de      	b.n	800e478 <_swilseek+0x36>

0800e4ba <_lseek>:
 800e4ba:	f7ff bfc2 	b.w	800e442 <_swilseek>

0800e4be <_swiwrite>:
 800e4be:	b530      	push	{r4, r5, lr}
 800e4c0:	b085      	sub	sp, #20
 800e4c2:	2405      	movs	r4, #5
 800e4c4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e4c8:	9203      	str	r2, [sp, #12]
 800e4ca:	ad01      	add	r5, sp, #4
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	beab      	bkpt	0x00ab
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f7ff ff85 	bl	800e3e4 <checkerror>
 800e4da:	b005      	add	sp, #20
 800e4dc:	bd30      	pop	{r4, r5, pc}

0800e4de <_write>:
 800e4de:	b570      	push	{r4, r5, r6, lr}
 800e4e0:	460e      	mov	r6, r1
 800e4e2:	4615      	mov	r5, r2
 800e4e4:	f7ff ff56 	bl	800e394 <findslot>
 800e4e8:	4604      	mov	r4, r0
 800e4ea:	b930      	cbnz	r0, 800e4fa <_write+0x1c>
 800e4ec:	f000 fa1a 	bl	800e924 <__errno>
 800e4f0:	2309      	movs	r3, #9
 800e4f2:	6003      	str	r3, [r0, #0]
 800e4f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4f8:	bd70      	pop	{r4, r5, r6, pc}
 800e4fa:	462a      	mov	r2, r5
 800e4fc:	4631      	mov	r1, r6
 800e4fe:	6800      	ldr	r0, [r0, #0]
 800e500:	f7ff ffdd 	bl	800e4be <_swiwrite>
 800e504:	1e03      	subs	r3, r0, #0
 800e506:	dbf5      	blt.n	800e4f4 <_write+0x16>
 800e508:	6862      	ldr	r2, [r4, #4]
 800e50a:	1ae8      	subs	r0, r5, r3
 800e50c:	4402      	add	r2, r0
 800e50e:	42ab      	cmp	r3, r5
 800e510:	6062      	str	r2, [r4, #4]
 800e512:	d1f1      	bne.n	800e4f8 <_write+0x1a>
 800e514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e518:	2000      	movs	r0, #0
 800e51a:	f7ff bf55 	b.w	800e3c8 <error>

0800e51e <_swiclose>:
 800e51e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e520:	2402      	movs	r4, #2
 800e522:	9001      	str	r0, [sp, #4]
 800e524:	ad01      	add	r5, sp, #4
 800e526:	4620      	mov	r0, r4
 800e528:	4629      	mov	r1, r5
 800e52a:	beab      	bkpt	0x00ab
 800e52c:	4604      	mov	r4, r0
 800e52e:	4620      	mov	r0, r4
 800e530:	f7ff ff58 	bl	800e3e4 <checkerror>
 800e534:	b003      	add	sp, #12
 800e536:	bd30      	pop	{r4, r5, pc}

0800e538 <_close>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4605      	mov	r5, r0
 800e53c:	f7ff ff2a 	bl	800e394 <findslot>
 800e540:	4604      	mov	r4, r0
 800e542:	b930      	cbnz	r0, 800e552 <_close+0x1a>
 800e544:	f000 f9ee 	bl	800e924 <__errno>
 800e548:	2309      	movs	r3, #9
 800e54a:	6003      	str	r3, [r0, #0]
 800e54c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e550:	bd38      	pop	{r3, r4, r5, pc}
 800e552:	3d01      	subs	r5, #1
 800e554:	2d01      	cmp	r5, #1
 800e556:	d809      	bhi.n	800e56c <_close+0x34>
 800e558:	4b07      	ldr	r3, [pc, #28]	@ (800e578 <_close+0x40>)
 800e55a:	689a      	ldr	r2, [r3, #8]
 800e55c:	691b      	ldr	r3, [r3, #16]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d104      	bne.n	800e56c <_close+0x34>
 800e562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e566:	2000      	movs	r0, #0
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	e7f1      	b.n	800e550 <_close+0x18>
 800e56c:	6820      	ldr	r0, [r4, #0]
 800e56e:	f7ff ffd6 	bl	800e51e <_swiclose>
 800e572:	2800      	cmp	r0, #0
 800e574:	d0f5      	beq.n	800e562 <_close+0x2a>
 800e576:	e7eb      	b.n	800e550 <_close+0x18>
 800e578:	20000788 	.word	0x20000788

0800e57c <_getpid>:
 800e57c:	2001      	movs	r0, #1
 800e57e:	4770      	bx	lr

0800e580 <_sbrk>:
 800e580:	4a0d      	ldr	r2, [pc, #52]	@ (800e5b8 <_sbrk+0x38>)
 800e582:	4603      	mov	r3, r0
 800e584:	6811      	ldr	r1, [r2, #0]
 800e586:	b510      	push	{r4, lr}
 800e588:	b909      	cbnz	r1, 800e58e <_sbrk+0xe>
 800e58a:	490c      	ldr	r1, [pc, #48]	@ (800e5bc <_sbrk+0x3c>)
 800e58c:	6011      	str	r1, [r2, #0]
 800e58e:	4669      	mov	r1, sp
 800e590:	6810      	ldr	r0, [r2, #0]
 800e592:	4403      	add	r3, r0
 800e594:	428b      	cmp	r3, r1
 800e596:	d806      	bhi.n	800e5a6 <_sbrk+0x26>
 800e598:	4909      	ldr	r1, [pc, #36]	@ (800e5c0 <_sbrk+0x40>)
 800e59a:	4c0a      	ldr	r4, [pc, #40]	@ (800e5c4 <_sbrk+0x44>)
 800e59c:	6809      	ldr	r1, [r1, #0]
 800e59e:	42a1      	cmp	r1, r4
 800e5a0:	d008      	beq.n	800e5b4 <_sbrk+0x34>
 800e5a2:	428b      	cmp	r3, r1
 800e5a4:	d906      	bls.n	800e5b4 <_sbrk+0x34>
 800e5a6:	f000 f9bd 	bl	800e924 <__errno>
 800e5aa:	230c      	movs	r3, #12
 800e5ac:	6003      	str	r3, [r0, #0]
 800e5ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5b2:	bd10      	pop	{r4, pc}
 800e5b4:	6013      	str	r3, [r2, #0]
 800e5b6:	e7fc      	b.n	800e5b2 <_sbrk+0x32>
 800e5b8:	20000778 	.word	0x20000778
 800e5bc:	20000828 	.word	0x20000828
 800e5c0:	20000264 	.word	0x20000264
 800e5c4:	cafedead 	.word	0xcafedead

0800e5c8 <_swistat>:
 800e5c8:	b570      	push	{r4, r5, r6, lr}
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	f7ff fee2 	bl	800e394 <findslot>
 800e5d0:	4605      	mov	r5, r0
 800e5d2:	b930      	cbnz	r0, 800e5e2 <_swistat+0x1a>
 800e5d4:	f000 f9a6 	bl	800e924 <__errno>
 800e5d8:	2309      	movs	r3, #9
 800e5da:	6003      	str	r3, [r0, #0]
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5e0:	bd70      	pop	{r4, r5, r6, pc}
 800e5e2:	6863      	ldr	r3, [r4, #4]
 800e5e4:	260c      	movs	r6, #12
 800e5e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e5ea:	6063      	str	r3, [r4, #4]
 800e5ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5f0:	64a3      	str	r3, [r4, #72]	@ 0x48
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	beab      	bkpt	0x00ab
 800e5f8:	4605      	mov	r5, r0
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f7ff fef2 	bl	800e3e4 <checkerror>
 800e600:	1c43      	adds	r3, r0, #1
 800e602:	d0eb      	beq.n	800e5dc <_swistat+0x14>
 800e604:	6120      	str	r0, [r4, #16]
 800e606:	2000      	movs	r0, #0
 800e608:	e7ea      	b.n	800e5e0 <_swistat+0x18>

0800e60a <_fstat>:
 800e60a:	460b      	mov	r3, r1
 800e60c:	b510      	push	{r4, lr}
 800e60e:	2100      	movs	r1, #0
 800e610:	4604      	mov	r4, r0
 800e612:	2258      	movs	r2, #88	@ 0x58
 800e614:	4618      	mov	r0, r3
 800e616:	f7fd fe2c 	bl	800c272 <memset>
 800e61a:	4601      	mov	r1, r0
 800e61c:	4620      	mov	r0, r4
 800e61e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e622:	f7ff bfd1 	b.w	800e5c8 <_swistat>

0800e626 <_stat>:
 800e626:	b538      	push	{r3, r4, r5, lr}
 800e628:	460d      	mov	r5, r1
 800e62a:	4604      	mov	r4, r0
 800e62c:	2258      	movs	r2, #88	@ 0x58
 800e62e:	2100      	movs	r1, #0
 800e630:	4628      	mov	r0, r5
 800e632:	f7fd fe1e 	bl	800c272 <memset>
 800e636:	4620      	mov	r0, r4
 800e638:	2100      	movs	r1, #0
 800e63a:	f000 f811 	bl	800e660 <_swiopen>
 800e63e:	1c43      	adds	r3, r0, #1
 800e640:	4604      	mov	r4, r0
 800e642:	d00b      	beq.n	800e65c <_stat+0x36>
 800e644:	686b      	ldr	r3, [r5, #4]
 800e646:	4629      	mov	r1, r5
 800e648:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e64c:	606b      	str	r3, [r5, #4]
 800e64e:	f7ff ffbb 	bl	800e5c8 <_swistat>
 800e652:	4605      	mov	r5, r0
 800e654:	4620      	mov	r0, r4
 800e656:	f7ff ff6f 	bl	800e538 <_close>
 800e65a:	462c      	mov	r4, r5
 800e65c:	4620      	mov	r0, r4
 800e65e:	bd38      	pop	{r3, r4, r5, pc}

0800e660 <_swiopen>:
 800e660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e664:	4682      	mov	sl, r0
 800e666:	460e      	mov	r6, r1
 800e668:	2400      	movs	r4, #0
 800e66a:	4f28      	ldr	r7, [pc, #160]	@ (800e70c <_swiopen+0xac>)
 800e66c:	b096      	sub	sp, #88	@ 0x58
 800e66e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800e672:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800e676:	3301      	adds	r3, #1
 800e678:	d00c      	beq.n	800e694 <_swiopen+0x34>
 800e67a:	3401      	adds	r4, #1
 800e67c:	2c14      	cmp	r4, #20
 800e67e:	d1f6      	bne.n	800e66e <_swiopen+0xe>
 800e680:	f000 f950 	bl	800e924 <__errno>
 800e684:	2318      	movs	r3, #24
 800e686:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e68a:	6003      	str	r3, [r0, #0]
 800e68c:	4620      	mov	r0, r4
 800e68e:	b016      	add	sp, #88	@ 0x58
 800e690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e694:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800e698:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800e69c:	46e9      	mov	r9, sp
 800e69e:	d109      	bne.n	800e6b4 <_swiopen+0x54>
 800e6a0:	4649      	mov	r1, r9
 800e6a2:	4650      	mov	r0, sl
 800e6a4:	f7ff ffbf 	bl	800e626 <_stat>
 800e6a8:	3001      	adds	r0, #1
 800e6aa:	d003      	beq.n	800e6b4 <_swiopen+0x54>
 800e6ac:	f000 f93a 	bl	800e924 <__errno>
 800e6b0:	2311      	movs	r3, #17
 800e6b2:	e7e8      	b.n	800e686 <_swiopen+0x26>
 800e6b4:	f240 6301 	movw	r3, #1537	@ 0x601
 800e6b8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800e6bc:	07b2      	lsls	r2, r6, #30
 800e6be:	bf48      	it	mi
 800e6c0:	f045 0502 	orrmi.w	r5, r5, #2
 800e6c4:	421e      	tst	r6, r3
 800e6c6:	bf18      	it	ne
 800e6c8:	f045 0504 	orrne.w	r5, r5, #4
 800e6cc:	0733      	lsls	r3, r6, #28
 800e6ce:	bf48      	it	mi
 800e6d0:	f025 0504 	bicmi.w	r5, r5, #4
 800e6d4:	4650      	mov	r0, sl
 800e6d6:	bf48      	it	mi
 800e6d8:	f045 0508 	orrmi.w	r5, r5, #8
 800e6dc:	f8cd a000 	str.w	sl, [sp]
 800e6e0:	f7f1 fd36 	bl	8000150 <strlen>
 800e6e4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800e6e8:	2501      	movs	r5, #1
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	4649      	mov	r1, r9
 800e6ee:	beab      	bkpt	0x00ab
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	2d00      	cmp	r5, #0
 800e6f4:	db05      	blt.n	800e702 <_swiopen+0xa2>
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800e6fc:	4447      	add	r7, r8
 800e6fe:	607b      	str	r3, [r7, #4]
 800e700:	e7c4      	b.n	800e68c <_swiopen+0x2c>
 800e702:	4628      	mov	r0, r5
 800e704:	f7ff fe60 	bl	800e3c8 <error>
 800e708:	4604      	mov	r4, r0
 800e70a:	e7bf      	b.n	800e68c <_swiopen+0x2c>
 800e70c:	20000788 	.word	0x20000788

0800e710 <_get_semihosting_exts>:
 800e710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e714:	4606      	mov	r6, r0
 800e716:	460f      	mov	r7, r1
 800e718:	4829      	ldr	r0, [pc, #164]	@ (800e7c0 <_get_semihosting_exts+0xb0>)
 800e71a:	2100      	movs	r1, #0
 800e71c:	4615      	mov	r5, r2
 800e71e:	f7ff ff9f 	bl	800e660 <_swiopen>
 800e722:	4604      	mov	r4, r0
 800e724:	462a      	mov	r2, r5
 800e726:	2100      	movs	r1, #0
 800e728:	4630      	mov	r0, r6
 800e72a:	f7fd fda2 	bl	800c272 <memset>
 800e72e:	1c63      	adds	r3, r4, #1
 800e730:	d014      	beq.n	800e75c <_get_semihosting_exts+0x4c>
 800e732:	4620      	mov	r0, r4
 800e734:	f7ff fe2e 	bl	800e394 <findslot>
 800e738:	f04f 080c 	mov.w	r8, #12
 800e73c:	4681      	mov	r9, r0
 800e73e:	4640      	mov	r0, r8
 800e740:	4649      	mov	r1, r9
 800e742:	beab      	bkpt	0x00ab
 800e744:	4680      	mov	r8, r0
 800e746:	4640      	mov	r0, r8
 800e748:	f7ff fe4c 	bl	800e3e4 <checkerror>
 800e74c:	2803      	cmp	r0, #3
 800e74e:	dd02      	ble.n	800e756 <_get_semihosting_exts+0x46>
 800e750:	1ec3      	subs	r3, r0, #3
 800e752:	42ab      	cmp	r3, r5
 800e754:	dc07      	bgt.n	800e766 <_get_semihosting_exts+0x56>
 800e756:	4620      	mov	r0, r4
 800e758:	f7ff feee 	bl	800e538 <_close>
 800e75c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e760:	b003      	add	sp, #12
 800e762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e766:	2204      	movs	r2, #4
 800e768:	4620      	mov	r0, r4
 800e76a:	eb0d 0102 	add.w	r1, sp, r2
 800e76e:	f7ff fe4e 	bl	800e40e <_read>
 800e772:	2803      	cmp	r0, #3
 800e774:	ddef      	ble.n	800e756 <_get_semihosting_exts+0x46>
 800e776:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e77a:	2b53      	cmp	r3, #83	@ 0x53
 800e77c:	d1eb      	bne.n	800e756 <_get_semihosting_exts+0x46>
 800e77e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e782:	2b48      	cmp	r3, #72	@ 0x48
 800e784:	d1e7      	bne.n	800e756 <_get_semihosting_exts+0x46>
 800e786:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e78a:	2b46      	cmp	r3, #70	@ 0x46
 800e78c:	d1e3      	bne.n	800e756 <_get_semihosting_exts+0x46>
 800e78e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e792:	2b42      	cmp	r3, #66	@ 0x42
 800e794:	d1df      	bne.n	800e756 <_get_semihosting_exts+0x46>
 800e796:	2201      	movs	r2, #1
 800e798:	4639      	mov	r1, r7
 800e79a:	4620      	mov	r0, r4
 800e79c:	f7ff fe51 	bl	800e442 <_swilseek>
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	dbd8      	blt.n	800e756 <_get_semihosting_exts+0x46>
 800e7a4:	462a      	mov	r2, r5
 800e7a6:	4631      	mov	r1, r6
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f7ff fe30 	bl	800e40e <_read>
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	f7ff fec1 	bl	800e538 <_close>
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7ff fe14 	bl	800e3e4 <checkerror>
 800e7bc:	e7d0      	b.n	800e760 <_get_semihosting_exts+0x50>
 800e7be:	bf00      	nop
 800e7c0:	0800f657 	.word	0x0800f657

0800e7c4 <initialise_semihosting_exts>:
 800e7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	4d09      	ldr	r5, [pc, #36]	@ (800e7f0 <initialise_semihosting_exts+0x2c>)
 800e7cc:	4c09      	ldr	r4, [pc, #36]	@ (800e7f4 <initialise_semihosting_exts+0x30>)
 800e7ce:	a801      	add	r0, sp, #4
 800e7d0:	6029      	str	r1, [r5, #0]
 800e7d2:	6022      	str	r2, [r4, #0]
 800e7d4:	f7ff ff9c 	bl	800e710 <_get_semihosting_exts>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	dd07      	ble.n	800e7ec <initialise_semihosting_exts+0x28>
 800e7dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e7e0:	f003 0201 	and.w	r2, r3, #1
 800e7e4:	f003 0302 	and.w	r3, r3, #2
 800e7e8:	602a      	str	r2, [r5, #0]
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	b003      	add	sp, #12
 800e7ee:	bd30      	pop	{r4, r5, pc}
 800e7f0:	2000026c 	.word	0x2000026c
 800e7f4:	20000268 	.word	0x20000268

0800e7f8 <_has_ext_exit_extended>:
 800e7f8:	b510      	push	{r4, lr}
 800e7fa:	4c04      	ldr	r4, [pc, #16]	@ (800e80c <_has_ext_exit_extended+0x14>)
 800e7fc:	6823      	ldr	r3, [r4, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	da01      	bge.n	800e806 <_has_ext_exit_extended+0xe>
 800e802:	f7ff ffdf 	bl	800e7c4 <initialise_semihosting_exts>
 800e806:	6820      	ldr	r0, [r4, #0]
 800e808:	bd10      	pop	{r4, pc}
 800e80a:	bf00      	nop
 800e80c:	2000026c 	.word	0x2000026c

0800e810 <_has_ext_stdout_stderr>:
 800e810:	b510      	push	{r4, lr}
 800e812:	4c04      	ldr	r4, [pc, #16]	@ (800e824 <_has_ext_stdout_stderr+0x14>)
 800e814:	6823      	ldr	r3, [r4, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	da01      	bge.n	800e81e <_has_ext_stdout_stderr+0xe>
 800e81a:	f7ff ffd3 	bl	800e7c4 <initialise_semihosting_exts>
 800e81e:	6820      	ldr	r0, [r4, #0]
 800e820:	bd10      	pop	{r4, pc}
 800e822:	bf00      	nop
 800e824:	20000268 	.word	0x20000268

0800e828 <initialise_monitor_handles>:
 800e828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82c:	2303      	movs	r3, #3
 800e82e:	2400      	movs	r4, #0
 800e830:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 800e8d4 <initialise_monitor_handles+0xac>
 800e834:	b085      	sub	sp, #20
 800e836:	f8cd 9004 	str.w	r9, [sp, #4]
 800e83a:	af01      	add	r7, sp, #4
 800e83c:	9303      	str	r3, [sp, #12]
 800e83e:	2501      	movs	r5, #1
 800e840:	9402      	str	r4, [sp, #8]
 800e842:	4628      	mov	r0, r5
 800e844:	4639      	mov	r1, r7
 800e846:	beab      	bkpt	0x00ab
 800e848:	4605      	mov	r5, r0
 800e84a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e84e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800e8d8 <initialise_monitor_handles+0xb0>
 800e852:	4623      	mov	r3, r4
 800e854:	4c21      	ldr	r4, [pc, #132]	@ (800e8dc <initialise_monitor_handles+0xb4>)
 800e856:	f8c8 5000 	str.w	r5, [r8]
 800e85a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800e85e:	3301      	adds	r3, #1
 800e860:	2b14      	cmp	r3, #20
 800e862:	d1fa      	bne.n	800e85a <initialise_monitor_handles+0x32>
 800e864:	f7ff ffd4 	bl	800e810 <_has_ext_stdout_stderr>
 800e868:	4d1d      	ldr	r5, [pc, #116]	@ (800e8e0 <initialise_monitor_handles+0xb8>)
 800e86a:	b1d0      	cbz	r0, 800e8a2 <initialise_monitor_handles+0x7a>
 800e86c:	f04f 0a03 	mov.w	sl, #3
 800e870:	2304      	movs	r3, #4
 800e872:	f8cd 9004 	str.w	r9, [sp, #4]
 800e876:	2601      	movs	r6, #1
 800e878:	f8cd a00c 	str.w	sl, [sp, #12]
 800e87c:	9302      	str	r3, [sp, #8]
 800e87e:	4630      	mov	r0, r6
 800e880:	4639      	mov	r1, r7
 800e882:	beab      	bkpt	0x00ab
 800e884:	4683      	mov	fp, r0
 800e886:	4b17      	ldr	r3, [pc, #92]	@ (800e8e4 <initialise_monitor_handles+0xbc>)
 800e888:	f8cd 9004 	str.w	r9, [sp, #4]
 800e88c:	f8c3 b000 	str.w	fp, [r3]
 800e890:	2308      	movs	r3, #8
 800e892:	f8cd a00c 	str.w	sl, [sp, #12]
 800e896:	9302      	str	r3, [sp, #8]
 800e898:	4630      	mov	r0, r6
 800e89a:	4639      	mov	r1, r7
 800e89c:	beab      	bkpt	0x00ab
 800e89e:	4606      	mov	r6, r0
 800e8a0:	602e      	str	r6, [r5, #0]
 800e8a2:	2600      	movs	r6, #0
 800e8a4:	682b      	ldr	r3, [r5, #0]
 800e8a6:	6066      	str	r6, [r4, #4]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	bf02      	ittt	eq
 800e8ac:	4b0d      	ldreq	r3, [pc, #52]	@ (800e8e4 <initialise_monitor_handles+0xbc>)
 800e8ae:	681b      	ldreq	r3, [r3, #0]
 800e8b0:	602b      	streq	r3, [r5, #0]
 800e8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e8b6:	6023      	str	r3, [r4, #0]
 800e8b8:	f7ff ffaa 	bl	800e810 <_has_ext_stdout_stderr>
 800e8bc:	b130      	cbz	r0, 800e8cc <initialise_monitor_handles+0xa4>
 800e8be:	4b09      	ldr	r3, [pc, #36]	@ (800e8e4 <initialise_monitor_handles+0xbc>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800e8c6:	682b      	ldr	r3, [r5, #0]
 800e8c8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800e8cc:	b005      	add	sp, #20
 800e8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d2:	bf00      	nop
 800e8d4:	0800f66d 	.word	0x0800f66d
 800e8d8:	20000784 	.word	0x20000784
 800e8dc:	20000788 	.word	0x20000788
 800e8e0:	2000077c 	.word	0x2000077c
 800e8e4:	20000780 	.word	0x20000780

0800e8e8 <_isatty>:
 800e8e8:	b570      	push	{r4, r5, r6, lr}
 800e8ea:	f7ff fd53 	bl	800e394 <findslot>
 800e8ee:	2409      	movs	r4, #9
 800e8f0:	4605      	mov	r5, r0
 800e8f2:	b920      	cbnz	r0, 800e8fe <_isatty+0x16>
 800e8f4:	f000 f816 	bl	800e924 <__errno>
 800e8f8:	6004      	str	r4, [r0, #0]
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	bd70      	pop	{r4, r5, r6, pc}
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	beab      	bkpt	0x00ab
 800e904:	4604      	mov	r4, r0
 800e906:	2c01      	cmp	r4, #1
 800e908:	4620      	mov	r0, r4
 800e90a:	d0f7      	beq.n	800e8fc <_isatty+0x14>
 800e90c:	f000 f80a 	bl	800e924 <__errno>
 800e910:	2513      	movs	r5, #19
 800e912:	4604      	mov	r4, r0
 800e914:	2600      	movs	r6, #0
 800e916:	4628      	mov	r0, r5
 800e918:	4631      	mov	r1, r6
 800e91a:	beab      	bkpt	0x00ab
 800e91c:	4605      	mov	r5, r0
 800e91e:	6025      	str	r5, [r4, #0]
 800e920:	e7eb      	b.n	800e8fa <_isatty+0x12>
	...

0800e924 <__errno>:
 800e924:	4b01      	ldr	r3, [pc, #4]	@ (800e92c <__errno+0x8>)
 800e926:	6818      	ldr	r0, [r3, #0]
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	200000a8 	.word	0x200000a8

0800e930 <_init>:
 800e930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e932:	bf00      	nop
 800e934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e936:	bc08      	pop	{r3}
 800e938:	469e      	mov	lr, r3
 800e93a:	4770      	bx	lr

0800e93c <_fini>:
 800e93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e93e:	bf00      	nop
 800e940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e942:	bc08      	pop	{r3}
 800e944:	469e      	mov	lr, r3
 800e946:	4770      	bx	lr
